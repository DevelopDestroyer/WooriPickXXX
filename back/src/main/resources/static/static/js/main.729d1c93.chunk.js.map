{"version":3,"sources":["component/Common/BottomBar.tsx","recoil/index.ts","recoil/Session.ts","component/AuthRoute.tsx","component/AuthRouteGuard.tsx","component/Common.ts","component/Common/HeaderAction.tsx","component/Category/DataModel.ts","component/Giving/DataModel.ts","component/Common/util.ts","component/Together/AddFriendList.tsx","component/Together/DataModel.ts","http/index.ts","recoil/Together.ts","page/AddFriendPage.tsx","page/BlockChainPage.tsx","recoil/Benefit.ts","page/BenefitCompanyPage.tsx","component/Block/BlockChainComponent.tsx","recoil/Giving.ts","page/BlockChainSelectPage.tsx","component/Common/SelectList.tsx","component/Signup/SignupCommon.tsx","component/Signup/SignupCategoryComponent.tsx","component/Signup/SignupFinishComponent.tsx","page/CategoryPage.tsx","component/Common/FingerDialog.tsx","component/Giving/GivingCommon.tsx","component/Giving/GivingAmountComponent.tsx","component/Common/Loading.tsx","component/Giving/GivingComponentDonationMember.tsx","component/Giving/GivingComponentDonationPie.tsx","component/Giving/GivingComponentStatus.tsx","component/Giving/GivingComponent.tsx","component/Giving/GivingExplanComponent.tsx","component/Giving/GivingFinishComponent.tsx","component/Giving/GivingSelectComponent.tsx","page/GivingPage.tsx","component/Common/HeaderDefault.tsx","component/Benefit/HomeBenefitInputText.tsx","component/Benefit/HomBenefitCompany.tsx","component/Benefit/HomeBenefitSearchList.tsx","component/Benefit/HomeBenefitList.tsx","component/Benefit/HomeBenefitSlider.tsx","component/Signup/DataModel.ts","component/Benefit/HomeBenefitComponent.tsx","component/Common/CategoryIcon.tsx","component/Home/HCBenefit.tsx","component/Home/BenefitList.tsx","component/Home/HCPoint.tsx","component/Home/HCStatus.tsx","component/Home/HomeComponent.tsx","component/Setting/SettingBenefit.tsx","component/Setting/SettingStatus.tsx","component/Setting/SettingComponent.tsx","component/Together/TCNoFriend.tsx","component/Common/LoaderComponent.tsx","component/Together/TCRanking.tsx","component/Together/TCRankList.tsx","component/Together/TCStatus.tsx","component/Together/TogetherComponent.tsx","page/HomePage.tsx","component/Rending/DataModel.ts","component/Rending/RendingComponent.tsx","page/SigninPage.tsx","page/MainPage.tsx","component/Signup/SignupAccountList.tsx","component/Signup/SignupAccountComponent.tsx","component/Signup/SignupCellphoneComponent.tsx","component/Signup/SignupPasswordComponent.tsx","component/Signup/SignupProfileComponent.tsx","page/SignupPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DISPLAY_TYPE","useStyles","makeStyles","defaultType","fontFamily","selectedType","color","BottomBarNav","props","classes","BottomNavigation","value","current","onChange","event","newValue","showLabels","BottomNavigationAction","selected","label","HOME","icon","BENEFIT","TOGETHER","SETTING","persistAtom","recoilPersist","key","storage","localStorage","IsSplashSkip","atom","default","effects_UNSTABLE","BottomNavState","BenefitSearch","SignUpProfileState","cellNumber","nickName","realName","SignUpAccInfoState","accountMoney","accountNumber","SignUpCategoryState","CurrentUserState","name","nickname","phoneNumber","point","CurrentUserCategoryState","CurrentUserTransactionState","AuthRoute","render","isLogin","children","component","others","to","pathname","Route","AuthRouteGuard","currentUser","useRecoilValue","commonSlickSettings","touchMove","dots","arrows","HeaderAction","AppBar","position","Toolbar","style","alignItems","isLast","IconButton","onClick","onMoveClick","className","KeyboardArrowLeft","display","Typography","headerTitle","endIcon","Box","flexGrow","CategoryStandInfo","id","COLOR_SET","GivingStandInfo","getCategoryNameFromId","target","find","eachId","getGivingNameFromId","getMoneyStr2Number","str","Math","floor","Number","getNumberString","number","toString","replace","getCategoryImgPath","prefix","a11yProps","index","emptryString","AddFriendList","data","map","arr","p","justifyContent","Button","disabled","mode","length","Divider","DUMMY_FRIEND_SET","cellphone","displayname","DUMMY_NOT_UNUSEDSET","console","log","process","http","axios","create","baseURL","interceptors","request","use","config","error","Promise","reject","response","TestFrienString","FriendDataSetState","TogetherAVGState","aveRank","ago3MonthBenefitPoint","myRank","thisMonthBenefitPoint","UnUsedFriendState","dfColor","buttonLayout","width","backgroundColor","borderRadius","flexBasis","TabPanel","other","role","hidden","aria-labelledby","CHAIN_TYPE","AddFriendPage","history","useHistory","userInfo","friendState","useState","page","setPage","sliderRef","useRef","useRecoilState","unUsedF","setUnUsedF","useEffect","list","Array","forEach","eachFriend","push","post","then","res","apiFriend","inputUnUsedF","goBack","mt","Card","marginTop","CardHeader","title","Tabs","nextValue","slickGoTo","indicatorColor","textColor","variant","scrollButtons","Tab","ref","friendInfo","filter","userNickname","friendNickname","BenefitStateCompany","isLoaded","BenefitFavoriteState","BenefitCompanyPage","useParams","company","setBenefitCompany","favoriteCompany","setFavoriteCompany","currentCompany","setCompany","statusChange","setStatusChange","companyName","userLike","goBackFunciton","a","currendAdd","delete","get","encodeURI","isertArr","benefitData","eachData","categoryId","description","thumbNailPath","totalLike","setTimeout","copy","Object","assign","src","marginLeft","my","textAlign","height","InfoDialog","onClose","open","Dialog","CardContent","overflowWrap","donationId","timeString","timeStamp","hash","previousHash","nonce","CardActions","paddingTop","disableRipple","colorSet","201","202","203","204","205","BlockChainComponent","card","minHeight","cardBgColor","isMine","mainColor","subColor","setOpen","donationAmount","GivingSelectState","GivingAmountState","GivingResultState","donationRatioStatus","memberDTOs","totalDonationMoney","BlockChainState","iconButton","maxWidth","maxHeight","text","BlockChainPage","type","titleName","ANIMAL","CHILD","DISABLE","ENV","RELEIF","getTitle","imageName","getImageName","getColor","showMy","setShowMy","currentData","total","backgroundSize","backgroundImage","pt","bgcolor","Fab","size","left","transform","bottom","BlockChainSelectPage","setChainData","useSetRecoilState","onClickChain","insertValue","dataArr","split","givingTarget","valueOf","targetDepth","flexDirection","margin","root","fontSize","SelectList","standardData","FormControlLabel","control","Checkbox","checkedIcon","checked","selectData","findIndex","select","SignupCommonComponent","onMoveButtonClick","buttonDisable","onCustomizeNextClick","ACCategoryDialog","recommand","handleOk","ACOverDialog","SignupCategoryComponent","category","setCategory","suggestDialog","setSuggestDialog","overDialog","setOverDialog","setRecommand","SignupCommon","next","benefitCategoryList","currentTarget","item","SignupFinishComponent","mb","CategoryPage","currentIndex","setIndex","onMove","move","FingerDialog","fingerClick","subheader","GivingCommon","buttonTitle","inputText","GivingAmountComponent","origin","max","givingAmount","setGivingAmount","givingSelect","donationPoint","nextMove","TextField","helperText","Loading","Grid","container","justify","CircularProgress","minWidth","whiteSpace","overflow","textOverflow","money","GivingComponentDonationMember","donationMember","orderMember","slice","sort","d1","d2","getOrderMember","sortMemger","maxValueLen","minValueLen","getRage","start","end","eachMember","ml","GivingComponentDonationPie","sortData","donationStatus","totalDonationCount","labels","datasets","borderColor","options","maintainAspectRatio","responsive","plugins","legend","boxWidth","usePointStyle","animation","duration","moneyFont","button","GivingComponentStatus","GivingComponent","givingData","setGivingData","GivingExplanComponent","GivingFinishComponent","GivingSelectComponent","GivingPage","resetSelect","useResetRecoilState","resetAmount","onNextMove","HeaderDeafault","fontWeight","theme","marginRight","input","spacing","flex","img","HomeBenefitInputText","Paper","InputBase","placeholder","inputProps","commonHeart","selectedHeart","HomBenefitCompany","CardActionArea","wrap","HomeBenefitSearchList","searchText","benefitCompany","benefitFavoriteCompany","renderValue","setRenderValue","filterData","categoryName","includes","HomeBenefitList","SIGNUP_TYPE","HomeBenefitSlider","pageIndex","override","speed","HomeBenefitComponent","setSearchText","setFavoriteState","isSearchMode","CategoryIcon","cardActionLayout","padding","HCPoint","resCategory","eachCategory","extractDate","date","c","Date","getMonth","getDate","getDay","BenefitList","totalBuyPrice","userCategory","transaction","setTransaction","displaySet","setDisplaySet","inline","HCStatus","setUserInfo","HomeComponent","mx","HCBenefit","SettingBenefit","SettingStatus","containerOuter","paddingBottom","iconSize","SettingComponent","TCNoFriend","setFrined","border","borderWidth","mr","preventDefault","window","parent","LoaderComponent","TCRanking","avgInfo","xs","TCRankList","titleStr","setTitleStr","rankList","setRankList","isLoad","setIsLoad","friendPoint","insertData","isMy","eachString","TCStatus","TogetherComponent","friendMode","setAVGInfo","homeRendering","HomePage","renderType","setCurrentRenderType","BottomBar","rendingData","first","second","highLight","imgPath","buttonOverride","RendingComponent","overflowX","isFirst","imgContainer","bodyReplace","zIndex","SigninPage","MainPage","isSplashSkip","setIsSplashSkip","MainRendingData","labelLayout","AccountComponent","ACNO","PBOK_BAL","SignupAccountList","originData","selectedData","SignupAccountComponent","setAccount","signupInfo","setIsLoaded","wooriAccountList","setWooriAccountList","selectAccount","setSelectAccount","checkCurrent","regex","cellFormat","dataBody","GRID","ACCT_KND","toUpperCase","ACDialog","validNumber","SignupCellphoneComponent","profile","setProfile","dialog","setDialog","complete","setComplete","inputValidStr","setInputValidStr","validStr","setValidStr","certMode","inValid","px","pb","flexWrap","onlyNums","onChangePhoneNumber","result","characters","charactersLength","i","charAt","random","join","makeNumberId","SignupPasswordComponent","password","setPassword","showPassword","setShowPassword","setUserState","signupProfile","accountInfo","resetProfile","resetAccNum","resetCategory","fingerDialog","setFingerDialog","signupFunction","signupData","signupCategory","createRes","registRes","userRes","autoComplete","InputProps","endAdornment","InputAdornment","aria-label","onMouseDown","Visibility","VisibilityOff","SignupProfileComponent","parseData","setInValid","setHelperText","alreadyExist","SignupPage","resetAccInfo","items","App","setFrinedTest","addEventListener","e","eachPersonStr","friendList","eachStr","privateDataList","exact","path","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","unstable_createMuiStrictModeTheme","ReactDOM","StrictMode","ThemeProvider","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.729d1c93.chunk.js","sourcesContent":["import {\r\n    BottomNavigation,\r\n    BottomNavigationAction,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport StorefrontIcon from '@material-ui/icons/Storefront';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    defaultType: {\r\n        fontFamily: '\"Noto Sans KR\", sans-serif',\r\n    },\r\n    selectedType: {\r\n        color: '#62c3eb',\r\n    },\r\n}));\r\n\r\nexport enum DISPLAY_TYPE {\r\n    HOME,\r\n    BENEFIT,\r\n    TOGETHER,\r\n    SETTING,\r\n}\r\n\r\ninterface BottomBarNavProps {\r\n    current: DISPLAY_TYPE;\r\n    onChange: (clickType: DISPLAY_TYPE) => void;\r\n}\r\n\r\nconst BottomBarNav: React.FC<BottomBarNavProps> = (\r\n    props: BottomBarNavProps\r\n) => {\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (\r\n        event: React.ChangeEvent<any>,\r\n        newValue: DISPLAY_TYPE\r\n    ) => {\r\n        props.onChange(newValue);\r\n    };\r\n\r\n    return (\r\n        <BottomNavigation\r\n            value={props.current}\r\n            onChange={handleChange}\r\n            showLabels={true}\r\n        >\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"홈\"\r\n                value={DISPLAY_TYPE.HOME}\r\n                icon={<HomeIcon />}\r\n            />\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"혜택찾기\"\r\n                value={DISPLAY_TYPE.BENEFIT}\r\n                icon={<StorefrontIcon />}\r\n            />\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"투게더\"\r\n                value={DISPLAY_TYPE.TOGETHER}\r\n                icon={<PeopleIcon />}\r\n            />\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"My\"\r\n                value={DISPLAY_TYPE.SETTING}\r\n                icon={<SettingsIcon />}\r\n            />\r\n        </BottomNavigation>\r\n    );\r\n};\r\n\r\nexport default BottomBarNav;\r\n","import { recoilPersist } from 'recoil-persist'\r\n\r\nconst { persistAtom } = recoilPersist({\r\n    key: 'recoil-persist', // configuration stay the same too\r\n    storage: localStorage\r\n})\r\n\r\nexport {\r\n    persistAtom\r\n}","import { atom } from 'recoil';\r\nimport { CategoryDataSet } from '../component/Category/DataModel';\r\nimport { DISPLAY_TYPE } from '../component/Common/BottomBar';\r\nimport { TransactionSet } from '../component/Home/DataModel';\r\nimport { SignupProfileInfo } from '../component/Signup/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport interface UserInfo {\r\n    name: string;\r\n    nickname: string;\r\n    phoneNumber: string;\r\n    accountNumber: string;\r\n    accountMoney: number;\r\n    point: number;\r\n}\r\n\r\nexport const IsSplashSkip = atom<boolean>({\r\n    key: 'IsSplashSkip',\r\n    default: false,\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const BottomNavState = atom<DISPLAY_TYPE>({\r\n    key: 'BottomNavState',\r\n    default: DISPLAY_TYPE.HOME,\r\n});\r\n\r\nexport const BenefitSearch = atom<string>({\r\n    key: 'BenefitSearch',\r\n    default: '',\r\n});\r\n\r\nexport const SignUpProfileState = atom<SignupProfileInfo>({\r\n    key: 'SignUpProfileState',\r\n    default: {\r\n        cellNumber: '',\r\n        nickName: '',\r\n        realName: '',\r\n    },\r\n});\r\n\r\nexport const SignUpAccInfoState = atom<{\r\n    accountNumber: string;\r\n    accountMoney: number;\r\n}>({\r\n    key: 'SignUpAccInfoState',\r\n    default: {\r\n        accountMoney: 0,\r\n        accountNumber: '',\r\n    },\r\n});\r\n\r\nexport const SignUpCategoryState = atom<CategoryDataSet[]>({\r\n    key: 'SignUpCategoryState',\r\n    default: [],\r\n});\r\n\r\nexport const CurrentUserState = atom<UserInfo>({\r\n    key: 'CurrentUserState',\r\n    default: {\r\n        name: '',\r\n        nickname: '',\r\n        phoneNumber: '',\r\n        accountNumber: '',\r\n        accountMoney: 0,\r\n        point: 0,\r\n    },\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const CurrentUserCategoryState = atom<number[]>({\r\n    key: 'CurrentUserCategoryState',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const CurrentUserTransactionState = atom<TransactionSet[]>({\r\n    key: 'CurrentUserTransactionState',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n","import React from 'react';\r\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\r\n\r\nexport interface AuthRouteProps extends RouteProps {\r\n    isLogin: boolean;\r\n}\r\n\r\nclass AuthRoute extends Route<AuthRouteProps> {\r\n    render = () => {\r\n        const { isLogin, children, component, ...others } = this.props;\r\n        if (isLogin) {\r\n            return (\r\n                <Route {...others} component={component}>\r\n                    {children}\r\n                </Route>\r\n            );\r\n        } else {\r\n            return (\r\n                <Route\r\n                    {...others}\r\n                    render={() => <Redirect to={{ pathname: '/signin' }} />}\r\n                />\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React from 'react';\r\nimport { RouteProps } from 'react-router-dom';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../recoil/Session';\r\nimport AuthRoute from './AuthRoute';\r\n\r\nconst AuthRouteGuard: React.FC<RouteProps> = (props: RouteProps) => {\r\n    const currentUser = useRecoilValue(CurrentUserState);\r\n    return <AuthRoute isLogin={currentUser.nickname !== ''} {...props} />;\r\n};\r\n\r\nexport default AuthRouteGuard;\r\n","import { Settings } from 'react-slick';\r\n\r\nexport const commonSlickSettings: Settings = {\r\n    touchMove: false,\r\n    dots: false,\r\n    arrows: false,\r\n};\r\n","import {\r\n    AppBar,\r\n    Box,\r\n    IconButton,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    defaultType: {\r\n        fontFamily: '\"Noto Sans KR\", sans-serif',\r\n    },\r\n    selectedType: {\r\n        color: '#62c3eb',\r\n    },\r\n}));\r\n\r\nexport interface HeaderActionProps {\r\n    isLast: boolean;\r\n    headerTitle: string;\r\n    onMoveClick: () => void;\r\n    endIcon?: JSX.Element;\r\n}\r\n\r\nconst HeaderAction: React.FC<HeaderActionProps> = (\r\n    props: HeaderActionProps\r\n) => {\r\n    return (\r\n        <AppBar position=\"sticky\">\r\n            <Toolbar style={{ alignItems: 'center' }}>\r\n                {!props.isLast && (\r\n                    <IconButton\r\n                        onClick={props.onMoveClick}\r\n                        className=\"back_div\"\r\n                    >\r\n                        <KeyboardArrowLeft\r\n                            style={{\r\n                                display: 'block',\r\n                            }}\r\n                        />\r\n                    </IconButton>\r\n                )}\r\n\r\n                <Typography className=\"txt_24 txt_b\">\r\n                    {props.headerTitle}\r\n                </Typography>\r\n                {props.endIcon && (\r\n                    <>\r\n                        <Box flexGrow=\"1\" />\r\n                        {props.endIcon}\r\n                    </>\r\n                )}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default HeaderAction;\r\n","import { CategoryDataInfo } from '../Common/SelectList';\r\n\r\nexport interface CategoryDataSet extends CategoryDataInfo {}\r\n\r\nexport const CategoryStandInfo: CategoryDataSet[] = [\r\n    {\r\n        id: 101,\r\n        name: '저플라스틱',\r\n    },\r\n    {\r\n        id: 102,\r\n        name: '저탄소',\r\n    },\r\n    {\r\n        id: 103,\r\n        name: '동물실험반대',\r\n    },\r\n    {\r\n        id: 104,\r\n        name: '결식아동',\r\n    },\r\n    {\r\n        id: 105,\r\n        name: '노인보호',\r\n    },\r\n    {\r\n        id: 106,\r\n        name: '장애인 복지',\r\n    },\r\n    {\r\n        id: 107,\r\n        name: '장애인이 만든 제품',\r\n    },\r\n    {\r\n        id: 108,\r\n        name: '구호물품',\r\n    },\r\n    {\r\n        id: 109,\r\n        name: '비건',\r\n    },\r\n];\r\n","import { CategoryDataInfo } from '../Common/SelectList';\r\n\r\nexport interface ChainAPIRes {\r\n    hash: string;\r\n    previousHash: string;\r\n    data: string;\r\n    timeStamp: number;\r\n    nonce: number;\r\n    target: string;\r\n    targetDepth: number;\r\n}\r\n\r\n// export type DONATION_TARGET = 201 | 202 | 203 | 204 | 205;\r\nexport interface BlockChainTotalSet {\r\n    [givingTarget: number]: BlockChainDataSet[];\r\n}\r\n\r\nexport interface BlockChainDataSet {\r\n    name: string;\r\n    timeString: string;\r\n    givingTarget: string;\r\n    donationAmount: number;\r\n    hash: string;\r\n    nonce: number;\r\n    previousHash: string;\r\n    target: string;\r\n    targetDepth: number;\r\n    timeStamp: number;\r\n}\r\n\r\nexport interface DonationCategory {\r\n    donationId: number;\r\n    totalDonationCount: number;\r\n}\r\n\r\nexport interface DonationMember {\r\n    nickname: string;\r\n    point: number;\r\n}\r\n\r\nexport interface GivingResultInfo {\r\n    isLoaded: boolean;\r\n    totalDonationMoney: number;\r\n    donationRatioStatus: DonationCategory[];\r\n    memberDTOs: DonationMember[];\r\n}\r\n\r\nexport interface GivingDataSet extends CategoryDataInfo {}\r\n\r\nexport const COLOR_SET = [\r\n    '#3BAAD8',\r\n    '#62BBE0',\r\n    '#9DD4EC',\r\n    '#C4E5F7',\r\n    '#D8EEF7',\r\n];\r\n\r\nexport const GivingStandInfo: GivingDataSet[] = [\r\n    {\r\n        id: 201,\r\n        name: '친환경',\r\n    },\r\n    {\r\n        id: 202,\r\n        name: '동물보호',\r\n    },\r\n    {\r\n        id: 203,\r\n        name: '아동 / 노인',\r\n    },\r\n    {\r\n        id: 204,\r\n        name: '장애인',\r\n    },\r\n    {\r\n        id: 205,\r\n        name: '구호물품',\r\n    },\r\n];\r\n\r\nexport interface CommonInterface {\r\n    onMoveClick: (nextMove: number) => void;\r\n    index: number;\r\n}\r\n","import { CategoryStandInfo } from '../Category/DataModel';\r\nimport { GivingStandInfo } from '../Giving/DataModel';\r\n\r\nexport const getCategoryNameFromId = (id: number): string => {\r\n    const target = CategoryStandInfo.find((eachId) => eachId.id == id);\r\n    return target ? target.name : '';\r\n};\r\n\r\nexport const getGivingNameFromId = (id: number): string => {\r\n    const target = GivingStandInfo.find((eachId) => eachId.id == id);\r\n    return target ? target.name : '';\r\n};\r\n\r\nexport const getMoneyStr2Number = (str: string): number => {\r\n    return Math.floor(Number(str));\r\n};\r\n\r\nexport const getNumberString = (number: number): string => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n};\r\n\r\nexport const makeNumberId = (length: number): string => {\r\n    const result = [];\r\n    const characters = '0123456789';\r\n    const charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n        result.push(\r\n            characters.charAt(Math.floor(Math.random() * charactersLength))\r\n        );\r\n    }\r\n    return result.join('');\r\n};\r\n\r\nexport const getCategoryImgPath = (id: number): string => {\r\n    const prefix = '/images/';\r\n    switch (id) {\r\n        case 101:\r\n            return prefix + 'icn_lowPlastic.png';\r\n        case 102:\r\n            return prefix + 'icn_lowCarbon.png';\r\n        case 103:\r\n            return prefix + 'icn_noAnimalTesting.png';\r\n        case 104:\r\n            return prefix + 'icn_children.png';\r\n        case 105:\r\n            return prefix + 'icn_oldman.png';\r\n        case 106:\r\n            return prefix + 'icn_disabled.png';\r\n        case 107:\r\n            return prefix + 'icn_disabled_Product.png';\r\n        case 108:\r\n            return prefix + 'icn_relief.png';\r\n        case 109:\r\n            return prefix + 'icn_vegan.png';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const a11yProps = (index: any) => {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n};\r\n","import {\r\n    Box,\r\n    Button,\r\n    Divider,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { UsedFriendSet } from './DataModel';\r\n\r\nexport interface AddFriendListProps {\r\n    data: UsedFriendSet[];\r\n    mode: 'USED' | 'NOTUSED';\r\n    onClick?: (userInfo: UsedFriendSet) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    emptryString: {\r\n        color: 'white',\r\n    },\r\n}));\r\n\r\nconst AddFriendList: React.FC<AddFriendListProps> = (\r\n    props: AddFriendListProps\r\n) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {props.data.map((data, index, arr) => {\r\n                return (\r\n                    <>\r\n                        <Box key={data.name} display=\"flex\" p=\"9px\">\r\n                            <Box>\r\n                                <Typography className=\"txt_m txt_16\">\r\n                                    {data.name}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`${\r\n                                        data.nickname\r\n                                            ? 'txt_gray1'\r\n                                            : classes.emptryString\r\n                                    } txt_m txt_14`}\r\n                                >\r\n                                    {data.nickname ? data.nickname : 'emptry'}\r\n                                </Typography>\r\n                            </Box>\r\n                            <Box flexGrow=\"1\" />\r\n                            <Box\r\n                                display=\"flex\"\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Button\r\n                                    onClick={() =>\r\n                                        props.onClick && props.onClick(data)\r\n                                    }\r\n                                    disabled={props.mode === 'NOTUSED'}\r\n                                    className=\"btn_blueBorder txt_14\"\r\n                                >\r\n                                    {props.mode === 'USED' ? '추가' : '초대'}\r\n                                </Button>\r\n                            </Box>\r\n                        </Box>\r\n                        {arr.length - 1 > index && <Divider />}\r\n                    </>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddFriendList;\r\n","export interface FriendDataSet {\r\n    name: string;\r\n    displayname: string;\r\n    cellphone: string;\r\n}\r\n\r\nexport interface RankingDataSet {\r\n    friendNickname: string;\r\n    friendPoint: number;\r\n}\r\n\r\nexport interface UsedFriendSet {\r\n    name: string;\r\n    nickname?: string;\r\n    phoneNumber: string;\r\n}\r\n\r\nexport interface TogetherAVGSet {\r\n    ago3MonthBenefitPoint: number;\r\n    aveRank: number;\r\n    myRank: number;\r\n    thisMonthBenefitPoint: number;\r\n}\r\n\r\nexport const DUMMY_FRIEND_SET: FriendDataSet[] = [\r\n    {\r\n        cellphone: '010-3333-1234',\r\n        displayname: '서진',\r\n        name: '서진',\r\n    },\r\n    {\r\n        cellphone: '010-1111-1234',\r\n        displayname: '태호',\r\n        name: '태호',\r\n    },\r\n    {\r\n        cellphone: '010-2222-1234',\r\n        displayname: '진영',\r\n        name: '진영',\r\n    },\r\n    {\r\n        cellphone: '010-4444-1234',\r\n        displayname: '정민',\r\n        name: '정민',\r\n    },\r\n];\r\n\r\nexport const DUMMY_NOT_UNUSEDSET: UsedFriendSet[] = [\r\n    {\r\n        phoneNumber: '123-4567-8901',\r\n        nickname: '테스트1',\r\n        name: '테스트1',\r\n    },\r\n    {\r\n        phoneNumber: '123-3214-2412',\r\n        nickname: '테스트2',\r\n        name: '테스트2',\r\n    },\r\n    {\r\n        phoneNumber: '123-3432-6642',\r\n        nickname: '테스트3',\r\n        name: '테스트3',\r\n    },\r\n    {\r\n        phoneNumber: '123-1235-9757',\r\n        nickname: '테스트4',\r\n        name: '테스트4',\r\n    },\r\n    {\r\n        phoneNumber: '123-7564-7454',\r\n        nickname: '테스트4',\r\n        name: '테스트4',\r\n    },\r\n    {\r\n        phoneNumber: '123-5345-6643',\r\n        nickname: '테스트5',\r\n        name: '테스트5',\r\n    },\r\n    {\r\n        phoneNumber: '123-1262-6345',\r\n        nickname: '테스트6',\r\n        name: '테스트6',\r\n    },\r\n    {\r\n        phoneNumber: '123-7456-6654',\r\n        nickname: '테스트7',\r\n        name: '테스트7',\r\n    },\r\n];\r\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\nconsole.log(`Backend End point ${process.env.REACT_APP_BACKEND_ENDPOINT}`);\r\nconst http = axios.create({\r\n    baseURL: process.env.REACT_APP_BACKEND_ENDPOINT,\r\n});\r\n\r\nhttp.interceptors.request.use(\r\n    (config: AxiosRequestConfig) => {\r\n        console.log(`Reqeust Interceptor Called`);\r\n        return config;\r\n    },\r\n    (error: any) => {\r\n        console.log(error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nhttp.interceptors.response.use(\r\n    (config: AxiosResponse) => {\r\n        console.log(`Response Interceptor Called`);\r\n        return config;\r\n    },\r\n    (error: any) => {\r\n        console.log(error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default http;\r\n","import { atom } from 'recoil';\r\nimport {\r\n    FriendDataSet,\r\n    TogetherAVGSet,\r\n    UsedFriendSet,\r\n} from '../component/Together/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport const TestFrienString = atom<string>({\r\n    key: 'TestFrienString',\r\n    default: '',\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const FriendDataSetState = atom<FriendDataSet[]>({\r\n    key: 'FriendDataSetState',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const TogetherAVGState = atom<TogetherAVGSet>({\r\n    key: 'TogetherAVGState',\r\n    default: {\r\n        aveRank: -1,\r\n        ago3MonthBenefitPoint: -1,\r\n        myRank: -1,\r\n        thisMonthBenefitPoint: -1,\r\n    },\r\n});\r\n\r\nexport const UsedFriendState = atom<UsedFriendSet[]>({\r\n    key: 'UsedFriendState',\r\n    default: [],\r\n});\r\n\r\nexport const UnUsedFriendState = atom<UsedFriendSet[]>({\r\n    key: 'UnUsedFriendState',\r\n    default: [],\r\n});\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardHeader,\r\n    makeStyles,\r\n    Tab,\r\n    Tabs,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport { a11yProps } from '../component/Common/util';\r\nimport AddFriendList from '../component/Together/AddFriendList';\r\nimport {\r\n    DUMMY_NOT_UNUSEDSET,\r\n    UsedFriendSet,\r\n} from '../component/Together/DataModel';\r\nimport http from '../http';\r\nimport { CurrentUserState } from '../recoil/Session';\r\nimport { FriendDataSetState, UnUsedFriendState } from '../recoil/Together';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        width: '80%',\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box style={{ backgroundColor: '#F1F4F7' }} p={3}>\r\n                {children}\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AddFriendPage: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const friendState = useRecoilValue(FriendDataSetState);\r\n    const [page, setPage] = useState<number>(0);\r\n    const sliderRef = useRef<Slider>(null);\r\n\r\n    const [unUsedF, setUnUsedF] = useRecoilState(UnUsedFriendState);\r\n\r\n    const tabChange = (event: ChangeEvent<any>, nextValue: number) => {\r\n        setPage(nextValue);\r\n        sliderRef.current && sliderRef.current.slickGoTo(nextValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (friendState.length > 0) {\r\n            console.log(friendState);\r\n            const data = {\r\n                nickname: userInfo.nickname,\r\n                list: Array<any>(),\r\n            };\r\n            friendState.forEach((eachFriend) => {\r\n                data.list.push({ phoneNumber: eachFriend.cellphone });\r\n            });\r\n            http.post('/api/friends', data).then((res) => {\r\n                const apiFriend: UsedFriendSet[] = res.data.data;\r\n\r\n                const inputUnUsedF: UsedFriendSet[] = [];\r\n                apiFriend.forEach((data) => {\r\n                    inputUnUsedF.push(data);\r\n                });\r\n                setUnUsedF(inputUnUsedF);\r\n            });\r\n        }\r\n\r\n        console.log('effect');\r\n    }, [friendState]);\r\n\r\n    const addClick = (friendInfo: UsedFriendSet) => {\r\n        setUnUsedF(\r\n            unUsedF.filter(\r\n                (data) => data.phoneNumber !== friendInfo.phoneNumber\r\n            )\r\n        );\r\n        http.post('/api/friend', {\r\n            userNickname: userInfo.nickname,\r\n            friendNickname: friendInfo.nickname as string,\r\n        });\r\n    };\r\n\r\n    const goBackFunciton = () => {\r\n        history.goBack();\r\n    };\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                isLast={false}\r\n                headerTitle={'친구추가'}\r\n                onMoveClick={goBackFunciton}\r\n            />\r\n\r\n            <div className=\"container\">\r\n                <Box mt=\"30px\">\r\n                    <Typography className=\"txt_b txt_20\">\r\n                        투게더를 같이 즐길\r\n                    </Typography>\r\n                    <Typography className=\"txt_b txt_20\">\r\n                        친구를 추가해주세요.\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <Card style={{ marginTop: '24px' }}>\r\n                    <CardHeader\r\n                        title={\r\n                            <Typography className=\"txt_b txt_20\">\r\n                                내 연락처\r\n                            </Typography>\r\n                        }\r\n                    />\r\n                    <Box mt=\"24px\">\r\n                        <Tabs\r\n                            value={page}\r\n                            onChange={tabChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            scrollButtons=\"auto\"\r\n                        >\r\n                            <Tab\r\n                                key={0}\r\n                                label={'혜택통 사용중인 친구'}\r\n                                {...a11yProps(0)}\r\n                            />\r\n                            <Tab\r\n                                key={1}\r\n                                label={'혜택동 미가입 친구'}\r\n                                {...a11yProps(1)}\r\n                            />\r\n                        </Tabs>\r\n                    </Box>\r\n                    <Slider {...commonSlickSettings} ref={sliderRef}>\r\n                        <TabPanel index={0} value={page}>\r\n                            {unUsedF.length > 0 ? (\r\n                                <AddFriendList\r\n                                    onClick={addClick}\r\n                                    data={unUsedF}\r\n                                    mode=\"USED\"\r\n                                />\r\n                            ) : (\r\n                                <Typography className=\"txt_14 txt_center\">\r\n                                    혜택통 사용중인 친구 중, 모든유저를 친구추가\r\n                                    하였습니다\r\n                                </Typography>\r\n                            )}\r\n                        </TabPanel>\r\n                        <TabPanel index={1} value={page}>\r\n                            <AddFriendList\r\n                                data={DUMMY_NOT_UNUSEDSET}\r\n                                mode=\"NOTUSED\"\r\n                            />\r\n                        </TabPanel>\r\n                    </Slider>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddFriendPage;\r\n","import { Box, Fab, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { useRecoilValue } from 'recoil';\r\nimport BlockChainComponent from '../component/Block/BlockChainComponent';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport { getNumberString } from '../component/Common/util';\r\nimport { BlockChainState } from '../recoil/Giving';\r\nimport { CurrentUserState } from '../recoil/Session';\r\n\r\nexport enum CHAIN_TYPE {\r\n    ENV = 201,\r\n    ANIMAL = 202,\r\n    CHILD = 203,\r\n    DISABLE = 204,\r\n    RELEIF = 205,\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    iconButton: {\r\n        maxWidth: '5rem',\r\n        maxHeight: '5rem',\r\n    },\r\n    text: {\r\n        marginTop: '5px',\r\n    },\r\n}));\r\n\r\nconst getColor = (data: CHAIN_TYPE) => {\r\n    switch (data) {\r\n        case CHAIN_TYPE.ANIMAL:\r\n            return '#E5B88A';\r\n        case CHAIN_TYPE.CHILD:\r\n            return '#C9AFC7';\r\n        case CHAIN_TYPE.DISABLE:\r\n            return '#98B5D8';\r\n        case CHAIN_TYPE.ENV:\r\n            return '#BFD0A3';\r\n        case CHAIN_TYPE.RELEIF:\r\n            return '#DE6C6C';\r\n    }\r\n    return '';\r\n};\r\n\r\nconst getImageName = (data: CHAIN_TYPE) => {\r\n    switch (data) {\r\n        case CHAIN_TYPE.ANIMAL:\r\n            return 'Animal.png';\r\n        case CHAIN_TYPE.CHILD:\r\n            return 'Children.png';\r\n        case CHAIN_TYPE.DISABLE:\r\n            return 'Disabled.png';\r\n        case CHAIN_TYPE.ENV:\r\n            return 'Environment.png';\r\n        case CHAIN_TYPE.RELEIF:\r\n            return 'Relief.png';\r\n    }\r\n    return '';\r\n};\r\n\r\nconst getTitle = (data: CHAIN_TYPE) => {\r\n    switch (data) {\r\n        case CHAIN_TYPE.ANIMAL:\r\n            return '동물보호';\r\n        case CHAIN_TYPE.CHILD:\r\n            return '아동/노인 복지';\r\n        case CHAIN_TYPE.DISABLE:\r\n            return '장애인 복지';\r\n        case CHAIN_TYPE.ENV:\r\n            return '친환경';\r\n        case CHAIN_TYPE.RELEIF:\r\n            return '구호물품';\r\n    }\r\n    return '';\r\n};\r\n\r\nconst BlockChainPage: React.FC = () => {\r\n    const { type } = useParams<any>();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const titleName = getTitle(type * 1);\r\n    const imageName = getImageName(type * 1);\r\n    const colorSet = getColor(type * 1);\r\n    const history = useHistory();\r\n\r\n    const [showMy, setShowMy] = useState(false);\r\n    const onShow = () => {\r\n        setShowMy(!showMy);\r\n    };\r\n    const goBackFunciton = () => {\r\n        history.goBack();\r\n    };\r\n    const chainTotalData = useRecoilValue(BlockChainState);\r\n\r\n    const currentData = (chainTotalData[type * 1] || []).filter((data) => {\r\n        return !showMy || data.name === userInfo.nickname;\r\n    });\r\n    let total = 0;\r\n\r\n    currentData.forEach((eachData) => {\r\n        total += eachData.donationAmount;\r\n    });\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                isLast={false}\r\n                headerTitle={titleName}\r\n                onMoveClick={goBackFunciton}\r\n            />\r\n\r\n            <Box className=\"container\">\r\n                <Box mt=\"30px\">\r\n                    <Box>\r\n                        <Typography className={`txt_20 txt_line`}>\r\n                            현재\r\n                        </Typography>\r\n                        &nbsp;\r\n                        <Typography className={`txt_20 txt_b txt_line`}>\r\n                            {titleName}빌딩\r\n                        </Typography>\r\n                        <Typography className={`txt_20 txt_line`}>\r\n                            은\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box>\r\n                        <Typography className={`txt_20 txt_b txt_line`}>\r\n                            {currentData.length}층\r\n                        </Typography>\r\n                        <Typography className={`txt_20 txt_line`}>\r\n                            이며,\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box>\r\n                        <Typography className={`txt_20 txt_line`}>\r\n                            {`모금액은 `}\r\n                        </Typography>\r\n                        &nbsp;\r\n                        <Typography className={`txt_20 txt_b txt_line`}>\r\n                            {getNumberString(total)}\r\n                        </Typography>\r\n                        &nbsp;\r\n                        <Typography className={`txt_20 txt_line`}>\r\n                            {` 입니다`}\r\n                        </Typography>\r\n                    </Box>\r\n                </Box>\r\n                <Box>\r\n                    <Box\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'center',\r\n                            alignItems: 'center',\r\n                            height: '84px',\r\n                            backgroundSize: '100% 100%',\r\n                            backgroundImage: `url(/images/Roof_${imageName})`,\r\n                        }}\r\n                    >\r\n                        <Box pt=\"15px\">\r\n                            <Typography className=\"txt_wh txt_b txt_20\">\r\n                                {titleName}\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box bgcolor={colorSet} p=\"15px\">\r\n                        {currentData.map((eachData, index, arr) => {\r\n                            return (\r\n                                <Box\r\n                                    key={index}\r\n                                    mt={`${index === 0 ? '0' : '15px'}`}\r\n                                >\r\n                                    <BlockChainComponent\r\n                                        {...eachData}\r\n                                        isMine={\r\n                                            userInfo.nickname === eachData.name\r\n                                        }\r\n                                        donationId={type * 1}\r\n                                        floor={arr.length - index}\r\n                                    />\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </Box>\r\n                    <Box>\r\n                        <img src={`/images/floor_${imageName}`} />\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n            <Fab\r\n                variant=\"extended\"\r\n                size=\"medium\"\r\n                onClick={onShow}\r\n                style={{\r\n                    backgroundColor: 'white',\r\n                    left: '50%',\r\n                    transform: 'translateX(-50%)',\r\n                    position: 'absolute',\r\n                    bottom: '15px',\r\n                }}\r\n            >\r\n                <Typography className=\"txt_primaryBlue\">\r\n                    {showMy ? '전부 보이기' : '내 블록만 보기'}\r\n                </Typography>\r\n            </Fab>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlockChainPage;\r\n","import { atom } from 'recoil';\r\nimport {\r\n    BenefitCompanyRes,\r\n    BenefitFavoriteCompany,\r\n} from '../component/Benefit/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport const BenefitStateCompany = atom<BenefitCompanyRes>({\r\n    key: 'BenefitStateCompany',\r\n    default: {\r\n        isLoaded: false,\r\n        data: [],\r\n    },\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const BenefitFavoriteState = atom<BenefitFavoriteCompany>({\r\n    key: 'BenefitFavoriteState',\r\n    default: {},\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n","import { Box, Button, IconButton, makeStyles } from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport {\r\n    BenefitCompany,\r\n    BenefitCompanyRes,\r\n    BenefitFavoriteCompany,\r\n} from '../component/Benefit/DataModel';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport http from '../http';\r\nimport { BenefitFavoriteState, BenefitStateCompany } from '../recoil/Benefit';\r\nimport { CurrentUserState } from '../recoil/Session';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        width: '80%',\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst BenefitCompanyPage: React.FC = () => {\r\n    const { name } = useParams<any>();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const [company, setBenefitCompany] = useRecoilState(BenefitStateCompany);\r\n    const [favoriteCompany, setFavoriteCompany] = useRecoilState(\r\n        BenefitFavoriteState\r\n    );\r\n    const [currentCompany, setCompany] = useState<BenefitCompany>();\r\n\r\n    const [statusChange, setStatusChange] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const data = company.data.find((data) => {\r\n            return data.companyName === name;\r\n        });\r\n        favoriteCompany[name];\r\n        if (data) {\r\n            setCompany({\r\n                ...data,\r\n                userLike: !!favoriteCompany[name],\r\n            });\r\n        }\r\n    }, [company, favoriteCompany]);\r\n\r\n    const onClick = () => {\r\n        const copy = Object.assign({}, favoriteCompany);\r\n        copy[name] = !favoriteCompany[name];\r\n        setFavoriteCompany(copy);\r\n        if (!statusChange) {\r\n            setStatusChange(true);\r\n        }\r\n    };\r\n\r\n    const goBackFunciton = async () => {\r\n        setStatusChange(false);\r\n        const currendAdd = !!favoriteCompany[name];\r\n        console.log(currendAdd);\r\n        const data = {\r\n            companyName: name,\r\n            userNickname: userInfo.nickname,\r\n        };\r\n        let res;\r\n        if (currendAdd) {\r\n            res = await http.post('/api/company/like', data);\r\n        } else {\r\n            res = await http.delete('/api/company/like', { data });\r\n        }\r\n\r\n        http.get(`/api/${encodeURI(userInfo.nickname)}/company`).then((res) => {\r\n            const isertArr: BenefitCompanyRes = {\r\n                isLoaded: true,\r\n                data: [],\r\n            };\r\n            const benefitData: BenefitFavoriteCompany = {};\r\n            res.data.data.forEach((eachData: BenefitCompany) => {\r\n                isertArr.data.push({\r\n                    categoryId: eachData.categoryId,\r\n                    companyName: eachData.companyName,\r\n                    description: eachData.description,\r\n                    thumbNailPath: eachData.thumbNailPath\r\n                        .replace(/\\/\\//gi, '/')\r\n                        .replace(/\\.[^/.]+$/, '.png'),\r\n                    totalLike: eachData.totalLike,\r\n                });\r\n                benefitData[eachData.companyName] = eachData.userLike;\r\n            });\r\n\r\n            setBenefitCompany(isertArr);\r\n            setTimeout(() => {\r\n                setFavoriteCompany(benefitData);\r\n            }, 100);\r\n        });\r\n        history.goBack();\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                headerTitle={name}\r\n                isLast={false}\r\n                onMoveClick={goBackFunciton}\r\n                endIcon={\r\n                    <IconButton onClick={onClick}>\r\n                        {favoriteCompany[name] ? (\r\n                            <FavoriteIcon style={{ color: 'red' }} />\r\n                        ) : (\r\n                            <FavoriteBorderIcon />\r\n                        )}\r\n                    </IconButton>\r\n                }\r\n            >\r\n                {name}\r\n            </HeaderAction>\r\n\r\n            <div className=\"container\">\r\n                {currentCompany?.thumbNailPath && (\r\n                    <img src={currentCompany?.thumbNailPath} />\r\n                )}\r\n                <div className=\"div_rd_txt mg_t20\">\r\n                    <p className=\"txt_20 txt_b\">{name}에서는</p>\r\n\r\n                    <p className=\"txt_20\">\r\n                        {`${currentCompany?.description}합니다.`}\r\n                    </p>\r\n                </div>\r\n\r\n                <div className=\"box_div bg_wh pd_20 mg_t30\">\r\n                    <p className=\"txt_20 txt_b\">{name} 상품</p>\r\n                    <div className=\"mg_t30\" style={{ width: '100%' }}>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_1.png\" />\r\n                            <p className=\"txt_16\">햄프코튼 다용도 타월</p>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                                marginLeft: '2%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_2.png\" />\r\n                            <p className=\"txt_16\">천연라텍스 고무장갑</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mg_t30\" style={{ width: '100%' }}>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_3.png\" />\r\n                            <p className=\"txt_16\">사이잘 빨대 세척솔</p>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                                marginLeft: '2%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_4.png\" />\r\n                            <p className=\"txt_16\">다회용 밀랍 주방랩</p>\r\n                        </div>\r\n                    </div>\r\n                    <Box my=\"30px\" textAlign=\"center\">\r\n                        <Button\r\n                            className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                        >\r\n                            상품 더 보러가기\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n\r\n                <div className=\"box_div bg_wh pd_20 mg_t30\">\r\n                    <p className=\"txt_20 txt_b\">{name} 후기</p>\r\n                    <img\r\n                        className=\"mg_t20\"\r\n                        style={{ width: '100%' }}\r\n                        src=\"/images/product/company_score.png\"\r\n                    />\r\n                    <div className=\"line bg_gray3 mg_t20\"></div>\r\n\r\n                    <p className=\"txt_12 txt_b mg_t20\">\r\n                        hayeon0908 / 닥터노아 마루 대나무 칫솔\r\n                    </p>\r\n                    <img\r\n                        className=\"mg_t6\"\r\n                        style={{\r\n                            height: '16px',\r\n                            width: 'auto',\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                        src=\"/images/product/star_5.png\"\r\n                    />\r\n                    <p\r\n                        className=\"txt_12 txt_gray2 mg_l10\"\r\n                        style={{\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                    >\r\n                        2021.02.25\r\n                    </p>\r\n\r\n                    <p className=\"mg_t20 txt_14\">\r\n                        플라스틱 줄여야겠다고 생각해서 구매하게 되었어요! 여러\r\n                        제품 써봤는데 이 대나무 칫솔이 제일 쓰기도 편하고 재질이\r\n                        좋아요 ㅠㅠ 대나무 칫솔 쓰면 항상 입 안이 헐어서\r\n                        고민이였는데 이 저품 쓰고 싹 사라졌어요~{' '}\r\n                    </p>\r\n                    <div className=\"scroll_wrap\">\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_1_1.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_1_2.png\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"line bg_gray3 mg_t20\"></div>\r\n\r\n                    <p className=\"txt_12 txt_b mg_t20\">\r\n                        러빗88 / 유기농 면마스크\r\n                    </p>\r\n                    <img\r\n                        className=\"mg_t6\"\r\n                        style={{\r\n                            height: '16px',\r\n                            width: 'auto',\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                        src=\"/images/product/star_5.png\"\r\n                    />\r\n                    <p\r\n                        className=\"txt_12 txt_gray2 mg_l10\"\r\n                        style={{\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                    >\r\n                        2020.08.15\r\n                    </p>\r\n\r\n                    <p className=\"mg_t20 txt_14\">\r\n                        마스크가 마감도 깔끔하고 끈도 튼튼해요~ 아무래도 아이가\r\n                        많이 어리다보니 물고 빨고 할게 뻔한데, 항균,\r\n                        무형광소재로 마들었다니 안심이 되더라구요. 무엇보다 좋은\r\n                        자재들을 사용한 마스크라 더욱 믿음이 갑니다 추천합니다^^\r\n                    </p>\r\n                    <div className=\"scroll_wrap\">\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_1.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_2.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_3.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_4.png\"\r\n                        />\r\n                    </div>\r\n                    <Box my=\"30px\" textAlign=\"center\">\r\n                        <Button\r\n                            className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                        >\r\n                            후기 767개 전체보기\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BenefitCompanyPage;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    Dialog,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { getGivingNameFromId, getNumberString } from '../Common/util';\r\nimport { BlockChainDataSet } from '../Giving/DataModel';\r\n\r\ntype PropsType = BlockChainDataSet & {\r\n    isMine: boolean;\r\n    floor: number;\r\n    donationId: number;\r\n};\r\n\r\ninterface InfoDialogProps {\r\n    open: boolean;\r\n    data: PropsType;\r\n    onClose: () => void;\r\n}\r\n\r\nconst InfoDialog: React.FC<InfoDialogProps> = (props: InfoDialogProps) => {\r\n    const { onClose, data, open } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Card>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography className=\"txt_20 txt_b txt_primaryBlue\">\r\n                            {data.name}님의 블록 정보\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent style={{ textAlign: 'center' }}>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            기부 카테고리:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {getGivingNameFromId(data.donationId)}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            기부 날짜:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.timeString}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Timestamp:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.timeStamp}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Hash:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.hash}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Previous Hash:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.previousHash}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Nonce:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.nonce}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Target:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.target}\r\n                        </Typography>\r\n                    </Box>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{ justifyContent: 'flex-end', paddingTop: 0 }}\r\n                >\r\n                    <Button\r\n                        onClick={onClose}\r\n                        disableRipple\r\n                        style={{ color: '#62C3EB' }}\r\n                    >\r\n                        확인\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst colorSet: any = {\r\n    201: '#58937E',\r\n    202: '#CC8A54',\r\n    203: '#997194',\r\n    204: '#517BB7',\r\n    205: '#B34646',\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    card: {\r\n        minHeight: '0 !important',\r\n    },\r\n}));\r\n\r\nconst BlockChainComponent: React.FC<PropsType> = (props: PropsType) => {\r\n    const cardBgColor = props.isMine ? colorSet[props.donationId] : 'white';\r\n    const mainColor = props.isMine ? 'white' : 'black';\r\n    const subColor = props.isMine ? 'rgb(234 234 234)' : '#747474';\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const onOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <InfoDialog open={open} onClose={onClose} data={props} />\r\n            <Card\r\n                style={{\r\n                    backgroundColor: cardBgColor,\r\n                    borderRadius: '0.5rem',\r\n                    minHeight: 0,\r\n                }}\r\n            >\r\n                <CardContent>\r\n                    <Box display=\"flex\">\r\n                        <Typography\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_16 txt_b txt_line`}\r\n                        >\r\n                            {props.floor}층\r\n                        </Typography>\r\n                        <Box flexGrow=\"1\" />\r\n                        <Typography\r\n                            onClick={onOpen}\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_16 txt_b txt_line`}\r\n                        >\r\n                            자세히{'>'}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box mt=\"5px\">\r\n                        <Typography\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_16 txt_b txt_line`}\r\n                        >\r\n                            {props.name}\r\n                        </Typography>\r\n                        &nbsp;\r\n                        <Typography\r\n                            style={{\r\n                                color: subColor,\r\n                            }}\r\n                            className={`txt_line`}\r\n                        >\r\n                            {props.timeString}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box>\r\n                        <Typography\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_20 txt_b`}\r\n                        >\r\n                            {getNumberString(props.donationAmount)}원\r\n                        </Typography>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BlockChainComponent;\r\n","import { atom } from 'recoil';\r\nimport {\r\n    BlockChainTotalSet,\r\n    GivingDataSet,\r\n    GivingResultInfo,\r\n} from '../component/Giving/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport const GivingSelectState = atom<GivingDataSet[]>({\r\n    key: 'GivingSelectState',\r\n    default: [],\r\n});\r\n\r\nexport const GivingAmountState = atom<number>({\r\n    key: 'GivingAmountState',\r\n    default: 0,\r\n});\r\n\r\nexport const GivingResultState = atom<GivingResultInfo>({\r\n    key: 'GivingResultState',\r\n    default: {\r\n        isLoaded: false,\r\n        donationRatioStatus: [],\r\n        memberDTOs: [],\r\n        totalDonationMoney: 0,\r\n    },\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const BlockChainState = atom<BlockChainTotalSet>({\r\n    key: 'BlockChainState',\r\n    default: {},\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n","import { Box, IconButton, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport { BlockChainTotalSet, ChainAPIRes } from '../component/Giving/DataModel';\r\nimport http from '../http';\r\nimport { BlockChainState } from '../recoil/Giving';\r\nimport { CHAIN_TYPE } from './BlockChainPage';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    iconButton: {\r\n        maxWidth: '5rem',\r\n        maxHeight: '5rem',\r\n    },\r\n    text: {\r\n        marginTop: '5px',\r\n    },\r\n}));\r\n\r\nconst BlockChainSelectPage: React.FC = () => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const setChainData = useSetRecoilState(BlockChainState);\r\n    const onClickChain = (data: CHAIN_TYPE) => {\r\n        history.push(`/blockchain/${data}`);\r\n    };\r\n\r\n    const goBackFunciton = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    useEffect(() => {\r\n        http.get('/api/blocks').then((res) => {\r\n            console.log(res.data);\r\n            const insertValue: BlockChainTotalSet = {};\r\n            res.data.forEach((eachData: ChainAPIRes) => {\r\n                const dataArr: string[] = eachData.data.split(';');\r\n                const givingTarget: number = Number(dataArr[3]).valueOf();\r\n                if (!insertValue[givingTarget]) {\r\n                    insertValue[givingTarget] = [];\r\n                }\r\n                console.log(dataArr);\r\n                insertValue[givingTarget].push({\r\n                    donationAmount: Number(dataArr[2]),\r\n                    givingTarget: dataArr[1],\r\n                    hash: eachData.hash,\r\n                    name: dataArr[0],\r\n                    nonce: eachData.nonce,\r\n                    previousHash: eachData.previousHash,\r\n                    target: eachData.target,\r\n                    targetDepth: eachData.targetDepth,\r\n                    timeStamp: eachData.timeStamp,\r\n                    timeString: dataArr[4],\r\n                });\r\n            });\r\n            console.log(insertValue);\r\n            setChainData(insertValue);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                isLast={false}\r\n                headerTitle={'실시간 기부 상황'}\r\n                onMoveClick={goBackFunciton}\r\n            />\r\n\r\n            <Box className=\"container\">\r\n                <Box mt=\"30px\">\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        실시간 기부를 확인할\r\n                    </Typography>\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        카테고리를 확인해 주세요.\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <Box display=\"flex\" flexDirection=\"column\" mt=\"24px\">\r\n                    <Box display=\"flex\">\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.ENV)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_environ.png\" />\r\n                            </IconButton>\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                친환경\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.ANIMAL)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_animal.png\" />\r\n                            </IconButton>\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                동물보호\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display=\"flex\" mt=\"15px\">\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.CHILD)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_children.png\" />\r\n                            </IconButton>\r\n\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                아동/노인 복지\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.DISABLE)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_disabled.png\" />\r\n                            </IconButton>\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                장애인 복지\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box margin=\"auto\" mt=\"14px\">\r\n                        <IconButton\r\n                            onClick={() => onClickChain(CHAIN_TYPE.RELEIF)}\r\n                            className={classes.iconButton}\r\n                        >\r\n                            <img src=\"/images/category_relief.png\" />\r\n                        </IconButton>\r\n                        <Typography\r\n                            className={`${classes.text} txt_16 txt_center`}\r\n                        >\r\n                            구호 물품\r\n                        </Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlockChainSelectPage;\r\n","import { Checkbox, FormControlLabel, makeStyles } from '@material-ui/core';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport React, { ChangeEvent } from 'react';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        '&:hover': {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    margin: {\r\n        marginLeft: '5px',\r\n    },\r\n    icon: {\r\n        color: '#62C3EB',\r\n        fontSize: '1.5rem',\r\n    },\r\n});\r\n\r\nexport interface CategoryDataInfo {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\ninterface SelectListProps {\r\n    standardData: CategoryDataInfo[];\r\n    selectData: CategoryDataInfo[];\r\n    onChange: (\r\n        data: CategoryDataInfo,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => void;\r\n}\r\n\r\nconst SelectList: React.FC<SelectListProps> = (props: SelectListProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {props.standardData.map((eachData) => {\r\n                return (\r\n                    <div\r\n                        key={eachData.id}\r\n                        className=\"box_div mg_t20 bg_wh height_80\"\r\n                    >\r\n                        <FormControlLabel\r\n                            style={{ display: 'flex' }}\r\n                            className=\"checkbox__label pd_t26 pd_l20\"\r\n                            control={\r\n                                <Checkbox\r\n                                    checkedIcon={\r\n                                        <CheckCircleOutlineIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    icon={\r\n                                        <RadioButtonUncheckedIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    color=\"primary\"\r\n                                    checked={\r\n                                        props.selectData.findIndex(\r\n                                            (select) =>\r\n                                                select.id === eachData.id\r\n                                        ) >= 0\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                        props.onChange(eachData, event);\r\n                                    }}\r\n                                />\r\n                            }\r\n                            classes={{ label: classes.margin }}\r\n                            label={eachData.name}\r\n                        />\r\n                    </div>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SelectList;\r\n","import {\r\n    AppBar,\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React, { PropsWithChildren } from 'react';\r\n\r\nexport interface SignUpCommon {\r\n    buttonDisable: boolean;\r\n    isLast?: boolean;\r\n    onMoveButtonClick: (move: number) => void;\r\n    onCustomizeNextClick?: () => void;\r\n}\r\n\r\nconst SignupCommonComponent: React.FC<PropsWithChildren<SignUpCommon>> = (\r\n    props: PropsWithChildren<SignUpCommon>\r\n) => {\r\n    return (\r\n        <>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar style={{ alignItems: 'center' }}>\r\n                    {!props.isLast && (\r\n                        <IconButton\r\n                            className=\"back_div\"\r\n                            disabled={props.isLast}\r\n                            onClick={() => props.onMoveButtonClick(-1)}\r\n                        >\r\n                            <KeyboardArrowLeft\r\n                                style={{\r\n                                    display: `${\r\n                                        props.isLast ? 'none' : 'block'\r\n                                    }`,\r\n                                }}\r\n                            />\r\n                        </IconButton>\r\n                    )}\r\n                    <Typography className=\"txt_24 txt_b\">\r\n                        혜택통 만들기\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className=\"glow_body\">\r\n                <Box mt=\"30px\">\r\n                    <div className=\"container\" style={{ height: '100%' }}>\r\n                        {props.children}\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <Button\r\n                disableRipple={props.buttonDisable}\r\n                disabled={props.buttonDisable}\r\n                className={`btn_bottom ${\r\n                    props.buttonDisable ? 'bg_gray3' : 'bg_primaryblue'\r\n                }`}\r\n                onClick={() => {\r\n                    props.onCustomizeNextClick\r\n                        ? props.onCustomizeNextClick()\r\n                        : props.onMoveButtonClick(1);\r\n                }}\r\n            >\r\n                <p className=\"p_btn_bottom txt_wh txt_b\">\r\n                    {props.isLast ? '완료! 혜택 받으러 가기' : '다음'}\r\n                </p>\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignupCommonComponent;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    Dialog,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState, SignUpCategoryState } from '../../recoil/Session';\r\nimport { CategoryDataSet, CategoryStandInfo } from '../Category/DataModel';\r\nimport SelectList from '../Common/SelectList';\r\nimport { getCategoryNameFromId } from '../Common/util';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\ninterface SignupCategory {\r\n    benefitCategoryList: Array<{ userNickname: string; categoryId: number }>;\r\n}\r\n\r\ninterface ACDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst LIMIT = 2;\r\n\r\ntype ACCCategoryDialogProps = ACDialogProps & {\r\n    recommand: number[];\r\n    nickName: string;\r\n};\r\n\r\nconst ACCategoryDialog: React.FC<ACCCategoryDialogProps> = (\r\n    props: ACCCategoryDialogProps\r\n) => {\r\n    const { onClose, open, nickName, recommand } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    let str = '';\r\n\r\n    recommand.forEach((eachData: number, index) => {\r\n        str += getCategoryNameFromId(eachData);\r\n        str += recommand.length - 1 !== index ? ', ' : ' ';\r\n    });\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Card>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography className=\"txt_20 txt_b\">\r\n                            카테고리 추천\r\n                        </Typography>\r\n                    }\r\n                />\r\n\r\n                <CardContent>\r\n                    <Typography\r\n                        className=\"txt_14\"\r\n                        style={{ display: 'inline' }}\r\n                    >\r\n                        {nickName}님의 소비 패턴을 분석해보니\r\n                    </Typography>\r\n                    <Typography\r\n                        className=\"txt_14\"\r\n                        style={{ display: 'inline', color: '#62C3EB' }}\r\n                    >\r\n                        {str}\r\n                    </Typography>\r\n                    <Typography\r\n                        className=\"txt_14\"\r\n                        style={{ display: 'inline' }}\r\n                    >\r\n                        관련 소비가 많았어요! 해당 카테고리를 구독해보시는 것은\r\n                        어떨까요?\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{ justifyContent: 'flex-end', paddingTop: 0 }}\r\n                >\r\n                    <Button\r\n                        onClick={handleOk}\r\n                        disableRipple\r\n                        style={{ color: '#62C3EB' }}\r\n                    >\r\n                        확인 완료\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst ACOverDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { onClose, open } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <CardContent>\r\n                <Typography>2가지의 카테고리만 선택 할 수 있어요.</Typography>\r\n            </CardContent>\r\n            <CardActions style={{ justifyContent: 'flex-end', paddingTop: 0 }}>\r\n                <Button\r\n                    onClick={handleOk}\r\n                    disableRipple\r\n                    style={{ color: '#62C3EB' }}\r\n                >\r\n                    확인 완료\r\n                </Button>\r\n            </CardActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst SignupCategoryComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [category, setCategory] = useRecoilState<CategoryDataSet[]>(\r\n        SignUpCategoryState\r\n    );\r\n\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n\r\n    const [suggestDialog, setSuggestDialog] = useState<boolean>(false);\r\n    const [overDialog, setOverDialog] = useState<boolean>(false);\r\n\r\n    const [recommand, setRecommand] = useState<number[]>([]);\r\n    const buttonDisable = category.length !== 2;\r\n\r\n    useEffect(() => {\r\n        http.get(`/api/members/${userInfo.nickname}/category/recommend`).then(\r\n            (res) => {\r\n                const recommand = res.data.data.map((eachData: any) => {\r\n                    return eachData.categoryId;\r\n                });\r\n                setRecommand(recommand);\r\n                setSuggestDialog(true);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(userInfo);\r\n    const selectData = (\r\n        data: CategoryDataSet,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        if (event.currentTarget.checked) {\r\n            if (category.length < LIMIT) {\r\n                setCategory([...category, data]);\r\n            } else {\r\n                setOverDialog(true);\r\n            }\r\n        } else {\r\n            setCategory(category.filter((item) => data !== item));\r\n        }\r\n    };\r\n\r\n    const onNextClick = (next: number) => {\r\n        const data: SignupCategory = {\r\n            benefitCategoryList: [],\r\n        };\r\n\r\n        category.forEach((eachData) => {\r\n            data.benefitCategoryList.push({\r\n                categoryId: eachData.id,\r\n                userNickname: userInfo.nickname,\r\n            });\r\n        });\r\n        http.post(`/api/members/category`, category).then((res) => {\r\n            console.log(res);\r\n            props.onMoveButtonClick(next);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <ACCategoryDialog\r\n                nickName={userInfo.nickname}\r\n                recommand={recommand}\r\n                open={suggestDialog}\r\n                onClose={() => {\r\n                    setSuggestDialog(false);\r\n                }}\r\n            />\r\n            <ACOverDialog\r\n                open={overDialog}\r\n                onClose={() => {\r\n                    setOverDialog(false);\r\n                }}\r\n            />\r\n            <SignupCommonComponent\r\n                isLast={true}\r\n                buttonDisable={buttonDisable}\r\n                onMoveButtonClick={onNextClick}\r\n            >\r\n                <p className=\"txt_20\">관심있는 카테고리 2가지를 골라</p>\r\n                <p className=\"txt_20 txt_b\">집중 혜택 받으세요.</p>\r\n\r\n                <SelectList\r\n                    selectData={category}\r\n                    standardData={CategoryStandInfo}\r\n                    onChange={selectData}\r\n                />\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupCategoryComponent;\r\n","import { Box } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\nconst SignupFinishComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <SignupCommonComponent\r\n                isLast={true}\r\n                buttonDisable={false}\r\n                onMoveButtonClick={() => props.onMoveButtonClick(1)}\r\n            >\r\n                <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n                    <Box mt=\"25px\" />\r\n                    <p className=\"txt_20 txt_b\">축하합니다!</p>\r\n                    <p className=\"txt_20\">혜택통이 만들어졌어요!</p>\r\n                    <p className=\"txt_20\">이제 착한 소비하고</p>\r\n                    <p className=\"txt_20\">혜택도 받으세요.</p>\r\n                    <Box flexGrow=\"1\" />\r\n                    <p className=\"txt_center\">\r\n                        <img\r\n                            className=\"img_rending\"\r\n                            src=\"/images/rending_1.png\"\r\n                        />\r\n                    </p>\r\n                    <Box mb=\"45px\" />\r\n                </Box>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupFinishComponent;\r\n","import React, { useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport SignupCategoryComponent from '../component/Signup/SignupCategoryComponent';\r\nimport SignupFinishComponent from '../component/Signup/SignupFinishComponent';\r\n\r\nconst CategoryPage: React.FC = () => {\r\n    const sliderRef = useRef<Slider>(null);\r\n    const history = useHistory();\r\n    const [currentIndex, setIndex] = useState(0);\r\n\r\n    const onMove = async (index: number, move: number) => {\r\n        if (index + move < 0) {\r\n            return;\r\n        }\r\n        setIndex(index + move);\r\n        if (index + move >= 2) {\r\n            history.replace('/');\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {currentIndex === 0 ? (\r\n                <SignupCategoryComponent\r\n                    key={0}\r\n                    onMoveButtonClick={(move: number) => {\r\n                        onMove(0, move);\r\n                    }}\r\n                />\r\n            ) : (\r\n                <SignupFinishComponent\r\n                    key={1}\r\n                    onMoveButtonClick={(move: number) => {\r\n                        onMove(1, move);\r\n                    }}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CategoryPage;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    Dialog,\r\n    IconButton,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\ninterface ACDialogProps {\r\n    open: boolean;\r\n    fingerClick: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\nconst FingerDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { onClose, open, fingerClick } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Card>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography className=\"txt_20 txt_b\">\r\n                            지문등록\r\n                        </Typography>\r\n                    }\r\n                    subheader={\r\n                        <Typography className=\"txt_14\">\r\n                            더욱 쉽고 빠른 로그인을 위해 지문을 등록해 주세요.\r\n                        </Typography>\r\n                    }\r\n                />\r\n            </Card>\r\n            <CardContent style={{ textAlign: 'center' }}>\r\n                <IconButton onClick={fingerClick}>\r\n                    <img src=\"/images/Fingerprint_Color.png\" />\r\n                </IconButton>\r\n                <Typography className=\"txt_14\">센서에 지문인식</Typography>\r\n            </CardContent>\r\n            <CardActions style={{ justifyContent: 'flex-end', paddingTop: 0 }}>\r\n                <Button\r\n                    onClick={onClose}\r\n                    disableRipple\r\n                    style={{ color: '#62C3EB' }}\r\n                >\r\n                    취소\r\n                </Button>\r\n            </CardActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default FingerDialog;\r\n","import { Box, Button, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport HeaderAction from '../Common/HeaderAction';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport interface GivingCommonProps {\r\n    headerTitle: string;\r\n    isLast: boolean;\r\n    buttonTitle: string;\r\n    buttonDisable?: boolean;\r\n    onMoveClick: (offset: number) => void;\r\n}\r\n\r\ntype GivingCommonType = React.PropsWithChildren<GivingCommonProps>;\r\n\r\nconst GivingCommon: React.FC<GivingCommonType> = (props: GivingCommonType) => {\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\" width=\"100%\">\r\n            <HeaderAction\r\n                isLast={props.isLast}\r\n                headerTitle={props.headerTitle}\r\n                onMoveClick={() => props.onMoveClick(-1)}\r\n            />\r\n            <div className=\"glow_body\">\r\n                <Box mt=\"30px\">\r\n                    <div className=\"container\" style={{ height: '100%' }}>\r\n                        {props.children}\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <Button\r\n                disableRipple={props.buttonDisable}\r\n                disabled={props.buttonDisable}\r\n                className={`btn_bottom ${\r\n                    props.buttonDisable ? 'bg_gray3' : 'bg_primaryblue'\r\n                }`}\r\n                onClick={() => props.onMoveClick(1)}\r\n            >\r\n                <p className=\"p_btn_bottom txt_wh txt_b\">{props.buttonTitle}</p>\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default GivingCommon;\r\n","import { Box, makeStyles, TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport { GivingAmountState, GivingSelectState } from '../../recoil/Giving';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport FingerDialog from '../Common/FingerDialog';\r\nimport { getNumberString } from '../Common/util';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    inputText: {\r\n        '&>div>input': {\r\n            textAlign: 'center',\r\n        },\r\n        '&>p': {\r\n            textAlign: 'center',\r\n        },\r\n    },\r\n}));\r\n\r\nconst isValid = (origin: number, max: number) => {\r\n    return 0 < origin && origin <= max;\r\n};\r\n\r\nconst GivingAmountComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const classes = useStyles();\r\n\r\n    const [givingAmount, setGivingAmount] = useRecoilState(GivingAmountState);\r\n    const givingSelect = useRecoilValue(GivingSelectState);\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n\r\n    const [open, setOpen] = useState<boolean>(false);\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setGivingAmount(Number(event.target.value));\r\n    };\r\n\r\n    const onClose = async () => {\r\n        await http.post(`/api/trading/donation`, {\r\n            userNickname: userInfo.nickname,\r\n            donationId: givingSelect[0].id,\r\n            donationPoint: givingAmount,\r\n        });\r\n        setOpen(false);\r\n        onMoveClick(index + 1);\r\n    };\r\n\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            buttonDisable={!isValid(givingAmount, userInfo.point)}\r\n            onMoveClick={(nextMove: number) => {\r\n                if (nextMove < 0) {\r\n                    onMoveClick(index + nextMove);\r\n                } else {\r\n                    setOpen(true);\r\n                }\r\n\r\n                // onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"다음\"\r\n        >\r\n            <FingerDialog fingerClick={onClose} open={open} onClose={onClose} />\r\n            <p className=\"txt_20\">기부하고 싶은</p>\r\n            <p className=\"txt_20 txt_b\">금액을 입력하세요.</p>\r\n            <Box mt=\"25px\">\r\n                <TextField\r\n                    classes={{\r\n                        root: classes.inputText,\r\n                    }}\r\n                    style={{\r\n                        width: '80%',\r\n                        marginLeft: '10%',\r\n                    }}\r\n                    helperText={`최대 ${getNumberString(\r\n                        userInfo.point\r\n                    )} 원 입금 가능`}\r\n                    onChange={onChange}\r\n                />\r\n            </Box>\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingAmountComponent;\r\n","import { CircularProgress, Grid } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst Loading: React.FC = () => {\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ height: '100%' }}\r\n        >\r\n            <CircularProgress\r\n                style={{\r\n                    height: '4rem',\r\n                    width: '4rem',\r\n                    color: '#62C3EB',\r\n                }}\r\n            />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Loading;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { COLOR_SET, DonationMember } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    text: {\r\n        display: 'inline-block',\r\n        maxWidth: '55px',\r\n        minWidth: '50px',\r\n        whiteSpace: 'nowrap',\r\n        textAlign: 'right',\r\n        overflow: 'hidden !important',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    money: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif\",\r\n        fontSize: '17px',\r\n    },\r\n}));\r\n\r\nconst MAX_SHOW_MEMBER = 8;\r\n\r\ninterface GivingComponentDonationMemberProps {\r\n    donationMember: DonationMember[];\r\n}\r\n\r\nconst getOrderMember = (donationMember: DonationMember[]) => {\r\n    return donationMember\r\n        .slice()\r\n        .sort((d1, d2) => {\r\n            return d2.point - d1.point;\r\n        })\r\n        .slice(0, MAX_SHOW_MEMBER);\r\n};\r\n\r\nconst getRage = (sortMemger: DonationMember[]): [number, number] => {\r\n    const maxValueLen = sortMemger[0].point;\r\n    const minValueLen = sortMemger[sortMemger.length - 1].point;\r\n\r\n    if (sortMemger.length >= 1) {\r\n        const max = maxValueLen * 1.1;\r\n        const min = minValueLen * 0.9;\r\n        return [min, max];\r\n    } else {\r\n        return [0, 0];\r\n    }\r\n};\r\n\r\nconst GivingComponentDonationMember: React.FC<GivingComponentDonationMemberProps> = ({\r\n    donationMember,\r\n}: GivingComponentDonationMemberProps) => {\r\n    const classes = useStyles();\r\n    const orderMember = getOrderMember(donationMember);\r\n    const [start, end] = getRage(orderMember);\r\n    return (\r\n        <Card\r\n            style={{\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_b txt_20\">\r\n                    지난 달 기부왕👍\r\n                </Typography>\r\n                <Box>\r\n                    <Grid>\r\n                        {orderMember.map((eachMember, index) => {\r\n                            return (\r\n                                <Box\r\n                                    display=\"flex\"\r\n                                    key={eachMember.nickname}\r\n                                    my=\"1.5rem\"\r\n                                >\r\n                                    <Box\r\n                                        width=\"1.5rem\"\r\n                                        height=\"2rem\"\r\n                                        position=\"relative\"\r\n                                    >\r\n                                        {index <= 2 && (\r\n                                            <img\r\n                                                src={`/images/ICON_ranking${\r\n                                                    index + 1\r\n                                                }.png`}\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                    <Box flexGrow=\"1\" ml=\"0.5rem\">\r\n                                        <Box\r\n                                            mt=\"0.3rem\"\r\n                                            height=\"40%\"\r\n                                            width={`${\r\n                                                (eachMember.point /\r\n                                                    (end - start)) *\r\n                                                100\r\n                                            }%`}\r\n                                            style={{\r\n                                                backgroundColor:\r\n                                                    COLOR_SET[\r\n                                                        index >= 5 ? 4 : index\r\n                                                    ],\r\n                                            }}\r\n                                        />\r\n                                        <Typography className={classes.money}>\r\n                                            {eachMember.point}원\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Typography className={classes.text}>\r\n                                        {eachMember.nickname}\r\n                                    </Typography>\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </Grid>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GivingComponentDonationMember;\r\n","import { Box, Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { getGivingNameFromId } from '../Common/util';\r\nimport { COLOR_SET, DonationCategory } from './DataModel';\r\n\r\ninterface GivingComponentDonationPieProps {\r\n    donationStatus: DonationCategory[];\r\n}\r\n\r\nconst GivingComponentDonationPie: React.FC<GivingComponentDonationPieProps> = ({\r\n    donationStatus,\r\n}: GivingComponentDonationPieProps) => {\r\n    const sortData = donationStatus\r\n        .filter((data) => data.totalDonationCount !== 0)\r\n        .sort((d1, d2) => {\r\n            return d2.totalDonationCount - d1.totalDonationCount;\r\n        });\r\n\r\n    const data = {\r\n        labels: new Array<string>(),\r\n        datasets: [\r\n            {\r\n                data: new Array<number>(),\r\n                backgroundColor: new Array<string>(),\r\n                borderColor: new Array<string>(),\r\n            },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        maintainAspectRatio: false,\r\n        responsive: false,\r\n        plugins: {\r\n            legend: {\r\n                position: 'right',\r\n                labels: {\r\n                    fontSize: 12,\r\n                    boxWidth: 12,\r\n                    usePointStyle: true,\r\n                },\r\n                onClick: null,\r\n            },\r\n        },\r\n        animation: {\r\n            duration: 0,\r\n        },\r\n    };\r\n\r\n    sortData.forEach((eachData, index) => {\r\n        data.labels.push(getGivingNameFromId(eachData.donationId));\r\n        data.datasets[0].data.push(eachData.totalDonationCount);\r\n        data.datasets[0].backgroundColor.push(COLOR_SET[index]);\r\n        data.datasets[0].borderColor.push('#00000000');\r\n    });\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_b txt_20\">기부 현황</Typography>\r\n                <Box mt=\"1rem\">\r\n                    <Pie\r\n                        width={250}\r\n                        height={160}\r\n                        options={options}\r\n                        type=\"pie\"\r\n                        data={data}\r\n                    />\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GivingComponentDonationPie;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { getNumberString } from '../Common/util';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '36px',\r\n        textAlign: 'center',\r\n    },\r\n    button: {\r\n        flexGrow: 1,\r\n        flexBasis: 0,\r\n        borderRadius: '0.5rem',\r\n        backgroundColor: '#3BAAD8',\r\n        color: 'white',\r\n    },\r\n}));\r\n\r\ninterface GivingComponentStatusProps {\r\n    money: number;\r\n}\r\n\r\nconst GivingComponentStatus: React.FC<GivingComponentStatusProps> = ({\r\n    money,\r\n}: GivingComponentStatusProps) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const onClick = () => {\r\n        history.push('/chain-select');\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_20\">이번달에 모인</Typography>\r\n                <Typography className=\"txt_b txt_20\">\r\n                    총 기부액이에요!\r\n                </Typography>\r\n                <Box mt=\"20px\">\r\n                    <Typography\r\n                        className={`txt_primaryBlue2 ${classes.moneyFont}`}\r\n                    >\r\n                        {getNumberString(money)}원\r\n                    </Typography>\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button onClick={onClick} className={classes.button}>\r\n                    실시간 기부 상황 보기\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GivingComponentStatus;\r\n","import { Box } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { GivingResultState } from '../../recoil/Giving';\r\nimport Loading from '../Common/Loading';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\nimport GivingComponentDonationMember from './GivingComponentDonationMember';\r\nimport GivingComponentDonationPie from './GivingComponentDonationPie';\r\nimport GivingComponentStatus from './GivingComponentStatus';\r\n\r\nconst GivingComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const [givingData, setGivingData] = useRecoilState(GivingResultState);\r\n\r\n    useEffect(() => {\r\n        http.get('/api/trading/donation/statistics').then((res) => {\r\n            setGivingData({\r\n                isLoaded: true,\r\n                ...res.data.data,\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"기부 동참하기\"\r\n        >\r\n            {givingData.isLoaded ? (\r\n                <>\r\n                    <Box mt=\"1rem\">\r\n                        <GivingComponentStatus\r\n                            money={givingData.totalDonationMoney}\r\n                        />\r\n                    </Box>\r\n                    <Box mt=\"1rem\">\r\n                        <GivingComponentDonationPie\r\n                            donationStatus={givingData.donationRatioStatus}\r\n                        />\r\n                    </Box>\r\n                    <Box my=\"1rem\">\r\n                        <GivingComponentDonationMember\r\n                            donationMember={givingData.memberDTOs}\r\n                        />\r\n                    </Box>\r\n                </>\r\n            ) : (\r\n                <Loading />\r\n            )}\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingComponent;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst GivingExplanComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"블록쌓기에 동참할래요!\"\r\n        >\r\n            <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n                <Box mt=\"25px\" />\r\n                <Typography className=\"txt_20\">우리핏 베네핏은</Typography>\r\n                <Typography className=\"txt_20 txt_b\">\r\n                    블록체인 기술로\r\n                </Typography>\r\n                <Typography className=\"txt_20 txt_b\">\r\n                    기부를 할 때마다 블록으로 만들어요.\r\n                </Typography>\r\n                <br />\r\n\r\n                <Typography className=\"txt_20\">\r\n                    함께 하나씩 블록을 쌓아\r\n                </Typography>\r\n                <Typography className=\"txt_20\">\r\n                    높은 빌딩을 만들어 기부하세요.\r\n                </Typography>\r\n\r\n                <Box flexGrow=\"1\" />\r\n                <p className=\"txt_center\">\r\n                    <img\r\n                        className=\"img_rending\"\r\n                        src=\"/images/blockchain_before.png\"\r\n                    />\r\n                </p>\r\n                <Box mb=\"45px\" />\r\n            </Box>\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingExplanComponent;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst GivingFinishComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={true}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"홈으로 이동\"\r\n        >\r\n            <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n                <Box mt=\"25px\" />\r\n                <Typography className=\"txt_20 txt_b\">\r\n                    기부 모금이 완료되었어요.\r\n                </Typography>\r\n                <Typography className=\"txt_20\">\r\n                    {userInfo.nickname}님의 나눔으로\r\n                </Typography>\r\n                <Typography className=\"txt_20\">\r\n                    세상이 한 층 더 밝아졌어요!\r\n                </Typography>\r\n                <br />\r\n                <Typography className=\"txt_20\">기부는 블록체인으로</Typography>\r\n                <Typography className=\"txt_20\">\r\n                    투명하게 공개진행됩니다.\r\n                </Typography>\r\n                <Box flexGrow=\"1\" />\r\n                <p className=\"txt_center\">\r\n                    <img\r\n                        className=\"img_rending\"\r\n                        src=\"/images/blockchain_after.png\"\r\n                    />\r\n                </p>\r\n                <Box mb=\"45px\" />\r\n            </Box>\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingFinishComponent;\r\n","import React, { ChangeEvent } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { GivingSelectState } from '../../recoil/Giving';\r\nimport SelectList from '../Common/SelectList';\r\nimport { CommonInterface, GivingDataSet, GivingStandInfo } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst GivingSelectComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const [givingData, setGivingData] = useRecoilState(GivingSelectState);\r\n\r\n    const onChange = (\r\n        data: GivingDataSet,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        console.log('Clicked');\r\n        if (event.currentTarget.checked) {\r\n            setGivingData([data]);\r\n        } else {\r\n            setGivingData([]);\r\n        }\r\n    };\r\n    console.log(givingData);\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            buttonDisable={givingData.length === 0}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"다음\"\r\n        >\r\n            <p className=\"txt_20\">관심있는 카테고리 하나를 골라</p>\r\n            <p className=\"txt_20 txt_b\">기부하세요.</p>\r\n            <SelectList\r\n                selectData={givingData}\r\n                standardData={GivingStandInfo}\r\n                onChange={onChange}\r\n            />\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingSelectComponent;\r\n","import React, { useRef } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport { useResetRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport GivingAmountComponent from '../component/Giving/GivingAmountComponent';\r\nimport GivingComponent from '../component/Giving/GivingComponent';\r\nimport GivingExplanComponent from '../component/Giving/GivingExplanComponent';\r\nimport GivingFinishComponent from '../component/Giving/GivingFinishComponent';\r\nimport GivingSelectComponent from '../component/Giving/GivingSelectComponent';\r\nimport { GivingAmountState, GivingSelectState } from '../recoil/Giving';\r\n\r\nconst GivingPage: React.FC = () => {\r\n    const sliderRef = useRef<Slider>(null);\r\n    const history = useHistory();\r\n    const resetSelect = useResetRecoilState(GivingSelectState);\r\n    const resetAmount = useResetRecoilState(GivingAmountState);\r\n\r\n    const onNextMove = (nextMove: number) => {\r\n        if (nextMove < 0) {\r\n            resetSelect();\r\n            resetAmount();\r\n            history.goBack();\r\n            return;\r\n        }\r\n\r\n        if (nextMove > 4) {\r\n            resetSelect();\r\n            resetAmount();\r\n            history.replace('/');\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(nextMove);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <Slider {...commonSlickSettings} ref={sliderRef}>\r\n                <GivingComponent index={0} onMoveClick={onNextMove} />\r\n                <GivingExplanComponent index={1} onMoveClick={onNextMove} />\r\n                <GivingSelectComponent index={2} onMoveClick={onNextMove} />\r\n                <GivingAmountComponent index={3} onMoveClick={onNextMove} />\r\n                <GivingFinishComponent index={4} onMoveClick={onNextMove} />\r\n            </Slider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GivingPage;\r\n","import { AppBar, Box, Toolbar, Typography } from '@material-ui/core';\r\nimport React, { PropsWithChildren } from 'react';\r\n\r\nexport interface HeaderDeafaultProps {\r\n    icon: JSX.Element;\r\n    title: string;\r\n}\r\n\r\ntype HeaderDefaultType = PropsWithChildren<HeaderDeafaultProps>;\r\n\r\nconst HeaderDeafault: React.FC<HeaderDefaultType> = (\r\n    props: HeaderDefaultType\r\n) => {\r\n    return (\r\n        <AppBar position=\"sticky\" style={{ backgroundColor: '#F1F4F7' }}>\r\n            <Toolbar>\r\n                {props.icon}\r\n                <Box ml=\"0.5rem\">\r\n                    <Typography\r\n                        style={{\r\n                            fontWeight: 'bold',\r\n                            fontSize: '1.3rem',\r\n                        }}\r\n                    >\r\n                        {props.title}\r\n                    </Typography>\r\n                </Box>\r\n            </Toolbar>\r\n            {props.children}\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default HeaderDeafault;\r\n","import { IconButton, makeStyles, Paper } from '@material-ui/core';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginRight: '5%',\r\n        marginLeft: '5%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    img: {\r\n        width: '1rem',\r\n        height: '1rem',\r\n        margin: '0.5rem',\r\n    },\r\n}));\r\n\r\nexport interface HomeBenefitInputTextProps {\r\n    inputText: string;\r\n    onChange: (value: string) => void;\r\n}\r\n\r\nconst HomeBenefitInputText: React.FC<HomeBenefitInputTextProps> = (\r\n    props: HomeBenefitInputTextProps\r\n) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper component=\"form\" className={classes.root}>\r\n            <img className={classes.img} src=\"/images/ICON_Search.png\" />\r\n            <InputBase\r\n                className={classes.input}\r\n                value={props.inputText}\r\n                onChange={(event) => {\r\n                    props.onChange(event.target.value);\r\n                }}\r\n                placeholder=\"기업이나 제품들을 검색하세요.\"\r\n                inputProps={{ 'aria-label': 'search google maps' }}\r\n            />\r\n            {props.inputText.length > 0 && (\r\n                <IconButton\r\n                    onClick={() => {\r\n                        props.onChange('');\r\n                    }}\r\n                >\r\n                    <img\r\n                        className={classes.img}\r\n                        src=\"/images/ICON_Close_Button.png\"\r\n                    />\r\n                </IconButton>\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitInputText;\r\n","import {\r\n    Card,\r\n    CardActionArea,\r\n    CardContent,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { BenefitCompany } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    commonHeart: {\r\n        fontSize: '0.8rem !important',\r\n        color: 'gray',\r\n    },\r\n    selectedHeart: {\r\n        color: 'red !important',\r\n    },\r\n}));\r\n\r\nconst HomBenefitCompany: React.FC<BenefitCompany> = (props: BenefitCompany) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    return (\r\n        <Card>\r\n            <CardActionArea\r\n                onClick={() => {\r\n                    history.push(\r\n                        `/benefit-company/${encodeURI(props.companyName)}`\r\n                    );\r\n                }}\r\n            >\r\n                <CardContent>\r\n                    <Grid container wrap=\"nowrap\">\r\n                        <Grid container>\r\n                            <Typography className=\"txt_b txt_20\">\r\n                                {props.companyName}\r\n                            </Typography>\r\n                            <Typography className=\"txt_14\">\r\n                                {props.description}\r\n                            </Typography>\r\n                            <Grid>\r\n                                {props.userLike ? (\r\n                                    <FavoriteIcon\r\n                                        className={`${classes.commonHeart} ${classes.selectedHeart}`}\r\n                                    />\r\n                                ) : (\r\n                                    <FavoriteBorderIcon\r\n                                        className={classes.commonHeart}\r\n                                    />\r\n                                )}\r\n                                <Typography\r\n                                    style={{\r\n                                        marginLeft: '0.4rem',\r\n                                        display: 'inline-block',\r\n                                    }}\r\n                                    className=\"txt_14 txt_gray1\"\r\n                                >\r\n                                    {props.totalLike}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid>\r\n                            <img\r\n                                src={props.thumbNailPath.replace(\r\n                                    /.jpg/gi,\r\n                                    '.png'\r\n                                )}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HomBenefitCompany;\r\n","import Box from '@material-ui/core/Box';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport {\r\n    BenefitFavoriteState,\r\n    BenefitStateCompany,\r\n} from '../../recoil/Benefit';\r\nimport { getCategoryNameFromId } from '../Common/util';\r\nimport { BenefitCompany } from './DataModel';\r\nimport HomBenefitCompany from './HomBenefitCompany';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        '&:first-child': {\r\n            marginTop: 0,\r\n        },\r\n    },\r\n}));\r\n\r\nexport interface HomeBenefitSearchListProps {\r\n    searchText: string;\r\n}\r\n\r\nconst HomeBenefitSearchList: React.FC<HomeBenefitSearchListProps> = ({\r\n    searchText,\r\n}: HomeBenefitSearchListProps) => {\r\n    const classes = useStyles();\r\n    const benefitCompany = useRecoilValue(BenefitStateCompany);\r\n    const benefitFavoriteCompany = useRecoilValue(BenefitFavoriteState);\r\n    const [renderValue, setRenderValue] = useState<\r\n        Omit<BenefitCompany, 'userLike'>[]\r\n    >();\r\n\r\n    useEffect(() => {\r\n        const filterData = benefitCompany.data.filter((eachData) => {\r\n            const categoryName = getCategoryNameFromId(eachData.categoryId);\r\n            console.log(\r\n                `Current Category Name ${categoryName} ${eachData.companyName} ${searchText}`\r\n            );\r\n            return (\r\n                categoryName.includes(searchText) ||\r\n                eachData.companyName.includes(searchText)\r\n            );\r\n        });\r\n        setRenderValue(filterData);\r\n    }, [searchText]);\r\n\r\n    return (\r\n        <>\r\n            {renderValue?.map((eachData) => {\r\n                return (\r\n                    <Box key={eachData.companyName} className={classes.root}>\r\n                        <HomBenefitCompany\r\n                            companyName={eachData.companyName}\r\n                            categoryId={eachData.categoryId}\r\n                            description={eachData.description}\r\n                            thumbNailPath={eachData.thumbNailPath}\r\n                            totalLike={eachData.totalLike}\r\n                            userLike={\r\n                                !!benefitFavoriteCompany[eachData.companyName]\r\n                            }\r\n                        />\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitSearchList;\r\n","import Box from '@material-ui/core/Box';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport {\r\n    BenefitFavoriteState,\r\n    BenefitStateCompany,\r\n} from '../../recoil/Benefit';\r\nimport { BenefitCompany } from './DataModel';\r\nimport HomBenefitCompany from './HomBenefitCompany';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        '&:first-child': {\r\n            marginTop: 0,\r\n        },\r\n    },\r\n}));\r\n\r\nexport interface HomeBenefitListProps {\r\n    categoryId: number;\r\n}\r\n\r\nconst HomeBenefitList: React.FC<HomeBenefitListProps> = (\r\n    props: HomeBenefitListProps\r\n) => {\r\n    const classes = useStyles();\r\n    const benefitCompany = useRecoilValue(BenefitStateCompany);\r\n    const benefitFavoriteCompany = useRecoilValue(BenefitFavoriteState);\r\n    const [renderValue, setRenderValue] = useState<\r\n        Omit<BenefitCompany, 'userLike'>[]\r\n    >();\r\n\r\n    useEffect(() => {\r\n        const filterData = benefitCompany.data.filter((eachData) => {\r\n            return eachData.categoryId === props.categoryId;\r\n        });\r\n        setRenderValue(filterData);\r\n    }, [benefitCompany.data]);\r\n\r\n    return (\r\n        <>\r\n            {renderValue?.map((eachData) => {\r\n                return (\r\n                    <Box key={eachData.companyName} className={classes.root}>\r\n                        <HomBenefitCompany\r\n                            companyName={eachData.companyName}\r\n                            categoryId={eachData.categoryId}\r\n                            description={eachData.description}\r\n                            thumbNailPath={eachData.thumbNailPath}\r\n                            totalLike={eachData.totalLike}\r\n                            userLike={\r\n                                !!benefitFavoriteCompany[eachData.companyName]\r\n                            }\r\n                        />\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitList;\r\n","import Box from '@material-ui/core/Box';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React, { useEffect, useRef } from 'react';\r\nimport Slider from 'react-slick';\r\nimport { CategoryStandInfo } from '../Category/DataModel';\r\nimport { commonSlickSettings } from '../Common';\r\nimport HomeBenefitList from './HomeBenefitList';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box style={{ backgroundColor: '#F1F4F7' }} p={3}>\r\n                {children}\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        backgroundColor: 'rgb(250, 251, 252)',\r\n    },\r\n}));\r\n\r\nexport interface HomeBenefitSliderProps {\r\n    pageIndex: number;\r\n}\r\n\r\nconst HomeBenefitSlider: React.FC<HomeBenefitSliderProps> = (\r\n    props: HomeBenefitSliderProps\r\n) => {\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        sliderRef.current && sliderRef.current.slickGoTo(props.pageIndex);\r\n    }, [props.pageIndex]);\r\n\r\n    const sliderRef = useRef<Slider>(null);\r\n    const override = commonSlickSettings;\r\n    override.speed = 100;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Slider {...override} ref={sliderRef}>\r\n                {CategoryStandInfo.map((eachData, index) => {\r\n                    return (\r\n                        <TabPanel\r\n                            key={props.pageIndex}\r\n                            value={props.pageIndex}\r\n                            index={index}\r\n                        >\r\n                            <HomeBenefitList categoryId={eachData.id} />\r\n                        </TabPanel>\r\n                    );\r\n                })}\r\n            </Slider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitSlider;\r\n","export enum SIGNUP_TYPE {\r\n    PROFILE,\r\n    ACCOUNT,\r\n    ADD_CATEGORY,\r\n    BILL_INFO,\r\n    PASSWORD,\r\n}\r\n\r\nexport interface SignupAccountInterface {\r\n    ACCT_KND: string;\r\n    ACNO: string;\r\n    ACT_STCD: string;\r\n    ADNT_RGS_YN: string;\r\n    CUCD: string;\r\n    FAXC_BAL: string;\r\n    NEW_DT: string;\r\n    PBOK_BAL: string;\r\n    PRD_NM: string;\r\n    PSKL_ACT_YN: string;\r\n    XPR_DT: string;\r\n}\r\n\r\nexport interface SignupProfileInterface {\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\nexport interface SignupComponentProps {\r\n    checkCurrent?: boolean;\r\n    onMoveButtonClick: (move: number) => void;\r\n}\r\n\r\nexport interface SignupProfileInfo {\r\n    realName: string;\r\n    nickName: string;\r\n    cellNumber: string;\r\n}\r\n\r\nexport const rendingData: Array<SignupProfileInterface> = [\r\n    {\r\n        title: '이름을 알려주세요.',\r\n        description: '이름',\r\n    },\r\n    {\r\n        title: '닉네임을 정해주세요.',\r\n        description: '닉네임',\r\n    },\r\n];\r\n","import { Box, Tab, Tabs } from '@material-ui/core';\r\nimport StorefrontIcon from '@material-ui/icons/Storefront';\r\nimport React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    BenefitFavoriteState,\r\n    BenefitStateCompany,\r\n} from '../../recoil/Benefit';\r\nimport { BenefitSearch, CurrentUserState } from '../../recoil/Session';\r\nimport { CategoryStandInfo } from '../Category/DataModel';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport { a11yProps } from '../Common/util';\r\nimport {\r\n    BenefitCompany,\r\n    BenefitCompanyRes,\r\n    BenefitFavoriteCompany,\r\n} from './DataModel';\r\nimport HomeBenefitInputText from './HomeBenefitInputText';\r\nimport HomeBenefitSearchList from './HomeBenefitSearchList';\r\nimport HomeBenefitSlider from './HomeBenefitSlider';\r\n\r\nconst HomeBenefitComponent: React.FC = () => {\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n\r\n    const [searchText, setSearchText] = useRecoilState(BenefitSearch);\r\n    const [benefitCompany, setBenefitCompany] = useRecoilState(\r\n        BenefitStateCompany\r\n    );\r\n    const setFavoriteState = useSetRecoilState(BenefitFavoriteState);\r\n\r\n    useEffect(() => {\r\n        if (benefitCompany.isLoaded) {\r\n            return;\r\n        }\r\n\r\n        http.get(`/api/${encodeURI(userInfo.nickname)}/company`).then((res) => {\r\n            const isertArr: BenefitCompanyRes = {\r\n                isLoaded: true,\r\n                data: [],\r\n            };\r\n            const benefitData: BenefitFavoriteCompany = {};\r\n            res.data.data.forEach((eachData: BenefitCompany) => {\r\n                isertArr.data.push({\r\n                    categoryId: eachData.categoryId,\r\n                    companyName: eachData.companyName,\r\n                    description: eachData.description,\r\n                    thumbNailPath: eachData.thumbNailPath\r\n                        .replace(/\\/\\//gi, '/')\r\n                        .replace(/\\.[^/.]+$/, '.png'),\r\n                    totalLike: eachData.totalLike,\r\n                });\r\n                benefitData[eachData.companyName] = eachData.userLike;\r\n            });\r\n\r\n            setBenefitCompany(isertArr);\r\n            setTimeout(() => {\r\n                setFavoriteState(benefitData);\r\n            }, 100);\r\n        });\r\n    }, []);\r\n\r\n    const onChange = (value: string) => {\r\n        setSearchText(value);\r\n    };\r\n\r\n    const [page, setPage] = useState<number>(0);\r\n\r\n    const tabChange = (event: ChangeEvent<any>, nextValue: number) => {\r\n        setPage(nextValue);\r\n    };\r\n\r\n    const isSearchMode = searchText.length !== 0;\r\n\r\n    return (\r\n        <>\r\n            <HeaderDeafault icon={<StorefrontIcon />} title=\"혜택 찾기\">\r\n                <HomeBenefitInputText\r\n                    inputText={searchText}\r\n                    onChange={onChange}\r\n                />\r\n                {!isSearchMode && (\r\n                    <Tabs\r\n                        value={page}\r\n                        onChange={tabChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {CategoryStandInfo.map((eachData, index) => {\r\n                            return (\r\n                                <Tab\r\n                                    key={index}\r\n                                    label={eachData.name}\r\n                                    {...a11yProps(index)}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </Tabs>\r\n                )}\r\n            </HeaderDeafault>\r\n            {isSearchMode ? (\r\n                <Box p={3}>\r\n                    <HomeBenefitSearchList searchText={searchText} />\r\n                </Box>\r\n            ) : (\r\n                <HomeBenefitSlider pageIndex={page} />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitComponent;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { getCategoryImgPath, getCategoryNameFromId } from './util';\r\n\r\nexport interface CategoryIconProps {\r\n    id: number;\r\n}\r\n\r\nconst CategoryIcon: React.FC<CategoryIconProps> = (\r\n    props: CategoryIconProps\r\n) => {\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\">\r\n            <img\r\n                src={getCategoryImgPath(props.id)}\r\n                style={{ width: '3.5rem', height: '3.5rem', margin: 'auto' }}\r\n            />\r\n            <Typography style={{ textAlign: 'center' }}>\r\n                {getCategoryNameFromId(props.id)}\r\n            </Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CategoryIcon;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    CurrentUserCategoryState,\r\n    CurrentUserState,\r\n} from '../../recoil/Session';\r\nimport CategoryIcon from '../Common/CategoryIcon';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n        justifyContent: 'flex-end',\r\n    },\r\n}));\r\n\r\nconst HCPoint: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const [category, setCategory] = useRecoilState(CurrentUserCategoryState);\r\n\r\n    const onClick = () => {\r\n        console.log('Click');\r\n    };\r\n\r\n    useEffect(() => {\r\n        http.get(`/api/members/${encodeURI(userInfo.nickname)}/category`).then(\r\n            (res) => {\r\n                const resCategory = res.data.data.map(\r\n                    (eachData: any) => eachData.categoryId\r\n                );\r\n                setCategory(resCategory);\r\n            }\r\n        );\r\n    }, [userInfo]);\r\n\r\n    if (category.length === 0) {\r\n        return <></>;\r\n    }\r\n    console.log(category);\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardHeader\r\n                title={\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        내가 선택한 혜택\r\n                    </Typography>\r\n                }\r\n            />\r\n            <CardContent>\r\n                <Box display=\"flex\">\r\n                    {category.map((eachCategory: number) => {\r\n                        return (\r\n                            <Box key={eachCategory} margin=\"auto\">\r\n                                <CategoryIcon id={eachCategory} />\r\n                            </Box>\r\n                        );\r\n                    })}\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Typography onClick={onClick} variant=\"caption\">\r\n                    혜택을 바꾸고 싶나요?\r\n                </Typography>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HCPoint;\r\n","import { Box, Grid, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { getCategoryNameFromId, getNumberString } from '../Common/util';\r\nimport { TransactionSet } from './DataModel';\r\n\r\nexport interface BenefitListProps {\r\n    data: TransactionSet[];\r\n}\r\n\r\nconst extractDate = (date: string): string => {\r\n    const c = new Date(date);\r\n    const week = ['일', '월', '화', '수', '목', '금', '토'];\r\n\r\n    return `${c.getMonth()}월 ${c.getDate()} (${week[c.getDay()]})`;\r\n};\r\n\r\nconst BenefitList: React.FC<BenefitListProps> = ({\r\n    data,\r\n}: BenefitListProps) => {\r\n    return (\r\n        <>\r\n            {data.map((eachData, index, arr) => {\r\n                return (\r\n                    <Box key={index} mt={index === 0 ? '0px' : '5px'}>\r\n                        <Typography className={`txt_14`}>\r\n                            {extractDate(eachData.date)}\r\n                        </Typography>\r\n                        <Grid container style={{ marginTop: '5px' }}>\r\n                            <Grid>\r\n                                <Typography className={`txt_16`}>\r\n                                    {eachData.companyName}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Box flexGrow=\"1\" />\r\n\r\n                            <Grid style={{ textAlign: 'right' }}>\r\n                                <Typography className={`txt_16`}>\r\n                                    {getNumberString(eachData.totalBuyPrice)}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`txt_14 txt_primaryBlue2`}\r\n                                >{`${getCategoryNameFromId(\r\n                                    eachData.categoryId\r\n                                )} 적립 ${getNumberString(\r\n                                    eachData.point\r\n                                )}`}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {arr.length - 1 !== index && (\r\n                            <div className=\"line bg_gray3 mg_t20\" />\r\n                        )}\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BenefitList;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    CurrentUserCategoryState,\r\n    CurrentUserState,\r\n    CurrentUserTransactionState,\r\n} from '../../recoil/Session';\r\nimport BenefitList from './BenefitList';\r\nimport { TransactionSet } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst DISPLAY_COUNT = 3;\r\n\r\nconst HCPoint: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const userCategory = useRecoilValue(CurrentUserCategoryState);\r\n    const [transaction, setTransaction] = useRecoilState(\r\n        CurrentUserTransactionState\r\n    );\r\n    const [displaySet, setDisplaySet] = useState<TransactionSet[]>([]);\r\n\r\n    useEffect(() => {\r\n        http.get(`/api/trading/benefits/${encodeURI(userInfo.nickname)}`).then(\r\n            (res) => {\r\n                let data: TransactionSet[] = [];\r\n                data = res.data.data;\r\n                data = data.filter((eachData) => {\r\n                    return userCategory.includes(eachData.categoryId);\r\n                });\r\n                setDisplaySet(data.slice(0, DISPLAY_COUNT));\r\n                setTransaction(data);\r\n            }\r\n        );\r\n    }, [userCategory]);\r\n\r\n    if (displaySet.length === 0) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardHeader title={<Typography>혜택 적립 내역</Typography>} />\r\n            <CardContent>\r\n                <BenefitList data={displaySet} />\r\n            </CardContent>\r\n            {transaction.length > DISPLAY_COUNT && (\r\n                <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                    <Button\r\n                        className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                    >\r\n                        이용 내역 더 보기\r\n                    </Button>\r\n                </CardActions>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HCPoint;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { getNumberString } from '../Common/util';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    moneyFont: {\r\n        fontSize: '26px',\r\n        fontFamily: '\"Recursive\", sans-serif !important',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst HCStatus: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [userInfo, setUserInfo] = useRecoilState(CurrentUserState);\r\n    //const [account, setAccount] = useRecoilState(CurrentAccountState);\r\n\r\n    useEffect(() => {\r\n        if (userInfo.nickname) {\r\n            http.get(`/api/members/${encodeURI(userInfo.nickname)}`).then(\r\n                (res) => {\r\n                    setUserInfo({\r\n                        ...userInfo,\r\n                        accountMoney: res.data.data.accountMoney,\r\n                        point: res.data.data.point,\r\n                    });\r\n                }\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    const onGivingClick = () => {\r\n        history.push('/giving');\r\n    };\r\n\r\n    return (\r\n        <Card style={{ backgroundColor: '#62C3EB', borderRadius: '0.5rem' }}>\r\n            <CardContent>\r\n                <Typography className={classes.dfColor}>\r\n                    {`${userInfo.nickname}님의`}\r\n                    <br />\r\n                    혜택통 현황입니다.\r\n                </Typography>\r\n                <Typography\r\n                    className={`${classes.inline} ${classes.moneyFont} ${classes.dfColor}`}\r\n                >\r\n                    {getNumberString(userInfo.point)}\r\n                </Typography>\r\n                <Typography className={`${classes.inline} ${classes.dfColor}`}>\r\n                    원\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Button\r\n                    disabled={userInfo.point === 0}\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                >\r\n                    내 계좌로 인출\r\n                </Button>\r\n                <Button\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                    onClick={onGivingClick}\r\n                >\r\n                    기부하기\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HCStatus;\r\n","import { Box } from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport React from 'react';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport HCBenefit from './HCBenefit';\r\nimport HCPoint from './HCPoint';\r\nimport HCStatus from './HCStatus';\r\n\r\nconst HomeComponent: React.FC = () => {\r\n    return (\r\n        <>\r\n            <HeaderDeafault icon={<HomeIcon />} title=\"홈\" />\r\n            <Box mx=\"1rem\" overflow=\"hiddne\">\r\n                <Box mt=\"1rem\">\r\n                    <HCStatus />\r\n                </Box>\r\n                <Box mt=\"1rem\">\r\n                    <HCBenefit />\r\n                </Box>\r\n                <Box my=\"1rem\">\r\n                    <HCPoint />\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeComponent;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserCategoryState } from '../../recoil/Session';\r\nimport CategoryIcon from '../Common/CategoryIcon';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n        justifyContent: 'flex-end',\r\n    },\r\n}));\r\n\r\nconst SettingBenefit: React.FC = () => {\r\n    const classes = useStyles();\r\n    const category = useRecoilValue(CurrentUserCategoryState);\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardHeader\r\n                title={\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        내가 선택한 혜택\r\n                    </Typography>\r\n                }\r\n            />\r\n            <CardContent>\r\n                <Box display=\"flex\">\r\n                    {category.map((eachCategory: number) => {\r\n                        return (\r\n                            <Box key={eachCategory} margin=\"auto\">\r\n                                <CategoryIcon id={eachCategory} />\r\n                            </Box>\r\n                        );\r\n                    })}\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Button\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                >\r\n                    혜택 바꾸기\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SettingBenefit;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { getNumberString } from '../Common/util';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    moneyFont: {\r\n        fontFamily: '\"Recursive\", sans-serif !important',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst SettingStatus: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    //const [account, setAccount] = useRecoilState(CurrentAccountState);\r\n\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardContent>\r\n                <Typography className=\"txt_20 txt_b\">계좌정보</Typography>\r\n                <Typography className=\"txt_gray1 pd_t10\">\r\n                    {userInfo.accountNumber}\r\n                </Typography>\r\n                <Box textAlign=\"end\">\r\n                    <Typography className={`txt_16 ${classes.inline}`}>\r\n                        잔액\r\n                    </Typography>\r\n                    <Typography\r\n                        className={`txt_32 ${classes.inline} ${classes.moneyFont}`}\r\n                    >\r\n                        {getNumberString(userInfo.accountMoney)}\r\n                    </Typography>\r\n                    <Typography className={`${classes.inline} `}>원</Typography>\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Button\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                >\r\n                    계좌 변경\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SettingStatus;\r\n","import { Box, Divider, makeStyles, Typography } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport FeedbackIcon from '@material-ui/icons/Feedback';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport React from 'react';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport SettingBenefit from './SettingBenefit';\r\nimport SettingStatus from './SettingStatus';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    containerOuter: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        paddingTop: '13px',\r\n        paddingBottom: '13px',\r\n    },\r\n    iconSize: {\r\n        fontSize: '1.5rem !important',\r\n    },\r\n}));\r\n\r\nconst SettingComponent: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderDeafault icon={<SettingsIcon />} title=\"마이 페이지\" />\r\n            <Box mx=\"1rem\" overflow=\"hiddne\">\r\n                <Box mt=\"1rem\">\r\n                    <SettingStatus />\r\n                </Box>\r\n                <Box mt=\"1rem\">\r\n                    <SettingBenefit />\r\n                </Box>\r\n                <Box display=\"flex\" flexDirection=\"column\">\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <PersonIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                홈\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <CheckCircleIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                구독 관리\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <FeedbackIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                공지사항\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <EmailIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                문의하기\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SettingComponent;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport { FriendDataSetState } from '../../recoil/Together';\r\nimport { DUMMY_FRIEND_SET } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '24px',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst TCNoFriend: React.FC = () => {\r\n    const setFrined = useSetRecoilState(FriendDataSetState);\r\n    const history = useHistory();\r\n    const onAddFriend = (event: any) => {\r\n        setFrined(DUMMY_FRIEND_SET);\r\n        history.push('/add-friend');\r\n        event.preventDefault();\r\n        if (window && window.parent) {\r\n            //window.parent.postMessage('child;;;requestPhoneNumber', '*');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                border: 'solid',\r\n                borderWidth: '2px',\r\n                borderColor: '#62C3EB',\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_14\">\r\n                    투게더를 통해 친구들과 함께 혜택통을 즐길 수 있어요. 지금\r\n                    시작해볼까요?\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions style={{ justifyContent: 'flex-end' }}>\r\n                <Box mr=\"13px\">\r\n                    <Button\r\n                        onClick={onAddFriend}\r\n                        className=\"btn_blue txt_wh txt_14\"\r\n                    >\r\n                        시작\r\n                    </Button>\r\n                </Box>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TCNoFriend;\r\n","import { Box, CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nexport interface LoaderComponentProps {\r\n    color: string;\r\n}\r\n\r\nconst LoaderComponent: React.FC<LoaderComponentProps> = ({\r\n    color,\r\n}: LoaderComponentProps) => {\r\n    return (\r\n        <Box\r\n            height=\"124px\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n            <CircularProgress style={{ color: color }} />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default LoaderComponent;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { TogetherAVGState } from '../../recoil/Together';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '24px',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst TCRanking: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const avgInfo = useRecoilValue(TogetherAVGState);\r\n\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            {avgInfo.aveRank >= 0 ? (\r\n                <>\r\n                    <CardHeader\r\n                        title={\r\n                            <Box>\r\n                                <Typography\r\n                                    className={`txt_b txt_20 ${classes.inline}`}\r\n                                >\r\n                                    {`${userInfo.nickname}님 `}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`txt_16 ${classes.inline}`}\r\n                                >\r\n                                    의 혜택통 순위입니다.\r\n                                </Typography>\r\n                            </Box>\r\n                        }\r\n                    />\r\n                    <CardContent>\r\n                        <Box mt=\"30px\">\r\n                            <Grid container>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_center\">\r\n                                        나\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            상위\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            className={`${classes.moneyFont} txt_primaryBlue`}\r\n                                        >\r\n                                            {avgInfo.myRank}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            %\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_center\">\r\n                                        모든 사용자 평균\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            {'상위 '}\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            className={`${classes.moneyFont}`}\r\n                                        >\r\n                                            {avgInfo.aveRank}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            %\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </CardContent>\r\n                </>\r\n            ) : (\r\n                <LoaderComponent color=\"black\" />\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TCRanking;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\nimport { COLOR_SET } from '../Giving/DataModel';\r\nimport { RankingDataSet } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    text: {\r\n        display: 'inline-block',\r\n        maxWidth: '55px',\r\n        minWidth: '50px',\r\n        whiteSpace: 'nowrap',\r\n        textAlign: 'right',\r\n        overflow: 'hidden !important',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    money: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif\",\r\n        fontSize: '17px',\r\n    },\r\n}));\r\n\r\nconst MAX_SHOW_MEMBER = 8;\r\n\r\nconst getRage = (sortMemger: RankingDataSet[]): [number, number] => {\r\n    if (sortMemger.length >= 1) {\r\n        const maxValueLen = sortMemger[0].friendPoint;\r\n        const minValueLen = sortMemger[sortMemger.length - 1].friendPoint;\r\n\r\n        const max = maxValueLen * 1.1;\r\n        const min = minValueLen * 0.9;\r\n        return [min, max];\r\n    } else {\r\n        return [0, 0];\r\n    }\r\n};\r\n\r\nconst TCRankList: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const [titleStr, setTitleStr] = useState<string[]>([]);\r\n    const [rankList, setRankList] = useState<RankingDataSet[]>([]);\r\n    const [isLoad, setIsLoad] = useState<boolean>(false);\r\n    const [start, end] = getRage(rankList);\r\n    useEffect(() => {\r\n        http.get(`/api/rank/friends/${userInfo.nickname}`).then((res) => {\r\n            console.log(res);\r\n            const insertData: RankingDataSet[] = [];\r\n            res.data.data.forEach((eachData: RankingDataSet, index: number) => {\r\n                const isMy: boolean =\r\n                    eachData.friendNickname === userInfo.nickname;\r\n                insertData.push(\r\n                    isMy ? { ...eachData, friendNickname: '나' } : eachData\r\n                );\r\n                if (isMy) {\r\n                    if (index === 0) {\r\n                        setTitleStr([\r\n                            '대단한데요?',\r\n                            '친구들 중에서 1등이에요!',\r\n                        ]);\r\n                    } else if (index === 1) {\r\n                        setTitleStr([\r\n                            '와! 잘하고 있어요!',\r\n                            '1등을 향해 가즈아~',\r\n                        ]);\r\n                    } else if (index === 2) {\r\n                        setTitleStr([\r\n                            '열심히 하고 있군요!',\r\n                            '좀 더 노력해봐요~',\r\n                        ]);\r\n                    } else {\r\n                        setTitleStr([\r\n                            '아직 멀었네요.',\r\n                            '착한 소비를 시도해볼까요?',\r\n                        ]);\r\n                    }\r\n                }\r\n                console.log(eachData);\r\n            });\r\n            setIsLoad(true);\r\n            setRankList(insertData.slice(0, MAX_SHOW_MEMBER));\r\n        });\r\n    }, []);\r\n\r\n    const onClick = () => {\r\n        history.push('/add-friend');\r\n    };\r\n\r\n    if (!isLoad) {\r\n        return <LoaderComponent color=\"#62C3EB\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Box mt=\"30px\">\r\n                {titleStr.map((eachString, index) => {\r\n                    return (\r\n                        <Typography key={index} className=\"txt_b txt_20\">\r\n                            {eachString}\r\n                        </Typography>\r\n                    );\r\n                })}\r\n            </Box>\r\n\r\n            <Card\r\n                style={{\r\n                    borderRadius: '0.5rem',\r\n                    marginTop: '24px',\r\n                }}\r\n            >\r\n                <CardContent>\r\n                    <Box display=\"flex\" flexDirection=\"row\">\r\n                        <Box>\r\n                            <Typography className=\"txt_b txt_20 txt_line mg_r10\">\r\n                                친구\r\n                            </Typography>\r\n                            <Typography className=\"txt_16 txt_line\">\r\n                                {rankList.length}\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow={1} />\r\n                        <Box>\r\n                            <Button\r\n                                onClick={onClick}\r\n                                className=\"btn_blueBorder txt_14\"\r\n                            >\r\n                                추가\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box>\r\n                        <Grid>\r\n                            {rankList.map((eachData, index) => {\r\n                                return (\r\n                                    <Box\r\n                                        display=\"flex\"\r\n                                        key={eachData.friendNickname}\r\n                                        my=\"1.5rem\"\r\n                                    >\r\n                                        <Box\r\n                                            width=\"1.5rem\"\r\n                                            height=\"2rem\"\r\n                                            position=\"relative\"\r\n                                        >\r\n                                            {index <= 2 && (\r\n                                                <img\r\n                                                    src={`/images/ICON_ranking${\r\n                                                        index + 1\r\n                                                    }.png`}\r\n                                                />\r\n                                            )}\r\n                                        </Box>\r\n                                        <Box flexGrow=\"1\" ml=\"0.5rem\">\r\n                                            <Box\r\n                                                mt=\"0.3rem\"\r\n                                                height=\"40%\"\r\n                                                width={`${\r\n                                                    (eachData.friendPoint /\r\n                                                        (end - start)) *\r\n                                                    100\r\n                                                }%`}\r\n                                                style={{\r\n                                                    backgroundColor:\r\n                                                        COLOR_SET[\r\n                                                            index >= 5\r\n                                                                ? 4\r\n                                                                : index\r\n                                                        ],\r\n                                                }}\r\n                                            />\r\n                                            <Typography\r\n                                                className={classes.money}\r\n                                            >\r\n                                                {eachData.friendPoint}원\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        <Typography\r\n                                            className={`${classes.text} ${\r\n                                                eachData.friendNickname === '나'\r\n                                                    ? 'txt_primaryBlue'\r\n                                                    : ''\r\n                                            }`}\r\n                                        >\r\n                                            {eachData.friendNickname}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TCRankList;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { TogetherAVGState } from '../../recoil/Together';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '24px',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst TCStatus: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const avgInfo = useRecoilValue(TogetherAVGState);\r\n\r\n    return (\r\n        <Card style={{ backgroundColor: '#62C3EB', borderRadius: '0.5rem' }}>\r\n            {avgInfo.aveRank >= 0 ? (\r\n                <>\r\n                    <CardHeader\r\n                        title={\r\n                            <Box>\r\n                                <Typography\r\n                                    className={`txt_b txt_20 txt_wh ${classes.inline}`}\r\n                                >\r\n                                    {`${userInfo.nickname}님 `}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`txt_16 txt_wh ${classes.inline}`}\r\n                                >\r\n                                    이 받은 혜택\r\n                                </Typography>\r\n                            </Box>\r\n                        }\r\n                    />\r\n                    <CardContent>\r\n                        <Box mt=\"30px\">\r\n                            <Grid container>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_wh txt_center\">\r\n                                        이번 달\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography\r\n                                            className={`txt_wh ${classes.moneyFont}`}\r\n                                        >\r\n                                            {avgInfo.thisMonthBenefitPoint}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_wh txt_16 txt_line\">\r\n                                            원\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_wh txt_center\">\r\n                                        지난 3개월\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography\r\n                                            className={`txt_wh ${classes.moneyFont}`}\r\n                                        >\r\n                                            {avgInfo.ago3MonthBenefitPoint}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_wh txt_16 txt_line\">\r\n                                            원\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </CardContent>\r\n                </>\r\n            ) : (\r\n                <LoaderComponent color=\"white\" />\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TCStatus;\r\n","import { Box } from '@material-ui/core';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport React, { useEffect } from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { FriendDataSetState, TogetherAVGState } from '../../recoil/Together';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport TCNoFriend from './TCNoFriend';\r\nimport TCRanking from './TCRanking';\r\nimport TCRankList from './TCRankList';\r\nimport TCStatus from './TCStatus';\r\n\r\nconst TogetherComponent: React.FC = () => {\r\n    const friendList = useRecoilValue(FriendDataSetState);\r\n    const friendMode = friendList.length > 0;\r\n\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const setAVGInfo = useSetRecoilState(TogetherAVGState);\r\n\r\n    useEffect(() => {\r\n        if (userInfo.nickname) {\r\n            http.get(`/api/members/${userInfo.nickname}/together`).then(\r\n                (res) => {\r\n                    setAVGInfo(res.data.data);\r\n                    console.log(res);\r\n                }\r\n            );\r\n        }\r\n    }, [userInfo]);\r\n\r\n    return (\r\n        <>\r\n            <HeaderDeafault icon={<PeopleIcon />} title=\"투게더\" />\r\n            <Box mx=\"1rem\" overflow=\"hiddne\">\r\n                {friendMode && <TCRankList />}\r\n                <Box mt=\"1rem\">\r\n                    <TCStatus />\r\n                </Box>\r\n                <Box mt=\"1rem\">\r\n                    <TCRanking />\r\n                </Box>\r\n                {!friendMode && (\r\n                    <Box mt=\"1rem\">\r\n                        <TCNoFriend />\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TogetherComponent;\r\n","import { Box } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport HomeBenefitComponent from '../component/Benefit/HomeBenefitComponent';\r\nimport BottomBarNav, { DISPLAY_TYPE } from '../component/Common/BottomBar';\r\nimport HomeComponent from '../component/Home/HomeComponent';\r\nimport SettingComponent from '../component/Setting/SettingComponent';\r\nimport TogetherComponent from '../component/Together/TogetherComponent';\r\nimport { BottomNavState } from '../recoil/Session';\r\nconst homeRendering = (type: DISPLAY_TYPE) => {\r\n    switch (type) {\r\n        case DISPLAY_TYPE.HOME:\r\n            return <HomeComponent />;\r\n        case DISPLAY_TYPE.BENEFIT:\r\n            return <HomeBenefitComponent />;\r\n        case DISPLAY_TYPE.TOGETHER:\r\n            return <TogetherComponent />;\r\n        case DISPLAY_TYPE.SETTING:\r\n            return <SettingComponent />;\r\n        default:\r\n            return <></>;\r\n    }\r\n};\r\n\r\nconst HomePage: React.FC = () => {\r\n    const [renderType, setCurrentRenderType] = useRecoilState(BottomNavState);\r\n\r\n    const onChange = (type: DISPLAY_TYPE) => {\r\n        setCurrentRenderType(type);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <Box className=\"glow_body\" overflow=\"hidden\">\r\n                {homeRendering(renderType)}\r\n            </Box>\r\n            <BottomBarNav current={renderType} onChange={onChange} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","export interface RenderComponentInterface {\r\n    title: { first: string; second: string };\r\n    description: string[];\r\n    highLight: string;\r\n    imgPath: string;\r\n}\r\n\r\nexport const rendingData: Array<RenderComponentInterface> = [\r\n    {\r\n        title: { first: '내맘대로', second: '혜택고르기!' },\r\n        description: ['정해진 틀에 맞춰서', '혜택받기는 싫어!'],\r\n        highLight: '내가 관심있는 카테고리 대로 혜택을!',\r\n        imgPath: '/images/rending_1.png',\r\n    },\r\n    {\r\n        title: { first: '나는 소비하면서', second: '사회까지 생각한다!' },\r\n        description: ['환경, 유기견, 소상공인', '저소득층, 동물보호...'],\r\n        highLight: '작은 소비 하나하나 모여 사회를 개선!',\r\n        imgPath: '/images/rending_2.png',\r\n    },\r\n    {\r\n        title: { first: '내가 이 골목 혜택왕!', second: '친구들과 혜택대결' },\r\n        description: ['누가 누가', '더 많이 혜택을 모았나?'],\r\n        highLight: '여기 모여라! 친구들끼리 혜택 대결!',\r\n        imgPath: '/images/rending_3.png',\r\n    },\r\n    {\r\n        title: { first: '혜택을 모아모아', second: '기부까지?!' },\r\n        description: [\r\n            '혜택받은 금액을 인출하거나',\r\n            '원하는 곳에 기부할 수 있지!',\r\n        ],\r\n        highLight: \"우리은행에서 '모인 기부액의 2배를' 기부!\",\r\n        imgPath: '/images/rending_4.png',\r\n    },\r\n];\r\n","import {\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { RenderComponentInterface } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    buttonOverride: {\r\n        position: 'absolute !important' as 'absolute',\r\n    },\r\n}));\r\n\r\ninterface RenderingPageProps {\r\n    data: RenderComponentInterface;\r\n    onMoveButtonClick: (move: number) => void;\r\n}\r\n\r\ntype PropsType = RenderingPageProps & {\r\n    isLast: boolean;\r\n    isFirst: boolean;\r\n};\r\n\r\nconst RendingComponent: React.FC<PropsType> = ({\r\n    data,\r\n    ...props\r\n}: PropsType) => {\r\n    const classes = useStyles();\r\n\r\n    const onNextClick = () => {\r\n        props.onMoveButtonClick(1);\r\n    };\r\n\r\n    const onBackClick = () => {\r\n        props.onMoveButtonClick(-1);\r\n    };\r\n\r\n    return (\r\n        <Box style={{ position: 'relative' }} width=\"100%\" height=\"100%\">\r\n            <Box mt=\"10px\">\r\n                <div className=\"container\" style={{ overflowX: 'visible' }}>\r\n                    <IconButton\r\n                        className={`back_div ${props.isFirst && 'hide'}`}\r\n                        onClick={onBackClick}\r\n                    >\r\n                        <KeyboardArrowLeft />\r\n                    </IconButton>\r\n                </div>\r\n            </Box>\r\n\r\n            <div>\r\n                <p className=\"rd_posi_1 txt_30\">{data.title.first}</p>\r\n                <p className=\"rd_posi_2 txt_30 txt_b\">{data.title.second}</p>\r\n\r\n                <p className=\"rd_posi_3 txt_18\">\r\n                    {data.description[0]}\r\n                    <br />\r\n                    {data.description[1]}\r\n                </p>\r\n                <div\r\n                    className=\"txt_back_highlight\"\r\n                    style={{ width: '276px' }}\r\n                />\r\n                <p className=\"rd_posi_4 txt_18 txt_b\">{data.highLight}</p>\r\n            </div>\r\n            <div className=\"pd_b30 rd_posi_img\" style={{ left: '5%' }}>\r\n                <p className=\"txt_center\">\r\n                    <img className=\"img_rending\" src={data.imgPath} />\r\n                </p>\r\n            </div>\r\n            <Button\r\n                className={`btn_bottom bg_primaryblue ${classes.buttonOverride}`}\r\n                onClick={onNextClick}\r\n            >\r\n                <Typography className={`p_btn_bottom txt_wh txt_b`}>\r\n                    {props.isLast ? '시작하기' : '다음'}\r\n                </Typography>\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default RendingComponent;\r\n","import { Button, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    imgContainer: {\r\n        width: '100px',\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        width: '100%',\r\n    },\r\n    bodyReplace: {\r\n        zIndex: -1,\r\n        position: 'fixed',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n}));\r\n\r\nconst SigninPage: React.FC = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const onClickSignup = () => {\r\n        history.push('/signup');\r\n    };\r\n\r\n    const postMessage = (event: any) => {\r\n        event.preventDefault();\r\n        console.log(`Post Message Called`);\r\n        if (window && window.parent) {\r\n            console.log(`Post Send`);\r\n            window.parent.postMessage('child;;;requestPhoneNumber', '*');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={`bg_primaryblue ${classes.bodyReplace}`} />\r\n            <div className=\"container\">\r\n                <div className=\"div_rd_txt pd_t60\">\r\n                    <p className=\"txt_center\">\r\n                        <img\r\n                            style={{ width: '100px' }}\r\n                            className={`pd_t130 ${classes.imgContainer}`}\r\n                            src=\"images/Logo.png\"\r\n                        />\r\n                    </p>\r\n                    <p className=\"txt_24 txt_wh txt_center\">환영합니다!</p>\r\n                </div>\r\n\r\n                <div className=\"login_btn\">\r\n                    <Button\r\n                        onClick={onClickSignup}\r\n                        className={classes.button}\r\n                        style={{ backgroundColor: 'white', height: '55px' }}\r\n                    >\r\n                        <p className=\"txt_primaryBlue txt_center txt_b\">\r\n                            혜택통 첫달 무료 체험하기\r\n                        </p>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={`mg_t10 ${classes.button}`}\r\n                        style={{ border: '1px solid white', height: '55px' }}\r\n                    >\r\n                        <p className=\"txt_wh txt_center\">기존 사용자 로그인</p>\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SigninPage;\r\n","import React, { useRef } from 'react';\r\nimport Slider from 'react-slick';\r\nimport { useRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport {\r\n    rendingData as MainRendingData,\r\n    rendingData,\r\n} from '../component/Rending/DataModel';\r\nimport RendingPage from '../component/Rending/RendingComponent';\r\nimport { IsSplashSkip } from '../recoil/Session';\r\nimport SigninPage from './SigninPage';\r\n\r\nconst MainPage: React.FC = () => {\r\n    const [isSplashSkip, setIsSplashSkip] = useRecoilState(IsSplashSkip);\r\n\r\n    const sliderRef = useRef<Slider>(null);\r\n\r\n    const onMoveButtonClick = (index: number, move: number) => {\r\n        if (index + move >= MainRendingData.length) {\r\n            setIsSplashSkip(true);\r\n        } else if (index + move === -1) {\r\n            return;\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isSplashSkip ? (\r\n                <SigninPage />\r\n            ) : (\r\n                <Slider {...commonSlickSettings} ref={sliderRef}>\r\n                    {rendingData.map((eachData, index, arr) => {\r\n                        return (\r\n                            <RendingPage\r\n                                key={eachData.title.first}\r\n                                data={eachData}\r\n                                isFirst={index === 0}\r\n                                isLast={arr.length - 1 === index}\r\n                                onMoveButtonClick={(move) =>\r\n                                    onMoveButtonClick(index, move)\r\n                                }\r\n                            />\r\n                        );\r\n                    })}\r\n                </Slider>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","import {\r\n    Box,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport React, { ChangeEvent } from 'react';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\nimport { getMoneyStr2Number, getNumberString } from '../Common/util';\r\nimport { SignupAccountInterface } from './DataModel';\r\n\r\nconst useStyles = makeStyles({\r\n    labelLayout: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: '100%',\r\n        paddingTop: 0,\r\n        marginLeft: '5px',\r\n    },\r\n    icon: {\r\n        color: '#62C3EB',\r\n        fontSize: '1.5rem',\r\n    },\r\n});\r\n\r\nconst AccountComponent: React.FC<SignupAccountInterface> = (\r\n    props: SignupAccountInterface\r\n) => {\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\">\r\n            <Grid>\r\n                <Typography>계좌번호: {props.ACNO}</Typography>\r\n            </Grid>\r\n            <Grid>\r\n                <Typography>\r\n                    잔액: {getNumberString(getMoneyStr2Number(props.PBOK_BAL))}\r\n                </Typography>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport interface SignupAccountListProps {\r\n    isLoaded: boolean;\r\n    originData: SignupAccountInterface[];\r\n    selectedData: SignupAccountInterface[];\r\n    onChange(\r\n        data: SignupAccountInterface,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ): void;\r\n}\r\n\r\nconst SignupAccountList: React.FC<SignupAccountListProps> = (\r\n    props: SignupAccountListProps\r\n) => {\r\n    const classes = useStyles();\r\n\r\n    if (!props.isLoaded) {\r\n        return <LoaderComponent color=\"#62C3EB\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.originData.map((eachData) => {\r\n                return (\r\n                    <div\r\n                        key={eachData.ACNO}\r\n                        className=\"box_div mg_t20 bg_wh height_80\"\r\n                    >\r\n                        <FormControlLabel\r\n                            style={{ display: 'flex' }}\r\n                            className=\"checkbox__label pd_l20\"\r\n                            control={\r\n                                <Checkbox\r\n                                    checkedIcon={\r\n                                        <CheckCircleOutlineIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    icon={\r\n                                        <RadioButtonUncheckedIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    color=\"primary\"\r\n                                    checked={\r\n                                        props.selectedData.findIndex(\r\n                                            (select) =>\r\n                                                select.ACNO === eachData.ACNO\r\n                                        ) >= 0\r\n                                    }\r\n                                    onChange={(event) =>\r\n                                        props.onChange(eachData, event)\r\n                                    }\r\n                                />\r\n                            }\r\n                            classes={{ root: classes.labelLayout }}\r\n                            label={<AccountComponent {...eachData} />}\r\n                        />\r\n                    </div>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignupAccountList;\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { SignUpAccInfoState, SignUpProfileState } from '../../recoil/Session';\r\nimport { getMoneyStr2Number } from '../Common/util';\r\nimport { SignupAccountInterface, SignupComponentProps } from './DataModel';\r\nimport SignupAccountList from './SignupAccountList';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\nconst SignupAccountComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const setAccount = useSetRecoilState(SignUpAccInfoState);\r\n    const signupInfo = useRecoilValue(SignUpProfileState);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    const [wooriAccountList, setWooriAccountList] = useState<\r\n        SignupAccountInterface[]\r\n    >([]);\r\n\r\n    const [selectAccount, setSelectAccount] = useState<\r\n        SignupAccountInterface[]\r\n    >([]);\r\n\r\n    useEffect(() => {\r\n        if (props.checkCurrent) {\r\n            let regex = /(\\d{3})(\\d{3})(\\d{4})/;\r\n            if (signupInfo.cellNumber.length === 11) {\r\n                regex = /(\\d{3})(\\d{4})(\\d{4})/;\r\n            }\r\n            const cellFormat = signupInfo.cellNumber.replace(regex, '$1-$2-$3');\r\n\r\n            http.get(\r\n                `/api/wooribank/userPhoneNumber/${encodeURI(\r\n                    cellFormat\r\n                )}/accounts`\r\n            ).then((res) => {\r\n                const data: SignupAccountInterface[] = (res.data.dataBody\r\n                    .GRID as SignupAccountInterface[]).filter((eachData) => {\r\n                    return eachData.ACCT_KND.toUpperCase() === 'P';\r\n                });\r\n                setWooriAccountList(data);\r\n            });\r\n            setIsLoaded(true);\r\n        }\r\n    }, [props.checkCurrent]);\r\n\r\n    const onChange = (\r\n        data: SignupAccountInterface,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        if (event.currentTarget.checked) {\r\n            setSelectAccount([data]);\r\n            setAccount({\r\n                accountNumber: data.ACNO,\r\n                accountMoney: getMoneyStr2Number(data.PBOK_BAL),\r\n            });\r\n        } else {\r\n            setSelectAccount([]);\r\n        }\r\n    };\r\n\r\n    console.log(selectAccount);\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <SignupCommonComponent\r\n                buttonDisable={selectAccount.length === 0}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n            >\r\n                <p className=\"txt_20\">보유 중인 우리은행 계좌 1개를</p>\r\n                <p className=\"txt_20 txt_b\">선택해주세요.</p>\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    구독료가 매월\r\n                </p>\r\n                &nbsp;\r\n                <p\r\n                    className=\"txt_18 txt_b txt_line\"\r\n                    style={{ color: '#3BAAD8' }}\r\n                >\r\n                    20일\r\n                </p>\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    에\r\n                </p>\r\n                &nbsp;\r\n                <p\r\n                    className=\"txt_18 txt_b txt_line\"\r\n                    style={{ color: '#3BAAD8' }}\r\n                >\r\n                    2,900원씩\r\n                </p>\r\n                <br />\r\n                &nbsp;\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    해당 계좌에서 빠질 예정입니다.\r\n                </p>\r\n                <br />\r\n                <br />\r\n                <p\r\n                    className=\"txt_18 txt_b txt_line\"\r\n                    style={{ color: '#3BAAD8' }}\r\n                >\r\n                    첫달 무료 이용 후\r\n                </p>\r\n                &nbsp;\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    언제든 해지하실 수 있어요!\r\n                </p>\r\n                <div className=\"box_div mg_t20\">\r\n                    <SignupAccountList\r\n                        isLoaded={isLoaded}\r\n                        onChange={onChange}\r\n                        originData={wooriAccountList}\r\n                        selectedData={selectAccount}\r\n                    />\r\n                </div>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupAccountComponent;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    Dialog,\r\n    Grid,\r\n    TextField,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { SignUpProfileState } from '../../recoil/Session';\r\nimport { makeNumberId } from '../Common/util';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\ninterface ACDialogProps {\r\n    open: boolean;\r\n    validNumber: string;\r\n    onClose: () => void;\r\n}\r\n\r\nconst ACDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { onClose, open, validNumber } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Card>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography className=\"txt_20 txt_b\">\r\n                            인증번호 확인\r\n                        </Typography>\r\n                    }\r\n                    subheader={\r\n                        <Typography className=\"txt_14\">\r\n                            인증번호 확인칸에 아래 번호를 입력하세요.\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent>\r\n                    <Typography\r\n                        className=\"txt_20 txt_b\"\r\n                        style={{ textAlign: 'center' }}\r\n                    >\r\n                        {validNumber}\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{ justifyContent: 'flex-end', paddingTop: 0 }}\r\n                >\r\n                    <Button\r\n                        onClick={handleOk}\r\n                        disableRipple\r\n                        style={{ color: '#62C3EB' }}\r\n                    >\r\n                        확인\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst SignupCellphoneComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [profile, setProfile] = useRecoilState(SignUpProfileState);\r\n\r\n    const [dialog, setDialog] = useState<boolean>(false);\r\n    const [complete, setComplete] = useState<boolean>(false);\r\n\r\n    const [inputValidStr, setInputValidStr] = useState<string>('');\r\n    const [validStr, setValidStr] = useState<string>('');\r\n\r\n    const completeClick = () => {\r\n        setComplete(true);\r\n        setDialog(true);\r\n    };\r\n\r\n    const onChangePhoneNumber = (data: string) => {\r\n        let onlyNums = data.replace(/[^0-9]/g, '');\r\n        if (onlyNums.length > 11) {\r\n            onlyNums = onlyNums.slice(0, 11);\r\n        }\r\n        setProfile({ ...profile, cellNumber: onlyNums });\r\n    };\r\n\r\n    const onCertButtonClick = () => {\r\n        setDialog(true);\r\n        setValidStr(makeNumberId(6));\r\n    };\r\n\r\n    const onVerifyButtonClick = () => {\r\n        if (inputValidStr === validStr) {\r\n            setComplete(true);\r\n            // props.onMoveButtonClick(1);\r\n        }\r\n    };\r\n\r\n    const certMode = validStr.length > 0;\r\n    const inValid =\r\n        profile.cellNumber.length < 10 || profile.cellNumber.length > 11;\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <ACDialog\r\n                validNumber={validStr}\r\n                open={dialog}\r\n                onClose={() => {\r\n                    setDialog(false);\r\n                }}\r\n            />\r\n            <SignupCommonComponent\r\n                buttonDisable={!complete}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n            >\r\n                <p className=\"txt_20 txt_b\">휴대폰번호를 입력하세요</p>\r\n                <Box\r\n                    className=\"bg_wh box_div mg_t20\"\r\n                    px=\"16px\"\r\n                    pt=\"20px\"\r\n                    pb=\"16px\"\r\n                >\r\n                    <Grid\r\n                        style={{ flexWrap: 'unset' }}\r\n                        container\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <TextField\r\n                            disabled={certMode || complete}\r\n                            error={inValid}\r\n                            helperText={\r\n                                inValid && '휴대전화 번호는 10~11 자리입니다'\r\n                            }\r\n                            value={profile.cellNumber}\r\n                            onChange={(event) => {\r\n                                onChangePhoneNumber(event.target.value);\r\n                            }}\r\n                            label={'휴대폰 번호'}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Box flexGrow={1} />\r\n                        <Button\r\n                            disabled={inValid || complete}\r\n                            className=\"btn_blueBorder\"\r\n                            style={{\r\n                                padding: 0,\r\n                            }}\r\n                            onClick={onCertButtonClick}\r\n                        >\r\n                            {certMode ? '재인증' : '입력'}\r\n                        </Button>\r\n                    </Grid>\r\n                </Box>\r\n\r\n                {certMode && (\r\n                    <>\r\n                        <p className=\"mg_t30 txt_14 txt_center\">\r\n                            팝업창에 떴던 인증번호를 아래에 입력해주세요\r\n                        </p>\r\n                        <Box\r\n                            className=\"box_div mg_t30 bg_wh\"\r\n                            px=\"16px\"\r\n                            pt=\"20px\"\r\n                            pb=\"16px\"\r\n                        >\r\n                            <Grid\r\n                                style={{ flexWrap: 'unset' }}\r\n                                container\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <TextField\r\n                                    disabled={complete}\r\n                                    error={inputValidStr !== validStr}\r\n                                    value={inputValidStr}\r\n                                    onChange={(event) => {\r\n                                        setInputValidStr(event.target.value);\r\n                                    }}\r\n                                    label={'인증번호 확인'}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <Box flexGrow={1} />\r\n                                <Button\r\n                                    disabled={complete}\r\n                                    className=\"btn_blueBorder\"\r\n                                    style={{\r\n                                        padding: 0,\r\n                                    }}\r\n                                    onClick={onVerifyButtonClick}\r\n                                >\r\n                                    완료\r\n                                </Button>\r\n                            </Grid>\r\n                        </Box>\r\n                    </>\r\n                )}\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupCellphoneComponent;\r\n\r\n//import { TextField } from '@material-ui/core';\r\n//import React, { useState } from 'react';\r\n//import { useRecoilState } from 'recoil';\r\n//import http from '../../http';\r\n//import { SignUpProfileState } from '../../recoil/Session';\r\n//import {\r\n//    SignupComponentProps,\r\n//    SignupProfileInfo,\r\n//    SignupProfileInterface,\r\n//} from './DataModel';\r\n//import SignupCommonComponent from './SignupCommon';\r\n//\r\n//type SignupProfileProps = SignupComponentProps & {\r\n//    data: SignupProfileInterface;\r\n//    index: number;\r\n//};\r\n//\r\n//const parseData = (data: SignupProfileInfo, index: number): string => {\r\n//    switch (index) {\r\n//        case 0:\r\n//            return data.realName;\r\n//        case 1:\r\n//            return data.nickName;\r\n//        case 2:\r\n//            return data.cellNumber;\r\n//    }\r\n//    return '';\r\n//};\r\n//\r\n//const SignupProfileComponent: React.FC<SignupProfileProps> = (\r\n//    props: SignupProfileProps\r\n//) => {\r\n//    const [profile, setProfile] = useRecoilState(SignUpProfileState);\r\n//    const value = parseData(profile, props.index);\r\n//    const buttonDisable = value === '';\r\n//    const [inValid, setInValid] = useState<boolean>(false);\r\n//    const [helperText, setHelperText] = useState<string>('');\r\n//\r\n//    const onChange = (index: number, data: string) => {\r\n//        switch (index) {\r\n//            case 0:\r\n//                setProfile({ ...profile, realName: data });\r\n//                break;\r\n//            case 1:\r\n//                if (data !== '') {\r\n//                    http.get(`/api/members/nicknameCheck/${data}`).then(\r\n//                        (res) => {\r\n//                            const alreadyExist: boolean = res.data.data;\r\n//                            if (alreadyExist !== inValid) {\r\n//                                setInValid(alreadyExist);\r\n//                                setHelperText('이미 존재하는 닉네임입니다.');\r\n//                            }\r\n//                        }\r\n//                    );\r\n//                }\r\n//                setProfile({ ...profile, nickName: data });\r\n//\r\n//                break;\r\n//            case 2:\r\n//                let onlyNums = data.replace(/[^0-9]/g, '');\r\n//                if (onlyNums.length > 11) {\r\n//                    onlyNums = onlyNums.slice(0, 11);\r\n//                }\r\n//                setProfile({ ...profile, cellNumber: onlyNums });\r\n//                if (onlyNums.length < 10 || onlyNums.length > 11) {\r\n//                    setInValid(true);\r\n//                    setHelperText('휴대전화 번호는 10~11 자리입니다');\r\n//                } else {\r\n//                    setInValid(false);\r\n//                }\r\n//                break;\r\n//        }\r\n//    };\r\n//\r\n//    return (\r\n//        <div className=\"bg_gray5\">\r\n//            <SignupCommonComponent\r\n//                buttonDisable={buttonDisable || inValid}\r\n//                onMoveButtonClick={props.onMoveButtonClick}\r\n//            >\r\n//                <p className=\"txt_20 txt_b\">{props.data.title}</p>\r\n//                <div className=\"box_div mg_t20 bg_wh\">\r\n//                    <div className=\"pd_t16 mg_l16\"></div>\r\n//                    <div className=\"pd_t4 mg_l16 pd_b16\">\r\n//                        <TextField\r\n//                            error={inValid}\r\n//                            helperText={inValid && helperText}\r\n//                            value={value}\r\n//                            onChange={(event) => {\r\n//                                onChange(props.index, event.target.value);\r\n//                            }}\r\n//                            label={props.data.description}\r\n//                            variant=\"outlined\"\r\n//                        />\r\n//                    </div>\r\n//                </div>\r\n//            </SignupCommonComponent>\r\n//        </div>\r\n//    );\r\n//};\r\n//\r\n//export default SignupProfileComponent;\r\n//\r\n","import { Box, IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilValue, useResetRecoilState, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    CurrentUserState,\r\n    SignUpAccInfoState,\r\n    SignUpCategoryState,\r\n    SignUpProfileState,\r\n    UserInfo,\r\n} from '../../recoil/Session';\r\nimport FingerDialog from '../Common/FingerDialog';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\ninterface SignupUserModel {\r\n    name: string;\r\n    nickname: string;\r\n    accountNumber: string;\r\n    accountMoney: string;\r\n    phoneNumber: string;\r\n    password: string;\r\n}\r\n\r\ninterface SignupCategory {\r\n    benefitCategoryList: Array<{ userNickname: string; categoryId: number }>;\r\n}\r\n\r\nconst SignupPasswordComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [password, setPassword] = useState<string>('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const setUserState = useSetRecoilState<UserInfo>(CurrentUserState);\r\n\r\n    const signupProfile = useRecoilValue(SignUpProfileState);\r\n    const accountInfo = useRecoilValue(SignUpAccInfoState);\r\n\r\n    const handleClickShowPassword = () => setShowPassword(!showPassword);\r\n    const handleMouseDownPassword = () => setShowPassword(!showPassword);\r\n\r\n    const resetProfile = useResetRecoilState(SignUpProfileState);\r\n    const resetAccNum = useResetRecoilState(SignUpAccInfoState);\r\n    const resetCategory = useResetRecoilState(SignUpCategoryState);\r\n\r\n    const [fingerDialog, setFingerDialog] = useState<boolean>(false);\r\n\r\n    const signupFunction = async () => {\r\n        const signupData: SignupUserModel = {\r\n            name: signupProfile.realName,\r\n            nickname: signupProfile.nickName,\r\n            phoneNumber: signupProfile.cellNumber,\r\n            accountNumber: accountInfo.accountNumber,\r\n            password: password,\r\n            accountMoney: accountInfo.accountMoney + '',\r\n        };\r\n        const signupCategory: SignupCategory = {\r\n            benefitCategoryList: [\r\n                {\r\n                    categoryId: 101,\r\n                    userNickname: signupProfile.nickName,\r\n                },\r\n                {\r\n                    categoryId: 102,\r\n                    userNickname: signupProfile.nickName,\r\n                },\r\n            ],\r\n        };\r\n\r\n        const createRes = await http.post('/api/members', signupData); // user 먼저 만들어져야함\r\n        console.log(createRes);\r\n        const registRes = await http.post(\r\n            '/api/members/category',\r\n            signupCategory\r\n        ); // user 먼저 만들어져야함\r\n        console.log(registRes);\r\n        const userRes = await http.get(\r\n            `/api/members/${encodeURI(signupProfile.nickName)}`\r\n        ); // user 먼저 만들어져야함\r\n        console.log(userRes.data.data);\r\n        const currentUser: UserInfo = userRes.data.data;\r\n        setUserState({\r\n            accountMoney: currentUser.accountMoney,\r\n            point: currentUser.point,\r\n            accountNumber: currentUser.accountNumber,\r\n            name: currentUser.name,\r\n            nickname: currentUser.nickname,\r\n            phoneNumber: currentUser.phoneNumber,\r\n        });\r\n        resetProfile();\r\n        resetAccNum();\r\n        resetCategory();\r\n\r\n        setFingerDialog(false);\r\n        props.onMoveButtonClick(1);\r\n    };\r\n\r\n    const fingerClick = async () => {\r\n        await signupFunction();\r\n    };\r\n\r\n    const fingerClose = () => {\r\n        setFingerDialog(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <FingerDialog\r\n                fingerClick={fingerClick}\r\n                open={fingerDialog}\r\n                onClose={fingerClose}\r\n            />\r\n            <SignupCommonComponent\r\n                buttonDisable={password === ''}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n                onCustomizeNextClick={() => {\r\n                    setFingerDialog(true);\r\n                }}\r\n            >\r\n                <p className=\"txt_20 txt_b\">앱 사용을 위한</p>\r\n                <p className=\"txt_20\">비밀번호를 설정해 주세요.</p>\r\n\r\n                <Box mt=\"25px\">\r\n                    <TextField\r\n                        style={{ width: '80%', marginLeft: '10%' }}\r\n                        label=\"Password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        autoComplete=\"current-password\"\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                        InputProps={{\r\n                            // <-- This is where the toggle button is added.\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        onMouseDown={handleMouseDownPassword}\r\n                                    >\r\n                                        {showPassword ? (\r\n                                            <Visibility\r\n                                                style={{ fontSize: '1.5rem' }}\r\n                                            />\r\n                                        ) : (\r\n                                            <VisibilityOff\r\n                                                style={{ fontSize: '1.5rem' }}\r\n                                            />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupPasswordComponent;\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { SignUpProfileState } from '../../recoil/Session';\r\nimport {\r\n    SignupComponentProps,\r\n    SignupProfileInfo,\r\n    SignupProfileInterface,\r\n} from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\ntype SignupProfileProps = SignupComponentProps & {\r\n    data: SignupProfileInterface;\r\n    index: number;\r\n};\r\n\r\nconst parseData = (data: SignupProfileInfo, index: number): string => {\r\n    switch (index) {\r\n        case 0:\r\n            return data.realName;\r\n        case 1:\r\n            return data.nickName;\r\n    }\r\n    return '';\r\n};\r\n\r\nconst SignupProfileComponent: React.FC<SignupProfileProps> = (\r\n    props: SignupProfileProps\r\n) => {\r\n    const [profile, setProfile] = useRecoilState(SignUpProfileState);\r\n    const value = parseData(profile, props.index);\r\n    const buttonDisable = value === '';\r\n    const [inValid, setInValid] = useState<boolean>(false);\r\n    const [helperText, setHelperText] = useState<string>('');\r\n\r\n    const onChange = (index: number, data: string) => {\r\n        switch (index) {\r\n            case 0:\r\n                setProfile({ ...profile, realName: data });\r\n                break;\r\n            case 1:\r\n                if (data !== '') {\r\n                    http.get(`/api/members/nicknameCheck/${data}`).then(\r\n                        (res) => {\r\n                            const alreadyExist: boolean = res.data.data;\r\n                            if (alreadyExist !== inValid) {\r\n                                setInValid(alreadyExist);\r\n                                setHelperText('이미 존재하는 닉네임입니다.');\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n                setProfile({ ...profile, nickName: data });\r\n\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <SignupCommonComponent\r\n                buttonDisable={buttonDisable || inValid}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n            >\r\n                <p className=\"txt_20 txt_b\">{props.data.title}</p>\r\n                <div className=\"box_div mg_t20 bg_wh\">\r\n                    <div className=\"pd_t16 mg_l16\"></div>\r\n                    <div className=\"pd_t4 mg_l16 pd_b16\">\r\n                        <TextField\r\n                            error={inValid}\r\n                            helperText={inValid && helperText}\r\n                            value={value}\r\n                            onChange={(event) => {\r\n                                onChange(props.index, event.target.value);\r\n                            }}\r\n                            label={props.data.description}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupProfileComponent;\r\n","import React, { useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport { useResetRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport {\r\n    rendingData,\r\n    SignupProfileInterface,\r\n} from '../component/Signup/DataModel';\r\nimport SignupAccountComponent from '../component/Signup/SignupAccountComponent';\r\nimport SignupCellphoneComponent from '../component/Signup/SignupCellphoneComponent';\r\nimport SignupPasswordComponent from '../component/Signup/SignupPasswordComponent';\r\nimport SignupProfileComponent from '../component/Signup/SignupProfileComponent';\r\nimport {\r\n    SignUpAccInfoState,\r\n    SignUpCategoryState,\r\n    SignUpProfileState,\r\n} from '../recoil/Session';\r\n\r\nconst SignupPage: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    const resetProfile = useResetRecoilState(SignUpProfileState);\r\n    const resetAccInfo = useResetRecoilState(SignUpAccInfoState);\r\n    const resetCategory = useResetRecoilState(SignUpCategoryState);\r\n    const sliderRef = useRef<Slider>(null);\r\n    const [index, setIndex] = useState<number>(0);\r\n\r\n    const items: Array<JSX.Element> = [];\r\n    rendingData.forEach((eachData: SignupProfileInterface, index: number) => {\r\n        items.push(\r\n            <SignupProfileComponent\r\n                key={index}\r\n                index={index}\r\n                data={eachData}\r\n                onMoveButtonClick={(move: number) => onMove(index, move)}\r\n            />\r\n        );\r\n    });\r\n\r\n    const onMove = async (index: number, move: number) => {\r\n        if (index + move < 0) {\r\n            resetProfile();\r\n            resetAccInfo();\r\n            resetCategory();\r\n            history.replace('/mainpage');\r\n            setIndex(0);\r\n            return;\r\n        }\r\n        setIndex(index + move);\r\n        if (index + move > 4) {\r\n            // 맨마지막 페이지\r\n            // setIsAccSeq(true); real Signup\r\n            history.replace('/category');\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Slider {...commonSlickSettings} ref={sliderRef}>\r\n            {items}\r\n            <SignupCellphoneComponent\r\n                key={2}\r\n                onMoveButtonClick={(move: number) => {\r\n                    onMove(2, move);\r\n                }}\r\n            />\r\n            <SignupAccountComponent\r\n                key={3}\r\n                checkCurrent={index === 3}\r\n                onMoveButtonClick={(move: number) => {\r\n                    onMove(3, move);\r\n                }}\r\n            />\r\n            <SignupPasswordComponent\r\n                key={4}\r\n                onMoveButtonClick={(move: number) => {\r\n                    onMove(4, move);\r\n                }}\r\n            />\r\n        </Slider>\r\n    );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport './basic.css';\r\nimport AuthRouteGuard from './component/AuthRouteGuard';\r\nimport { FriendDataSet } from './component/Together/DataModel';\r\nimport './overide.css';\r\nimport AddFriendPage from './page/AddFriendPage';\r\nimport BenefitCompanyPage from './page/BenefitCompanyPage';\r\nimport BlockChainPage from './page/BlockChainPage';\r\nimport BlockChainSelectPage from './page/BlockChainSelectPage';\r\nimport CategoryPage from './page/CategoryPage';\r\nimport GivingPage from './page/GivingPage';\r\nimport HomePage from './page/HomePage';\r\nimport MainPage from './page/MainPage';\r\nimport SignupPage from './page/SignupPage';\r\nimport { FriendDataSetState, TestFrienString } from './recoil/Together';\r\n\r\nconst App: React.FC = () => {\r\n    const setFrined = useSetRecoilState(FriendDataSetState);\r\n    const setFrinedTest = useSetRecoilState(TestFrienString);\r\n    useEffect(() => {\r\n        window.addEventListener(\r\n            'message',\r\n            (e) => {\r\n                console.log(e);\r\n                setFrinedTest(e.data);\r\n                const res = e.data.split(';;;');\r\n                if (res[0] === 'parent') {\r\n                    const dataStr: string = res[1] as string;\r\n                    const eachPersonStr = dataStr.split(';');\r\n                    const friendList: FriendDataSet[] = [];\r\n                    eachPersonStr.forEach((eachStr: string) => {\r\n                        const privateDataList: string[] = eachStr.split(':');\r\n                        friendList.push({\r\n                            name: privateDataList[0],\r\n                            displayname: privateDataList[1],\r\n                            cellphone: privateDataList[2],\r\n                        });\r\n                    });\r\n                    console.log(eachPersonStr);\r\n                    setFrined(friendList);\r\n                } else if (res[0] === 'child') {\r\n                    console.log('called by me');\r\n                }\r\n            },\r\n            false\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/mainpage\" component={MainPage} />\r\n                <Route exact path=\"/signup\" component={SignupPage} />\r\n                <Route exact path=\"/category\" component={CategoryPage} />\r\n                <AuthRouteGuard exact path=\"/\" component={HomePage} />\r\n                <AuthRouteGuard exact path=\"/giving\" component={GivingPage} />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/benefit-company/:name\"\r\n                    component={BenefitCompanyPage}\r\n                />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/add-friend\"\r\n                    component={AddFriendPage}\r\n                />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/chain-select\"\r\n                    component={BlockChainSelectPage}\r\n                />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/blockchain/:type\"\r\n                    component={BlockChainPage}\r\n                />\r\n\r\n                <Redirect from=\"*\" to=\"/mainpage\" />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    StylesProvider,\r\n    ThemeProvider,\r\n    unstable_createMuiStrictModeTheme,\r\n} from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nconst theme = unstable_createMuiStrictModeTheme();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <RecoilRoot>\r\n            <ThemeProvider theme={theme}>\r\n                <StylesProvider injectFirst>\r\n                    <App />\r\n                </StylesProvider>\r\n            </ThemeProvider>\r\n        </RecoilRoot>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}