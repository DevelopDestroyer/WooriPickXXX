{"version":3,"sources":["component/Signup/DataModel.ts","component/Common.ts","component/Rending/DataModel.ts","component/Rending/RendingComponent.tsx","recoil/index.ts","recoil/Session.ts","page/SigninPage.tsx","page/MainPage.tsx","component/Signup/SignupAccountComponent.tsx","component/Category/DataModel.ts","component/Signup/SignupCategoryComponent.tsx","http/index.ts","component/Signup/SignupProfileComponent.tsx","page/SignupPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SIGNUP_TYPE","commonSlickSettings","touchMove","dots","arrows","rendingData","title","first","second","description","highLight","imgPath","useStyles","makeStyles","buttonOverride","position","RendingComponent","data","props","classes","Box","style","width","height","className","overflowX","IconButton","isFirst","onClick","onMoveButtonClick","KeyboardArrowLeft","left","src","Button","Typography","persistAtom","recoilPersist","key","storage","localStorage","IsSplashSkip","atom","default","effects_UNSTABLE","SignUpProfileState","cellNumber","nickName","realName","SignUpAccNumState","SignUpCategoryState","imgContainer","button","display","bodyReplace","zIndex","SigninPage","history","useHistory","push","backgroundColor","border","MainPage","useRecoilState","isSplashSkip","setIsSplashSkip","sliderRef","useRef","ref","map","eachData","index","move","MainRendingData","length","current","slickGoTo","ACDialog","onClose","open","handleOk","Dialog","mt","mx","SignupAccountComponent","account","setAccount","useState","isCert","setIsCert","tokenStr","setTokenStr","dialog","setDialog","complete","setComplete","TextField","disabled","value","defaultValue","onChange","event","target","label","variant","textAlign","marginRight","placeholder","disableRipple","CategoryStandInfo","id","name","ACCategoryDialog","ACOverDialog","SignupCategoryComponent","category","setCategory","suggestDialog","setSuggestDialog","overDialog","setOverDialog","buttonDisable","eachCategory","FormControlLabel","control","Checkbox","color","checked","indexOf","currentTarget","filter","item","selectData","http","axios","create","baseURL","interceptors","request","use","config","console","log","error","Promise","reject","response","SignupProfileComponent","profile","setProfile","parseData","inValid","setInValid","helperText","get","then","res","alreadyExist","SignupPage","restRecoil","useResetRecoilState","items","forEach","onMove","replace","App","exact","path","component","from","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","theme","unstable_createMuiStrictModeTheme","ReactDOM","render","StrictMode","ThemeProvider","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.ede72cc3.chunk.js","sourcesContent":["export enum SIGNUP_TYPE {\r\n    PROFILE,\r\n    ACCOUNT,\r\n    ADD_CATEGORY,\r\n    BILL_INFO,\r\n    PASSWORD,\r\n}\r\n\r\nexport interface SignupProfileInterface {\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\nexport interface SignupComponentProps {\r\n    onMoveButtonClick: (move: number) => void;\r\n}\r\n\r\nexport interface SignupProfileInfo {\r\n    realName: string;\r\n    nickName: string;\r\n    cellNumber: string;\r\n}\r\n\r\nexport const rendingData: Array<SignupProfileInterface> = [\r\n    {\r\n        title: '이름을 알려주세요.',\r\n        description: '이름',\r\n    },\r\n    {\r\n        title: '닉네임을 정해주세요.',\r\n        description: '닉네임',\r\n    },\r\n    {\r\n        title: '휴대폰번호를 입력하세요.',\r\n        description: '휴대폰번호',\r\n    },\r\n];\r\n","import { Settings } from 'react-slick';\r\n\r\nexport const commonSlickSettings: Settings = {\r\n    touchMove: false,\r\n    dots: false,\r\n    arrows: false,\r\n};\r\n","export interface RenderComponentInterface {\r\n    title: { first: string; second: string };\r\n    description: string[];\r\n    highLight: string;\r\n    imgPath: string;\r\n}\r\n\r\nexport const rendingData: Array<RenderComponentInterface> = [\r\n    {\r\n        title: { first: '내맘대로', second: '혜택고르기!' },\r\n        description: ['정해진 틀에 맞춰서', '혜택받기는 싫어!'],\r\n        highLight: '내가 관심있는 카테고리 대로 혜택을!',\r\n        imgPath: '/images/rending_1.png',\r\n    },\r\n    {\r\n        title: { first: '나는 소비하면서', second: '사회까지 생각한다!' },\r\n        description: ['환경, 유기견, 소상공인', '저소득층, 동물보호...'],\r\n        highLight: '작은 소비 하나하나 모여 사회를 개선!',\r\n        imgPath: '/images/rending_2.png',\r\n    },\r\n    {\r\n        title: { first: '내가 이 골목 혜택왕!', second: '친구들과 혜택대결' },\r\n        description: ['누가 누가', '더 많이 혜택을 모았나?'],\r\n        highLight: '여기 모여라! 친구들끼리 혜택 대결!',\r\n        imgPath: '/images/rending_3.png',\r\n    },\r\n    {\r\n        title: { first: '혜택을 모아모아', second: '기부까지?!' },\r\n        description: [\r\n            '혜택받은 금액을 인출하거나',\r\n            '원하는 곳에 기부할 수 있지!',\r\n        ],\r\n        highLight: \"우리은행에서 '모인 기부액의 2배를' 기부!\",\r\n        imgPath: '/images/rending_4.png',\r\n    },\r\n];\r\n","import {\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { RenderComponentInterface } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    buttonOverride: {\r\n        position: 'absolute !important' as 'absolute',\r\n    },\r\n}));\r\n\r\ninterface RenderingPageProps {\r\n    data: RenderComponentInterface;\r\n    onMoveButtonClick: (move: number) => void;\r\n}\r\n\r\ntype PropsType = RenderingPageProps & { isFirst: boolean };\r\n\r\nconst RendingComponent: React.FC<PropsType> = ({\r\n    data,\r\n    ...props\r\n}: PropsType) => {\r\n    const classes = useStyles();\r\n\r\n    const onNextClick = () => {\r\n        props.onMoveButtonClick(1);\r\n    };\r\n\r\n    const onBackClick = () => {\r\n        props.onMoveButtonClick(-1);\r\n    };\r\n\r\n    return (\r\n        <Box style={{ position: 'relative' }} width=\"100%\" height=\"100%\">\r\n            <div className=\"container mg_t10\" style={{ overflowX: 'visible' }}>\r\n                <IconButton\r\n                    className={`back_div ${props.isFirst && 'hide'}`}\r\n                    onClick={onBackClick}\r\n                >\r\n                    <KeyboardArrowLeft />\r\n                </IconButton>\r\n            </div>\r\n            <div>\r\n                <p className=\"rd_posi_1 txt_30\">{data.title.first}</p>\r\n                <p className=\"rd_posi_2 txt_30 txt_b\">{data.title.second}</p>\r\n\r\n                <p className=\"rd_posi_3 txt_18\">\r\n                    {data.description[0]}\r\n                    <br />\r\n                    {data.description[1]}\r\n                </p>\r\n                <div\r\n                    className=\"txt_back_highlight\"\r\n                    style={{ width: '276px' }}\r\n                />\r\n                <p className=\"rd_posi_4 txt_18 txt_b\">{data.highLight}</p>\r\n            </div>\r\n            <div className=\"pd_b30 rd_posi_img\" style={{ left: '5%' }}>\r\n                <p className=\"txt_center\">\r\n                    <img className=\"img_rending\" src={data.imgPath} />\r\n                </p>\r\n            </div>\r\n            <Button\r\n                className={`btn_bottom bg_primaryblue ${classes.buttonOverride}`}\r\n                onClick={onNextClick}\r\n            >\r\n                <Typography className={`p_btn_bottom txt_wh txt_b`}>\r\n                    다음\r\n                </Typography>\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default RendingComponent;\r\n","import { recoilPersist } from 'recoil-persist'\r\n\r\nconst { persistAtom } = recoilPersist({\r\n    key: 'recoil-persist', // configuration stay the same too\r\n    storage: localStorage\r\n})\r\n\r\nexport {\r\n    persistAtom\r\n}","import { atom } from 'recoil';\r\nimport { CategoryDataSet } from '../component/Category/DataModel';\r\nimport { SignupProfileInfo } from '../component/Signup/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport const IsLoginState = atom<boolean>({\r\n    key: 'IsLoginState',\r\n    default: false,\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const IsSplashSkip = atom<boolean>({\r\n    key: 'IsSplashSkip',\r\n    default: false,\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const SignUpProfileState = atom<SignupProfileInfo>({\r\n    key: 'SignUpProfileState',\r\n    default: {\r\n        cellNumber: '',\r\n        nickName: '',\r\n        realName: '',\r\n    },\r\n});\r\n\r\nexport const SignUpAccNumState = atom<string>({\r\n    key: 'SignUpAccNumState',\r\n    default: '',\r\n});\r\n\r\nexport const SignUpCategoryState = atom<CategoryDataSet[]>({\r\n    key: 'SignUpCategoryState',\r\n    default: [],\r\n});\r\n","import { Button, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    imgContainer: {\r\n        width: '100px',\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        width: '100%',\r\n    },\r\n    bodyReplace: {\r\n        zIndex: -1,\r\n        position: 'fixed',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n}));\r\n\r\nconst SigninPage: React.FC = (props) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const onClickSignup = () => {\r\n        history.push('/signup');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={`bg_primaryblue ${classes.bodyReplace}`} />\r\n            <div className=\"container\">\r\n                <div className=\"div_rd_txt pd_t60\">\r\n                    <p className=\"txt_center\">\r\n                        <img\r\n                            style={{ width: '100px' }}\r\n                            className={`pd_t130 ${classes.imgContainer}`}\r\n                            src=\"images/Logo.png\"\r\n                        />\r\n                    </p>\r\n                    <p className=\"txt_24 txt_wh txt_center\">환영합니다!</p>\r\n                </div>\r\n\r\n                <div className=\"login_btn\">\r\n                    <Button\r\n                        onClick={onClickSignup}\r\n                        className={classes.button}\r\n                        style={{ backgroundColor: 'white', height: '55px' }}\r\n                    >\r\n                        <p className=\"txt_primaryBlue txt_center txt_b\">\r\n                            혜택통 첫달 무료 체험하기\r\n                        </p>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        className={`mg_t10 ${classes.button}`}\r\n                        style={{ border: '1px solid white', height: '55px' }}\r\n                    >\r\n                        <p className=\"txt_wh txt_center\">기존 사용자 로그인</p>\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SigninPage;\r\n","import React, { useRef } from 'react';\r\nimport Slider from 'react-slick';\r\nimport { useRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport {\r\n    rendingData as MainRendingData,\r\n    rendingData,\r\n} from '../component/Rending/DataModel';\r\nimport RendingPage from '../component/Rending/RendingComponent';\r\nimport { IsSplashSkip } from '../recoil/Session';\r\nimport SigninPage from './SigninPage';\r\n\r\nconst MainPage: React.FC = () => {\r\n    const [isSplashSkip, setIsSplashSkip] = useRecoilState(IsSplashSkip);\r\n\r\n    const sliderRef = useRef<Slider>(null);\r\n\r\n    const onMoveButtonClick = (index: number, move: number) => {\r\n        if (index + move >= MainRendingData.length) {\r\n            setIsSplashSkip(true);\r\n        } else if (index + move === -1) {\r\n            return;\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isSplashSkip ? (\r\n                <SigninPage />\r\n            ) : (\r\n                <Slider {...commonSlickSettings} ref={sliderRef}>\r\n                    {rendingData.map((eachData, index) => {\r\n                        return (\r\n                            <RendingPage\r\n                                key={eachData.title.first}\r\n                                data={eachData}\r\n                                isFirst={index === 0}\r\n                                onMoveButtonClick={(move) =>\r\n                                    onMoveButtonClick(index, move)\r\n                                }\r\n                            />\r\n                        );\r\n                    })}\r\n                </Slider>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Dialog,\r\n    IconButton,\r\n    TextField,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { SignUpAccNumState } from '../../recoil/Session';\r\nimport { SignupComponentProps } from './DataModel';\r\n\r\ninterface ACDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst ACDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { onClose, open } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Box mt=\"15px\" mx=\"15px\">\r\n                <Typography>계좌 인증이 확인 되었습니다.</Typography>\r\n            </Box>\r\n            <Box>\r\n                <Button onClick={handleOk} className=\"p_btn_bottom txt_b\">\r\n                    확인\r\n                </Button>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst SignupAccountComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [account, setAccount] = useRecoilState<string>(SignUpAccNumState);\r\n    const [isCert, setIsCert] = useState<boolean>(false);\r\n    const [tokenStr, setTokenStr] = useState<string>('');\r\n\r\n    const [dialog, setDialog] = useState<boolean>(false);\r\n    const [complete, setComplete] = useState<boolean>(false);\r\n\r\n    const completeClick = () => {\r\n        setComplete(true);\r\n        setDialog(true);\r\n    };\r\n\r\n    const onCertClick = () => {\r\n        setIsCert(!isCert);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <ACDialog\r\n                open={dialog}\r\n                onClose={() => {\r\n                    setDialog(false);\r\n                }}\r\n            />\r\n            <div className=\"toptitle_div bg_wh\">\r\n                <div className=\"container\">\r\n                    <IconButton\r\n                        className=\"back_div\"\r\n                        onClick={() => props.onMoveButtonClick(-1)}\r\n                    >\r\n                        <KeyboardArrowLeft />\r\n                    </IconButton>\r\n                    <p className=\"txt_24 txt_b mg_t10\">혜택통 만들기</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"glow_body\">\r\n                <div className=\"container mg_t30\">\r\n                    <p className=\"txt_20 txt_b\">\r\n                        본인의 우리은행 계좌번호를 알려주세요.\r\n                    </p>\r\n\r\n                    <div className=\"box_div mg_t20 bg_wh\">\r\n                        <table style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"pd_t16 mg_l16\">\r\n                                            <TextField\r\n                                                disabled={isCert || complete}\r\n                                                value={account}\r\n                                                defaultValue={account}\r\n                                                onChange={(event) => {\r\n                                                    setAccount(\r\n                                                        event.target.value\r\n                                                    );\r\n                                                }}\r\n                                                label=\"계좌번호\"\r\n                                                variant=\"outlined\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pd_t4 mg_l16 pd_b16\"></div>\r\n                                    </td>\r\n                                    <td style={{ textAlign: 'right' }}>\r\n                                        <div className=\"\">\r\n                                            <Button\r\n                                                disabled={\r\n                                                    account === '' || complete\r\n                                                }\r\n                                                className=\"btn_blueBorder\"\r\n                                                style={{ marginRight: '16px' }}\r\n                                                onClick={onCertClick}\r\n                                            >\r\n                                                {isCert ? '취소' : '1원 인증'}\r\n                                            </Button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                    <p className=\"mg_t30 txt_14 txt_center\">\r\n                        계좌 확인을 위해 계좌번호로 1원을 보낼게요\r\n                        <br />\r\n                        입금명을 확인해 주세요\r\n                    </p>\r\n\r\n                    <div className=\"box_div mg_t30 bg_wh\">\r\n                        <table style={{ width: '100%' }}>\r\n                            <tbody>\r\n                                <tr>\r\n                                    <td>\r\n                                        <div className=\"pd_t16 mg_l16\">\r\n                                            <TextField\r\n                                                disabled={!isCert || complete}\r\n                                                onChange={(event) => {\r\n                                                    setTokenStr(\r\n                                                        event.target.value\r\n                                                    );\r\n                                                }}\r\n                                                placeholder=\"혜택통 +\"\r\n                                                label=\"입금명을 입력해주세요\"\r\n                                                variant=\"outlined\"\r\n                                            />\r\n                                        </div>\r\n                                        <div className=\"pd_t4 mg_l16 pd_b16\"></div>\r\n                                    </td>\r\n                                    <td style={{ textAlign: 'right' }}>\r\n                                        <div className=\"\">\r\n                                            {isCert && (\r\n                                                <Button\r\n                                                    disabled={\r\n                                                        tokenStr === '' ||\r\n                                                        complete\r\n                                                    }\r\n                                                    className=\"btn_blueBorder\"\r\n                                                    style={{\r\n                                                        marginRight: '16px',\r\n                                                    }}\r\n                                                    onClick={completeClick}\r\n                                                >\r\n                                                    입력\r\n                                                </Button>\r\n                                            )}\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Button\r\n                disabled={!complete}\r\n                disableRipple={!complete}\r\n                className={`btn_bottom ${\r\n                    complete ? 'bg_primaryblue' : 'bg_gray3'\r\n                }`}\r\n                onClick={() => props.onMoveButtonClick(1)}\r\n            >\r\n                <p className=\"p_btn_bottom txt_wh txt_b\">다음</p>\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupAccountComponent;\r\n","export interface CategoryDataSet {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\nexport const CategoryStandInfo: CategoryDataSet[] = [\r\n    {\r\n        id: 101,\r\n        name: '저플라스틱',\r\n    },\r\n    {\r\n        id: 102,\r\n        name: '저탄소',\r\n    },\r\n    {\r\n        id: 103,\r\n        name: '동물실험반대',\r\n    },\r\n    {\r\n        id: 104,\r\n        name: '결식아동',\r\n    },\r\n    {\r\n        id: 105,\r\n        name: '노인보호',\r\n    },\r\n    {\r\n        id: 106,\r\n        name: '장애인 복지',\r\n    },\r\n    {\r\n        id: 107,\r\n        name: '장애인이 만든 제품',\r\n    },\r\n    {\r\n        id: 108,\r\n        name: '구호물품',\r\n    },\r\n];\r\n","import {\r\n    Box,\r\n    Button,\r\n    Checkbox,\r\n    Dialog,\r\n    FormControlLabel,\r\n    IconButton,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { SignUpCategoryState } from '../../recoil/Session';\r\nimport { CategoryDataSet, CategoryStandInfo } from '../Category/DataModel';\r\nimport { SignupComponentProps } from './DataModel';\r\n\r\ninterface ACDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst LIMIT = 2;\r\n\r\nconst ACCategoryDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { onClose, open } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Box mt=\"15px\" mx=\"15px\">\r\n                <Typography>니가원하는거슨 비건어쩌고저쩌고</Typography>\r\n            </Box>\r\n            <Box>\r\n                <Button onClick={handleOk} className=\"p_btn_bottom txt_b\">\r\n                    확인\r\n                </Button>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst ACOverDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { onClose, open } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Box mt=\"15px\" mx=\"15px\">\r\n                <Typography>딱 2가지만 선택해주세요</Typography>\r\n            </Box>\r\n            <Box>\r\n                <Button onClick={handleOk} className=\"p_btn_bottom txt_b\">\r\n                    확인\r\n                </Button>\r\n            </Box>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst SignupCategoryComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [category, setCategory] = useRecoilState<CategoryDataSet[]>(\r\n        SignUpCategoryState\r\n    );\r\n    const [suggestDialog, setSuggestDialog] = useState<boolean>(false);\r\n    const [overDialog, setOverDialog] = useState<boolean>(false);\r\n    const buttonDisable = category.length !== 2;\r\n\r\n    const selectData = (\r\n        data: CategoryDataSet,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        if (event.currentTarget.checked) {\r\n            if (category.length < LIMIT) {\r\n                setCategory([...category, data]);\r\n            } else {\r\n                setOverDialog(true);\r\n            }\r\n        } else {\r\n            setCategory(category.filter((item) => data !== item));\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <ACCategoryDialog\r\n                open={suggestDialog}\r\n                onClose={() => {\r\n                    setSuggestDialog(false);\r\n                }}\r\n            />\r\n            <ACOverDialog\r\n                open={overDialog}\r\n                onClose={() => {\r\n                    setOverDialog(false);\r\n                }}\r\n            />\r\n            <div className=\"toptitle_div bg_wh\">\r\n                <div className=\"container\">\r\n                    <IconButton\r\n                        className=\"back_div\"\r\n                        onClick={() => props.onMoveButtonClick(-1)}\r\n                    >\r\n                        <KeyboardArrowLeft />\r\n                    </IconButton>\r\n                    <p className=\"txt_24 txt_b mg_t10\">혜택통 만들기</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"glow_body\">\r\n                <div className=\"container mg_t30\">\r\n                    <p className=\"txt_20\">관심있는 카테고리 2가지를 골라</p>\r\n                    <p className=\"txt_20 txt_b\">집중 혜택 받으세요.</p>\r\n\r\n                    {CategoryStandInfo.map((eachCategory: CategoryDataSet) => {\r\n                        return (\r\n                            <div\r\n                                key={eachCategory.id}\r\n                                className=\"box_div mg_t20 bg_wh height_80\"\r\n                            >\r\n                                <FormControlLabel\r\n                                    style={{ display: 'flex' }}\r\n                                    className=\"checkbox__label pd_t26 pd_l20\"\r\n                                    control={\r\n                                        <Checkbox\r\n                                            color=\"primary\"\r\n                                            checked={\r\n                                                category.indexOf(\r\n                                                    eachCategory\r\n                                                ) >= 0\r\n                                            }\r\n                                            onChange={(\r\n                                                event: ChangeEvent<HTMLInputElement>\r\n                                            ) => {\r\n                                                selectData(eachCategory, event);\r\n                                            }}\r\n                                        />\r\n                                    }\r\n                                    label={eachCategory.name}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n            <Button\r\n                disableRipple={buttonDisable}\r\n                disabled={buttonDisable}\r\n                className={`btn_bottom ${\r\n                    buttonDisable ? 'bg_gray3' : 'bg_primaryblue'\r\n                }`}\r\n            >\r\n                <p className=\"p_btn_bottom txt_wh txt_b\">다음</p>\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupCategoryComponent;\r\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\nconst http = axios.create({\r\n  baseURL: 'http://localhost:8000',\r\n});\r\n\r\nhttp.interceptors.request.use(\r\n  (config: AxiosRequestConfig) => {\r\n    console.log(`Reqeust Interceptor Called`);\r\n    return config;\r\n  },\r\n  (error: any) => {\r\n    console.log(error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nhttp.interceptors.response.use(\r\n  (config: AxiosResponse) => {\r\n    console.log(`Response Interceptor Called`);\r\n    return config;\r\n  },\r\n  (error: any) => {\r\n    console.log(error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default http;\r\n","import { Button, IconButton, TextField } from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { SignUpProfileState } from '../../recoil/Session';\r\nimport {\r\n    SignupComponentProps,\r\n    SignupProfileInfo,\r\n    SignupProfileInterface,\r\n} from './DataModel';\r\n\r\ntype SignupProfileProps = SignupComponentProps & {\r\n    data: SignupProfileInterface;\r\n    index: number;\r\n};\r\n\r\nconst parseData = (data: SignupProfileInfo, index: number): string => {\r\n    switch (index) {\r\n        case 0:\r\n            return data.realName;\r\n        case 1:\r\n            return data.nickName;\r\n        case 2:\r\n            return data.cellNumber;\r\n    }\r\n    return '';\r\n};\r\n\r\nconst SignupProfileComponent: React.FC<SignupProfileProps> = (\r\n    props: SignupProfileProps\r\n) => {\r\n    const [profile, setProfile] = useRecoilState(SignUpProfileState);\r\n    const value = parseData(profile, props.index);\r\n    const buttonDisable = value === '';\r\n    const [inValid, setInValid] = useState<boolean>(false);\r\n\r\n    const onChange = (index: number, data: string) => {\r\n        switch (index) {\r\n            case 0:\r\n                setProfile({ ...profile, realName: data });\r\n                break;\r\n            case 1:\r\n                console.log(`Onchange Called`);\r\n                setProfile({ ...profile, nickName: data });\r\n                http.get(`/api/members/nicknameCheck/${data}`).then((res) => {\r\n                    const alreadyExist: boolean = res.data.data;\r\n                    if (alreadyExist !== inValid) {\r\n                        setInValid(alreadyExist);\r\n                    }\r\n                });\r\n                break;\r\n            case 2:\r\n                setProfile({ ...profile, cellNumber: data });\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <div className=\"toptitle_div bg_wh\">\r\n                <div className=\"container\">\r\n                    <IconButton\r\n                        className=\"back_div\"\r\n                        onClick={() => props.onMoveButtonClick(-1)}\r\n                    >\r\n                        <KeyboardArrowLeft />\r\n                    </IconButton>\r\n                    <p className=\"txt_24 txt_b mg_t10\">혜택통 만들기</p>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container mg_t30 glow_body\">\r\n                <p className=\"txt_20 txt_b\">{props.data.title}</p>\r\n\r\n                <div className=\"box_div mg_t20 bg_wh\">\r\n                    <div className=\"pd_t16 mg_l16\"></div>\r\n                    <div className=\"pd_t4 mg_l16 pd_b16\">\r\n                        <TextField\r\n                            error={inValid}\r\n                            helperText={\r\n                                inValid && '이미 존재하는 닉네임입니다.'\r\n                            }\r\n                            value={value}\r\n                            onChange={(event) => {\r\n                                onChange(props.index, event.target.value);\r\n                            }}\r\n                            label={props.data.description}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <Button\r\n                disabled={buttonDisable || inValid}\r\n                onClick={() => {\r\n                    props.onMoveButtonClick(1);\r\n                }}\r\n                className={`btn_bottom ${\r\n                    buttonDisable || inValid ? 'bg_gray3' : 'bg_primaryblue'\r\n                }`}\r\n            >\r\n                <p className=\"p_btn_bottom txt_wh txt_b\">다음</p>\r\n            </Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupProfileComponent;\r\n","import React, { useRef } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport { useResetRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport {\r\n    rendingData,\r\n    SignupProfileInterface,\r\n} from '../component/Signup/DataModel';\r\nimport SignupAccountComponent from '../component/Signup/SignupAccountComponent';\r\nimport SignupCategoryComponent from '../component/Signup/SignupCategoryComponent';\r\nimport SignupProfileComponent from '../component/Signup/SignupProfileComponent';\r\nimport { SignUpProfileState } from '../recoil/Session';\r\n\r\nconst SignupPage: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    const restRecoil = useResetRecoilState(SignUpProfileState);\r\n    const sliderRef = useRef<Slider>(null);\r\n\r\n    const items: Array<JSX.Element> = [];\r\n    rendingData.forEach((eachData: SignupProfileInterface, index: number) => {\r\n        items.push(\r\n            <SignupProfileComponent\r\n                key={index}\r\n                index={index}\r\n                data={eachData}\r\n                onMoveButtonClick={(move: number) => onMove(index, move)}\r\n            />\r\n        );\r\n    });\r\n\r\n    items.push(\r\n        <SignupAccountComponent\r\n            key={3}\r\n            onMoveButtonClick={(move: number) => {\r\n                onMove(3, move);\r\n            }}\r\n        />\r\n    );\r\n    items.push(\r\n        <SignupCategoryComponent\r\n            key={4}\r\n            onMoveButtonClick={(move: number) => {\r\n                onMove(4, move);\r\n            }}\r\n        />\r\n    );\r\n\r\n    const onMove = (index: number, move: number) => {\r\n        if (index + move < 0) {\r\n            restRecoil();\r\n            history.replace('/mainpage');\r\n            return;\r\n        }\r\n\r\n        if (index + move > 4) {\r\n            // 맨마지막 페이지\r\n            // setIsAccSeq(true); real Signup\r\n            console.log(`last page`);\r\n        } else {\r\n            console.log(`goto slide ${index + move}`);\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n    console.log(items);\r\n    return (\r\n        <Slider {...commonSlickSettings} ref={sliderRef}>\r\n            {items}\r\n        </Slider>\r\n    );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React from 'react';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport './basic.css';\r\nimport './overide.css';\r\nimport MainPage from './page/MainPage';\r\nimport SignupPage from './page/SignupPage';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route exact path=\"/mainpage\" component={MainPage} />\r\n                <Route exact path=\"/signup\" component={SignupPage} />\r\n\r\n                <Redirect from=\"*\" to=\"/mainpage\" />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n    StylesProvider,\r\n    ThemeProvider,\r\n    unstable_createMuiStrictModeTheme,\r\n} from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nconst theme = unstable_createMuiStrictModeTheme();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <RecoilRoot>\r\n            <ThemeProvider theme={theme}>\r\n                <StylesProvider injectFirst>\r\n                    <App />\r\n                </StylesProvider>\r\n            </ThemeProvider>\r\n        </RecoilRoot>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}