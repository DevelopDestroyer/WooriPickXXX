{"version":3,"sources":["component/Common/BottomBar.tsx","recoil/index.ts","recoil/Session.ts","component/AuthRoute.tsx","component/AuthRouteGuard.tsx","recoil/Giving.ts","component/Common/GivingCompleteDialog.tsx","component/Together/DataModel.ts","component/Common.ts","component/Common/HeaderAction.tsx","component/Category/DataModel.ts","component/Giving/DataModel.ts","component/Common/util.ts","component/Together/AddFriendList.tsx","http/index.ts","recoil/Together.ts","page/AddFriendPage.tsx","component/Block/BlockChainTower.tsx","recoil/Benefit.ts","page/BenefitCompanyPage.tsx","component/Block/BlockChainTop.tsx","component/Block/BlockChainComponent.tsx","page/BlockChainPage.tsx","component/Common/LoaderComponent.tsx","page/BlockChainSelectPage.tsx","component/Common/SelectList.tsx","component/Signup/SignupCommon.tsx","component/Signup/SignupCategoryComponent.tsx","component/Signup/SignupFinishComponent.tsx","page/CategoryPage.tsx","component/Common/FingerDialog.tsx","component/Giving/GivingCommon.tsx","component/Giving/GivingAmountComponent.tsx","component/Common/Loading.tsx","component/Giving/GivingComponentDonationMember.tsx","component/Giving/GivingComponentDonationPie.tsx","component/Giving/GivingComponentStatus.tsx","component/Giving/GivingComponent.tsx","component/Giving/GivingExplanComponent.tsx","component/Giving/GivingFinishComponent.tsx","component/Giving/GivingSelectComponent.tsx","page/GivingPage.tsx","component/Common/HeaderDefault.tsx","component/Benefit/HomeBenefitInputText.tsx","component/Benefit/HomBenefitCompany.tsx","component/Benefit/HomeBenefitSearchList.tsx","component/Benefit/HomeBenefitList.tsx","component/Benefit/HomeBenefitSlider.tsx","component/Signup/DataModel.ts","component/Benefit/HomeBenefitComponent.tsx","component/Common/CategoryIcon.tsx","component/Home/HCBenefit.tsx","component/Home/BenefitList.tsx","component/Home/HCPoint.tsx","component/Home/HCStatus.tsx","component/Home/HomeComponent.tsx","component/Setting/SettingBenefit.tsx","component/Setting/SettingStatus.tsx","component/Setting/SettingComponent.tsx","component/Together/TCNoFriend.tsx","component/Together/TCRanking.tsx","component/Together/TCRankList.tsx","component/Together/TCStatus.tsx","component/Together/TogetherComponent.tsx","page/HomePage.tsx","page/LoginPage.tsx","component/Rending/DataModel.ts","component/Rending/RendingComponent.tsx","page/SigninPage.tsx","page/MainPage.tsx","component/Signup/SignupAccountList.tsx","component/Signup/SignupAccountComponent.tsx","component/Signup/MSMDialog.tsx","component/Signup/SignupCellphoneComponent.tsx","component/Signup/SignupPasswordComponent.tsx","component/Signup/SignupProfileComponent.tsx","page/SignupPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["DISPLAY_TYPE","useStyles","makeStyles","defaultType","fontFamily","selectedType","color","BottomBarNav","props","classes","BottomNavigation","value","current","onChange","event","newValue","showLabels","BottomNavigationAction","selected","label","HOME","icon","BENEFIT","TOGETHER","SETTING","persistAtom","recoilPersist","key","storage","localStorage","IsSplashSkip","atom","default","effects_UNSTABLE","BottomNavState","BenefitSearch","SignUpProfileState","cellNumber","nickName","realName","SignUpAccInfoState","accountMoney","accountNumber","SignUpCategoryState","CurrentUserState","name","nickname","phoneNumber","point","CurrentUserCategoryState","CurrentUserTransactionState","AuthRoute","render","isLogin","children","component","others","to","pathname","Route","AuthRouteGuard","currentUser","useRecoilValue","GivingSelectState","GivingAmountState","GivingResultState","isLoaded","donationRatioStatus","memberDTOs","totalDonationMoney","BlockChainState","DonationResState","donationId","open","dialog","fontSize","backgroundColor","paper","position","top","margin","maxWidth","width","borderRadius","card","minHeight","img","height","title","marginLeft","dec","GivingCompleteDialog","history","useHistory","useRecoilState","openData","setOpenData","userInfo","handleOutter","Dialog","className","onClose","Card","CardContent","style","paddingBottom","Box","display","src","Typography","my","Divider","textAlign","Button","onClick","push","padding","DUMMY_FRIEND_SET","cellphone","displayname","DUMMY_NOT_UNUSEDSET","commonSlickSettings","touchMove","dots","arrows","HeaderAction","AppBar","Toolbar","alignItems","isLast","IconButton","onMoveClick","KeyboardArrowLeft","headerTitle","endIcon","flexGrow","CategoryStandInfo","id","COLOR_SET","GivingStandInfo","getCategoryNameFromId","target","find","eachId","getGivingNameFromId","getMoneyStr2Number","str","Math","floor","Number","getNumberString","number","toString","replace","getCategoryImgPath","prefix","a11yProps","index","emptryString","AddFriendList","data","map","arr","p","justifyContent","disabled","mode","length","console","log","process","http","axios","create","baseURL","interceptors","request","use","config","error","Promise","reject","response","FriendDataSetState","TogetherAVGState","aveRank","ago3MonthBenefitPoint","myRank","thisMonthBenefitPoint","UsedFriendState","UnUsedFriendState","dfColor","buttonLayout","flexBasis","TabPanel","other","role","hidden","aria-labelledby","CHAIN_TYPE","AddFriendPage","friendState","useState","page","setPage","sliderRef","useRef","unUsedF","setUnUsedF","useEffect","list","Array","forEach","eachFriend","post","then","res","apiFriend","inputUnUsedF","goBack","mt","marginTop","CardHeader","Tabs","nextValue","slickGoTo","indicatorColor","textColor","variant","scrollButtons","Tab","ref","friendInfo","filter","userNickname","friendNickname","BenefitStateCompany","BenefitFavoriteState","BenefitSlideNumber","BenefitCompanyPage","useParams","company","setBenefitCompany","favoriteCompany","setFavoriteCompany","currentCompany","setCompany","statusChange","setStatusChange","companyName","userLike","goBackFunciton","a","currendAdd","delete","get","encodeURI","isertArr","benefitData","eachData","categoryId","description","thumbNailPath","totalLike","setTimeout","copy","Object","assign","BlockChainTop","floorCount","total","InfoDialog","overflowWrap","timeString","timeStamp","hash","previousHash","nonce","CardActions","paddingTop","disableRipple","colorSet","201","202","203","204","205","BlockChainComponent","cardBgColor","isMine","mainColor","subColor","setOpen","donationAmount","showLogic","showMy","BlockChainTower","imageName","titleName","currentData","backgroundSize","backgroundImage","pt","bgcolor","LoaderComponent","CircularProgress","iconButton","maxHeight","text","BlockChainPage","type","donaionId","ANIMAL","CHILD","DISABLE","ENV","RELEIF","getTitle","getImageName","getColor","setIsLoaded","chainData","setChainData","insertValue","dataArr","split","givingTarget","valueOf","targetDepth","setShowMy","Fab","size","left","transform","bottom","BlockChainSelectPage","onClickChain","flexDirection","root","SelectList","standardData","FormControlLabel","control","Checkbox","checkedIcon","checked","selectData","findIndex","select","SignupCommonComponent","onMoveButtonClick","buttonDisable","onCustomizeNextClick","ACCategoryDialog","recommand","handleOk","ACOverDialog","SignupCategoryComponent","category","setCategory","suggestDialog","setSuggestDialog","overDialog","setOverDialog","setRecommand","SignupCommon","next","benefitCategoryList","currentTarget","item","SignupFinishComponent","mb","CategoryPage","currentIndex","setIndex","onMove","move","FingerDialog","fingerClick","subheader","GivingCommon","buttonTitle","inputText","GivingAmountComponent","origin","max","resetSelect","useResetRecoilState","resetAmount","givingAmount","setGivingAmount","givingSelect","setDonationRes","useSetRecoilState","nextMove","donationPoint","TextField","helperText","Loading","Grid","container","justify","minWidth","whiteSpace","overflow","textOverflow","money","GivingComponentDonationMember","donationMember","orderMember","slice","sort","d1","d2","getOrderMember","sortMemger","maxValueLen","minValueLen","getRage","start","end","eachMember","ml","GivingComponentDonationPie","sortData","donationStatus","totalDonationCount","labels","datasets","borderColor","options","maintainAspectRatio","responsive","plugins","legend","boxWidth","usePointStyle","animation","duration","moneyFont","button","GivingComponentStatus","GivingComponent","givingData","setGivingData","GivingExplanComponent","GivingFinishComponent","GivingSelectComponent","GivingPage","onNextMove","HeaderDeafault","fontWeight","theme","marginRight","input","spacing","flex","HomeBenefitInputText","Paper","InputBase","onKeyPress","e","preventDefault","placeholder","inputProps","commonHeart","selectedHeart","HomBenefitCompany","CardActionArea","wrap","HomeBenefitSearchList","searchText","benefitCompany","benefitFavoriteCompany","renderValue","setRenderValue","filterData","categoryName","includes","HomeBenefitList","SIGNUP_TYPE","HomeBenefitSlider","override","speed","HomeBenefitComponent","setSearchText","setFavoriteState","isSearchMode","CategoryIcon","cardActionLayout","HCPoint","resCategory","eachCategory","extractDate","date","c","Date","getMonth","getDate","getDay","BenefitList","totalBuyPrice","userCategory","transaction","setTransaction","displaySet","setDisplaySet","inline","HCStatus","setUserInfo","HomeComponent","mx","HCBenefit","SettingBenefit","SettingStatus","containerOuter","iconSize","SettingComponent","TCNoFriend","border","borderWidth","mr","window","parent","postMessage","TCRanking","avgInfo","marginBottom","xs","TCRankList","titleStr","setTitleStr","rankList","setRankList","isLoad","setIsLoad","friendPoint","insertData","isMy","eachString","TCStatus","TogetherComponent","friendList","co","co2","friendMode","setAVGInfo","homeRendering","HomePage","renderType","setCurrentRenderType","BottomBar","imgContainer","bodyReplace","zIndex","LoginPage","rendingData","first","second","highLight","imgPath","buttonOverride","RendingComponent","overflowX","isFirst","SigninPage","MainPage","isSplashSkip","setIsSplashSkip","MainRendingData","labelLayout","AccountComponent","PRD_NM","ACNO","PBOK_BAL","SignupAccountList","originData","selectedData","SignupAccountComponent","setAccount","signupInfo","wooriAccountList","setWooriAccountList","selectAccount","setSelectAccount","checkCurrent","regex","cellFormat","dataBody","GRID","ACCT_KND","toUpperCase","MSMDialog","validStr","SignupCellphoneComponent","profile","setProfile","setDialog","complete","setComplete","inputValidStr","setInputValidStr","setValidStr","certMode","inValid","px","pb","flexWrap","onlyNums","onChangePhoneNumber","randomNum","result","characters","charactersLength","i","charAt","random","join","makeNumberId","SignupPasswordComponent","password","setPassword","showPassword","setShowPassword","setUserState","signupProfile","accountInfo","resetProfile","resetAccNum","resetCategory","fingerDialog","setFingerDialog","signupFunction","signupData","signupCategory","createRes","registRes","userRes","autoComplete","InputProps","endAdornment","InputAdornment","aria-label","onMouseDown","Visibility","VisibilityOff","SignupProfileComponent","parseData","setInValid","setHelperText","alreadyExist","SignupPage","resetAccInfo","items","App","setFrined","addEventListener","dataStr","eachPersonStr","eachStr","privateDataList","exact","path","from","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","unstable_createMuiStrictModeTheme","ReactDOM","StrictMode","ThemeProvider","StylesProvider","injectFirst","document","getElementById"],"mappings":"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","file":"static/js/main.73a3a421.chunk.js","sourcesContent":["import {\r\n    BottomNavigation,\r\n    BottomNavigationAction,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport StorefrontIcon from '@material-ui/icons/Storefront';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    defaultType: {\r\n        fontFamily: '\"Noto Sans KR\", sans-serif',\r\n    },\r\n    selectedType: {\r\n        color: '#62c3eb',\r\n    },\r\n}));\r\n\r\nexport enum DISPLAY_TYPE {\r\n    HOME,\r\n    BENEFIT,\r\n    TOGETHER,\r\n    SETTING,\r\n}\r\n\r\ninterface BottomBarNavProps {\r\n    current: DISPLAY_TYPE;\r\n    onChange: (clickType: DISPLAY_TYPE) => void;\r\n}\r\n\r\nconst BottomBarNav: React.FC<BottomBarNavProps> = (\r\n    props: BottomBarNavProps\r\n) => {\r\n    const classes = useStyles();\r\n\r\n    const handleChange = (\r\n        event: React.ChangeEvent<any>,\r\n        newValue: DISPLAY_TYPE\r\n    ) => {\r\n        props.onChange(newValue);\r\n    };\r\n\r\n    return (\r\n        <BottomNavigation\r\n            value={props.current}\r\n            onChange={handleChange}\r\n            showLabels={true}\r\n        >\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"홈\"\r\n                value={DISPLAY_TYPE.HOME}\r\n                icon={<HomeIcon />}\r\n            />\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"혜택찾기\"\r\n                value={DISPLAY_TYPE.BENEFIT}\r\n                icon={<StorefrontIcon />}\r\n            />\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"투게더\"\r\n                value={DISPLAY_TYPE.TOGETHER}\r\n                icon={<PeopleIcon />}\r\n            />\r\n            <BottomNavigationAction\r\n                classes={{\r\n                    selected: classes.selectedType,\r\n                    label: classes.defaultType,\r\n                }}\r\n                label=\"My\"\r\n                value={DISPLAY_TYPE.SETTING}\r\n                icon={<SettingsIcon />}\r\n            />\r\n        </BottomNavigation>\r\n    );\r\n};\r\n\r\nexport default BottomBarNav;\r\n","import { recoilPersist } from 'recoil-persist'\r\n\r\nconst { persistAtom } = recoilPersist({\r\n    key: 'recoil-persist', // configuration stay the same too\r\n    storage: localStorage\r\n})\r\n\r\nexport {\r\n    persistAtom\r\n}","import { atom } from 'recoil';\r\nimport { CategoryDataSet } from '../component/Category/DataModel';\r\nimport { DISPLAY_TYPE } from '../component/Common/BottomBar';\r\nimport { TransactionSet } from '../component/Home/DataModel';\r\nimport { SignupProfileInfo } from '../component/Signup/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport interface UserInfo {\r\n    name: string;\r\n    nickname: string;\r\n    phoneNumber: string;\r\n    accountNumber: string;\r\n    accountMoney: number;\r\n    point: number;\r\n}\r\n\r\nexport const IsSplashSkip = atom<boolean>({\r\n    key: 'IsSplashSkip',\r\n    default: false,\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const BottomNavState = atom<DISPLAY_TYPE>({\r\n    key: 'BottomNavState',\r\n    default: DISPLAY_TYPE.HOME,\r\n});\r\n\r\nexport const BenefitSearch = atom<string>({\r\n    key: 'BenefitSearch',\r\n    default: '',\r\n});\r\n\r\nexport const SignUpProfileState = atom<SignupProfileInfo>({\r\n    key: 'SignUpProfileState',\r\n    default: {\r\n        cellNumber: '',\r\n        nickName: '',\r\n        realName: '',\r\n    },\r\n});\r\n\r\nexport const SignUpAccInfoState = atom<{\r\n    accountNumber: string;\r\n    accountMoney: number;\r\n}>({\r\n    key: 'SignUpAccInfoState',\r\n    default: {\r\n        accountMoney: 0,\r\n        accountNumber: '',\r\n    },\r\n});\r\n\r\nexport const SignUpCategoryState = atom<CategoryDataSet[]>({\r\n    key: 'SignUpCategoryState',\r\n    default: [],\r\n});\r\n\r\nexport const CurrentUserState = atom<UserInfo>({\r\n    key: 'CurrentUserState',\r\n    default: {\r\n        name: '',\r\n        nickname: '',\r\n        phoneNumber: '',\r\n        accountNumber: '',\r\n        accountMoney: 0,\r\n        point: 0,\r\n    },\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const CurrentUserCategoryState = atom<number[]>({\r\n    key: 'CurrentUserCategoryState',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const CurrentUserTransactionState = atom<TransactionSet[]>({\r\n    key: 'CurrentUserTransactionState',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n","import React from 'react';\r\nimport { Redirect, Route, RouteProps } from 'react-router-dom';\r\n\r\nexport interface AuthRouteProps extends RouteProps {\r\n    isLogin: boolean;\r\n}\r\n\r\nclass AuthRoute extends Route<AuthRouteProps> {\r\n    render = () => {\r\n        const { isLogin, children, component, ...others } = this.props;\r\n        if (isLogin) {\r\n            return (\r\n                <Route {...others} component={component}>\r\n                    {children}\r\n                </Route>\r\n            );\r\n        } else {\r\n            return (\r\n                <Route\r\n                    {...others}\r\n                    render={() => <Redirect to={{ pathname: '/signin' }} />}\r\n                />\r\n            );\r\n        }\r\n    };\r\n}\r\n\r\nexport default AuthRoute;\r\n","import React from 'react';\r\nimport { RouteProps } from 'react-router-dom';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../recoil/Session';\r\nimport AuthRoute from './AuthRoute';\r\n\r\nconst AuthRouteGuard: React.FC<RouteProps> = (props: RouteProps) => {\r\n    const currentUser = useRecoilValue(CurrentUserState);\r\n    return <AuthRoute isLogin={currentUser.nickname !== ''} {...props} />;\r\n};\r\n\r\nexport default AuthRouteGuard;\r\n","import { atom } from 'recoil';\r\nimport {\r\n    BlockChainTotalSet,\r\n    GivingDataSet,\r\n    GivingResultInfo,\r\n} from '../component/Giving/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport const GivingSelectState = atom<GivingDataSet[]>({\r\n    key: 'GivingSelectState',\r\n    default: [],\r\n});\r\n\r\nexport const GivingAmountState = atom<number>({\r\n    key: 'GivingAmountState',\r\n    default: 0,\r\n});\r\n\r\nexport const GivingResultState = atom<GivingResultInfo>({\r\n    key: 'GivingResultState',\r\n    default: {\r\n        isLoaded: false,\r\n        donationRatioStatus: [],\r\n        memberDTOs: [],\r\n        totalDonationMoney: 0,\r\n    },\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const BlockChainState = atom<BlockChainTotalSet>({\r\n    key: 'BlockChainState',\r\n    default: {},\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const DonationResState = atom<{ donationId: number; open: boolean }>({\r\n    key: 'DonationReqIdState',\r\n    default: {\r\n        donationId: 0,\r\n        open: false,\r\n    },\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Dialog,\r\n    Divider,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { DonationResState } from '../../recoil/Giving';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialog: {\r\n        fontSize: '0.8rem !important',\r\n        '& .MuiBackdrop-root': {\r\n            backgroundColor: '#00000000',\r\n        },\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        margin: '10px 0 0 0',\r\n        maxWidth: '100%',\r\n        width: '100%',\r\n        borderRadius: '1rem',\r\n    },\r\n    card: {\r\n        minHeight: '0 !important',\r\n    },\r\n    img: {\r\n        width: '1.1rem',\r\n        height: '1.1rem',\r\n    },\r\n    title: {\r\n        marginLeft: '0.3rem',\r\n        fontSize: '0.8rem',\r\n        color: '#62C3EB',\r\n    },\r\n    dec: {\r\n        fontSize: '0.8rem',\r\n    },\r\n}));\r\n\r\nconst GivingCompleteDialog: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [openData, setOpenData] = useRecoilState(DonationResState);\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const handleOutter = () => {\r\n        // onClose();\r\n        setOpenData({\r\n            donationId: 0,\r\n            open: false,\r\n        });\r\n    };\r\n\r\n    const onClick = () => {\r\n        handleOutter();\r\n        history.push(`/blockchain/${openData.donationId}`);\r\n    };\r\n\r\n    return (\r\n        <Dialog\r\n            classes={{ paper: classes.paper }}\r\n            className={classes.dialog}\r\n            onClose={handleOutter}\r\n            open={openData.open}\r\n        >\r\n            <Card className={classes.card}>\r\n                <CardContent style={{ paddingBottom: 0 }}>\r\n                    <Box display=\"flex\">\r\n                        <img\r\n                            className={classes.img}\r\n                            src=\"/images/small_logo.png\"\r\n                        />\r\n                        <Typography className={classes.title}>\r\n                            우리핏베네핏\r\n                        </Typography>\r\n                    </Box>\r\n                    <Typography className={classes.dec}>\r\n                        {userInfo.nickname}님.\r\n                    </Typography>\r\n                    <Typography className={classes.dec}>\r\n                        블록이 빌딩위에 쌓였어요. 확인해보세요.\r\n                    </Typography>\r\n                    <Box my=\"5px\">\r\n                        <Divider />\r\n                    </Box>\r\n                    <Box textAlign=\"center\" my=\"5px\">\r\n                        <Button\r\n                            onClick={onClick}\r\n                            style={{\r\n                                padding: 0,\r\n                                color: '#3BAAD8',\r\n                                backgroundColor: 'white',\r\n                            }}\r\n                        >\r\n                            보기\r\n                        </Button>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default GivingCompleteDialog;\r\n","export interface FriendDataSet {\r\n    name: string;\r\n    displayname: string;\r\n    cellphone: string;\r\n}\r\n\r\nexport interface RankingDataSet {\r\n    friendNickname: string;\r\n    friendPoint: number;\r\n}\r\n\r\nexport interface UsedFriendSet {\r\n    name: string;\r\n    nickname?: string;\r\n    phoneNumber: string;\r\n}\r\n\r\nexport interface TogetherAVGSet {\r\n    ago3MonthBenefitPoint: number;\r\n    aveRank: number;\r\n    myRank: number;\r\n    thisMonthBenefitPoint: number;\r\n}\r\n\r\nexport const DUMMY_FRIEND_SET: FriendDataSet[] = [\r\n    {\r\n        cellphone: '010-3333-1234',\r\n        displayname: '서진',\r\n        name: '서진',\r\n    },\r\n    {\r\n        cellphone: '010-1111-1234',\r\n        displayname: '태호',\r\n        name: '태호',\r\n    },\r\n    {\r\n        cellphone: '010-2222-1234',\r\n        displayname: '진영',\r\n        name: '진영',\r\n    },\r\n    {\r\n        cellphone: '010-4444-1234',\r\n        displayname: '정민',\r\n        name: '정민',\r\n    },\r\n];\r\n\r\nexport const DUMMY_NOT_UNUSEDSET: UsedFriendSet[] = [\r\n    {\r\n        phoneNumber: '123-4567-8901',\r\n        nickname: '테스트1',\r\n        name: '테스트1',\r\n    },\r\n    {\r\n        phoneNumber: '123-3214-2412',\r\n        nickname: '테스트2',\r\n        name: '테스트2',\r\n    },\r\n    {\r\n        phoneNumber: '123-3432-6642',\r\n        nickname: '테스트3',\r\n        name: '테스트3',\r\n    },\r\n    {\r\n        phoneNumber: '123-1235-9757',\r\n        nickname: '테스트4',\r\n        name: '테스트4',\r\n    },\r\n    {\r\n        phoneNumber: '123-7564-7454',\r\n        nickname: '테스트4',\r\n        name: '테스트4',\r\n    },\r\n    {\r\n        phoneNumber: '123-5345-6643',\r\n        nickname: '테스트5',\r\n        name: '테스트5',\r\n    },\r\n    {\r\n        phoneNumber: '123-1262-6345',\r\n        nickname: '테스트6',\r\n        name: '테스트6',\r\n    },\r\n    {\r\n        phoneNumber: '123-7456-6654',\r\n        nickname: '테스트7',\r\n        name: '테스트7',\r\n    },\r\n];\r\n","import { Settings } from 'react-slick';\r\n\r\nexport const commonSlickSettings: Settings = {\r\n    touchMove: false,\r\n    dots: false,\r\n    arrows: false,\r\n};\r\n","import {\r\n    AppBar,\r\n    Box,\r\n    IconButton,\r\n    makeStyles,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    defaultType: {\r\n        fontFamily: '\"Noto Sans KR\", sans-serif',\r\n    },\r\n    selectedType: {\r\n        color: '#62c3eb',\r\n    },\r\n}));\r\n\r\nexport interface HeaderActionProps {\r\n    isLast: boolean;\r\n    headerTitle: string;\r\n    onMoveClick: () => void;\r\n    endIcon?: JSX.Element;\r\n}\r\n\r\nconst HeaderAction: React.FC<HeaderActionProps> = (\r\n    props: HeaderActionProps\r\n) => {\r\n    return (\r\n        <AppBar position=\"sticky\">\r\n            <Toolbar style={{ alignItems: 'center' }}>\r\n                {!props.isLast && (\r\n                    <IconButton\r\n                        onClick={props.onMoveClick}\r\n                        className=\"back_div\"\r\n                    >\r\n                        <KeyboardArrowLeft\r\n                            style={{\r\n                                display: 'block',\r\n                            }}\r\n                        />\r\n                    </IconButton>\r\n                )}\r\n\r\n                <Typography className=\"txt_24 txt_b\">\r\n                    {props.headerTitle}\r\n                </Typography>\r\n                {props.endIcon && (\r\n                    <>\r\n                        <Box flexGrow=\"1\" />\r\n                        {props.endIcon}\r\n                    </>\r\n                )}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default HeaderAction;\r\n","import { CategoryDataInfo } from '../Common/SelectList';\r\n\r\nexport interface CategoryDataSet extends CategoryDataInfo {}\r\n\r\nexport const CategoryStandInfo: CategoryDataSet[] = [\r\n    {\r\n        id: 101,\r\n        name: '저플라스틱',\r\n    },\r\n    {\r\n        id: 102,\r\n        name: '저탄소',\r\n    },\r\n    {\r\n        id: 103,\r\n        name: '동물실험반대',\r\n    },\r\n    {\r\n        id: 104,\r\n        name: '결식아동',\r\n    },\r\n    {\r\n        id: 105,\r\n        name: '노인보호',\r\n    },\r\n    {\r\n        id: 106,\r\n        name: '장애인 복지',\r\n    },\r\n    {\r\n        id: 107,\r\n        name: '장애인이 만든 제품',\r\n    },\r\n    {\r\n        id: 108,\r\n        name: '구호물품',\r\n    },\r\n    {\r\n        id: 109,\r\n        name: '비건',\r\n    },\r\n];\r\n","import { CategoryDataInfo } from '../Common/SelectList';\r\n\r\nexport interface ChainAPIRes {\r\n    hash: string;\r\n    previousHash: string;\r\n    data: string;\r\n    timeStamp: number;\r\n    nonce: number;\r\n    target: string;\r\n    targetDepth: number;\r\n}\r\n\r\n// export type DONATION_TARGET = 201 | 202 | 203 | 204 | 205;\r\nexport interface BlockChainTotalSet {\r\n    [givingTarget: number]: BlockChainDataSet[];\r\n}\r\n\r\nexport interface BlockChainDataSet {\r\n    name: string;\r\n    timeString: string;\r\n    givingTarget: string;\r\n    donationAmount: number;\r\n    hash: string;\r\n    nonce: number;\r\n    previousHash: string;\r\n    target: string;\r\n    targetDepth: number;\r\n    timeStamp: number;\r\n}\r\n\r\nexport interface DonationCategory {\r\n    donationId: number;\r\n    totalDonationCount: number;\r\n}\r\n\r\nexport interface DonationMember {\r\n    nickname: string;\r\n    point: number;\r\n}\r\n\r\nexport interface GivingResultInfo {\r\n    isLoaded: boolean;\r\n    totalDonationMoney: number;\r\n    donationRatioStatus: DonationCategory[];\r\n    memberDTOs: DonationMember[];\r\n}\r\n\r\nexport interface GivingDataSet extends CategoryDataInfo {}\r\n\r\nexport const COLOR_SET = [\r\n    '#3BAAD8',\r\n    '#62BBE0',\r\n    '#9DD4EC',\r\n    '#C4E5F7',\r\n    '#D8EEF7',\r\n];\r\n\r\nexport const GivingStandInfo: GivingDataSet[] = [\r\n    {\r\n        id: 201,\r\n        name: '친환경',\r\n    },\r\n    {\r\n        id: 202,\r\n        name: '동물보호',\r\n    },\r\n    {\r\n        id: 203,\r\n        name: '아동 / 노인',\r\n    },\r\n    {\r\n        id: 204,\r\n        name: '장애인',\r\n    },\r\n    {\r\n        id: 205,\r\n        name: '구호물품',\r\n    },\r\n];\r\n\r\nexport interface CommonInterface {\r\n    onMoveClick: (nextMove: number) => void;\r\n    index: number;\r\n}\r\n","import { CategoryStandInfo } from '../Category/DataModel';\r\nimport { GivingStandInfo } from '../Giving/DataModel';\r\n\r\nexport const getCategoryNameFromId = (id: number): string => {\r\n    const target = CategoryStandInfo.find((eachId) => eachId.id == id);\r\n    return target ? target.name : '';\r\n};\r\n\r\nexport const getGivingNameFromId = (id: number): string => {\r\n    const target = GivingStandInfo.find((eachId) => eachId.id == id);\r\n    return target ? target.name : '';\r\n};\r\n\r\nexport const getMoneyStr2Number = (str: string): number => {\r\n    return Math.floor(Number(str));\r\n};\r\n\r\nexport const getNumberString = (number: number): string => {\r\n    return number.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\r\n};\r\n\r\nexport const makeNumberId = (length: number): string => {\r\n    const result = [];\r\n    const characters = '0123456789';\r\n    const charactersLength = characters.length;\r\n    for (let i = 0; i < length; i++) {\r\n        result.push(\r\n            characters.charAt(Math.floor(Math.random() * charactersLength))\r\n        );\r\n    }\r\n    return result.join('');\r\n};\r\n\r\nexport const getCategoryImgPath = (id: number): string => {\r\n    const prefix = '/images/';\r\n    switch (id) {\r\n        case 101:\r\n            return prefix + 'icn_lowPlastic.png';\r\n        case 102:\r\n            return prefix + 'icn_lowCarbon.png';\r\n        case 103:\r\n            return prefix + 'icn_noAnimalTesting.png';\r\n        case 104:\r\n            return prefix + 'icn_children.png';\r\n        case 105:\r\n            return prefix + 'icn_oldman.png';\r\n        case 106:\r\n            return prefix + 'icn_disabled.png';\r\n        case 107:\r\n            return prefix + 'icn_disabled_Product.png';\r\n        case 108:\r\n            return prefix + 'icn_relief.png';\r\n        case 109:\r\n            return prefix + 'icn_vegan.png';\r\n    }\r\n    return '';\r\n};\r\n\r\nexport const a11yProps = (index: any) => {\r\n    return {\r\n        id: `full-width-tab-${index}`,\r\n        'aria-controls': `full-width-tabpanel-${index}`,\r\n    };\r\n};\r\n","import {\r\n    Box,\r\n    Button,\r\n    Divider,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { UsedFriendSet } from './DataModel';\r\n\r\nexport interface AddFriendListProps {\r\n    data: UsedFriendSet[];\r\n    mode: 'USED' | 'NOTUSED';\r\n    onClick?: (userInfo: UsedFriendSet) => void;\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    emptryString: {\r\n        color: 'white',\r\n    },\r\n}));\r\n\r\nconst AddFriendList: React.FC<AddFriendListProps> = (\r\n    props: AddFriendListProps\r\n) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {props.data.map((data, index, arr) => {\r\n                return (\r\n                    <>\r\n                        <Box key={data.name} display=\"flex\" p=\"9px\">\r\n                            <Box>\r\n                                <Typography className=\"txt_m txt_16\">\r\n                                    {data.name}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`${\r\n                                        data.nickname\r\n                                            ? 'txt_gray1'\r\n                                            : classes.emptryString\r\n                                    } txt_m txt_14`}\r\n                                >\r\n                                    {data.nickname ? data.nickname : 'emptry'}\r\n                                </Typography>\r\n                            </Box>\r\n                            <Box flexGrow=\"1\" />\r\n                            <Box\r\n                                display=\"flex\"\r\n                                justifyContent=\"center\"\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <Button\r\n                                    onClick={() =>\r\n                                        props.onClick && props.onClick(data)\r\n                                    }\r\n                                    disabled={props.mode === 'NOTUSED'}\r\n                                    className=\"btn_blueBorder txt_14\"\r\n                                >\r\n                                    {props.mode === 'USED' ? '추가' : '초대'}\r\n                                </Button>\r\n                            </Box>\r\n                        </Box>\r\n                        {arr.length - 1 > index && <Divider />}\r\n                    </>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AddFriendList;\r\n","import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\r\n\r\nconsole.log(`Backend End point ${process.env.REACT_APP_BACKEND_ENDPOINT}`);\r\nconst http = axios.create({\r\n    baseURL: 'http://18.139.13.34:8000', //process.env.REACT_APP_BACKEND_ENDPOINT,\r\n});\r\n\r\nhttp.interceptors.request.use(\r\n    (config: AxiosRequestConfig) => {\r\n        console.log(`Reqeust Interceptor Called`);\r\n        return config;\r\n    },\r\n    (error: any) => {\r\n        console.log(error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nhttp.interceptors.response.use(\r\n    (config: AxiosResponse) => {\r\n        console.log(`Response Interceptor Called`);\r\n        return config;\r\n    },\r\n    (error: any) => {\r\n        console.log(error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\nexport default http;\r\n","import { atom } from 'recoil';\r\nimport {\r\n    FriendDataSet,\r\n    TogetherAVGSet,\r\n    UsedFriendSet,\r\n} from '../component/Together/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport const FriendDataSetState = atom<FriendDataSet[]>({\r\n    key: 'FriendDataSetState',\r\n    default: [],\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const TogetherAVGState = atom<TogetherAVGSet>({\r\n    key: 'TogetherAVGState',\r\n    default: {\r\n        aveRank: -1,\r\n        ago3MonthBenefitPoint: -1,\r\n        myRank: -1,\r\n        thisMonthBenefitPoint: -1,\r\n    },\r\n});\r\n\r\nexport const UsedFriendState = atom<UsedFriendSet[]>({\r\n    key: 'UsedFriendState',\r\n    default: [],\r\n});\r\n\r\nexport const UnUsedFriendState = atom<UsedFriendSet[]>({\r\n    key: 'UnUsedFriendState',\r\n    default: [],\r\n});\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardHeader,\r\n    makeStyles,\r\n    Tab,\r\n    Tabs,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { ChangeEvent, useEffect, useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport { a11yProps } from '../component/Common/util';\r\nimport AddFriendList from '../component/Together/AddFriendList';\r\nimport {\r\n    DUMMY_NOT_UNUSEDSET,\r\n    UsedFriendSet,\r\n} from '../component/Together/DataModel';\r\nimport http from '../http';\r\nimport { CurrentUserState } from '../recoil/Session';\r\nimport { FriendDataSetState, UnUsedFriendState } from '../recoil/Together';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        width: '80%',\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box p={3}>{children}</Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst AddFriendPage: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const friendState = useRecoilValue(FriendDataSetState);\r\n    const [page, setPage] = useState<number>(0);\r\n    const sliderRef = useRef<Slider>(null);\r\n\r\n    const [unUsedF, setUnUsedF] = useRecoilState(UnUsedFriendState);\r\n\r\n    const tabChange = (event: ChangeEvent<any>, nextValue: number) => {\r\n        setPage(nextValue);\r\n        sliderRef.current && sliderRef.current.slickGoTo(nextValue);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (friendState.length > 0) {\r\n            console.log(friendState);\r\n            const data = {\r\n                nickname: userInfo.nickname,\r\n                list: Array<any>(),\r\n            };\r\n            friendState.forEach((eachFriend) => {\r\n                data.list.push({ phoneNumber: eachFriend.cellphone });\r\n            });\r\n            http.post('/api/friends', data).then((res) => {\r\n                const apiFriend: UsedFriendSet[] = res.data.data;\r\n\r\n                const inputUnUsedF: UsedFriendSet[] = [];\r\n                apiFriend.forEach((data) => {\r\n                    inputUnUsedF.push(data);\r\n                });\r\n                setUnUsedF(inputUnUsedF);\r\n            });\r\n        }\r\n\r\n        console.log('effect');\r\n    }, [friendState]);\r\n\r\n    const addClick = (friendInfo: UsedFriendSet) => {\r\n        setUnUsedF(\r\n            unUsedF.filter(\r\n                (data) => data.phoneNumber !== friendInfo.phoneNumber\r\n            )\r\n        );\r\n        http.post('/api/friend', {\r\n            userNickname: userInfo.nickname,\r\n            friendNickname: friendInfo.nickname as string,\r\n        });\r\n    };\r\n\r\n    const goBackFunciton = () => {\r\n        history.goBack();\r\n    };\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                isLast={false}\r\n                headerTitle={'친구추가'}\r\n                onMoveClick={goBackFunciton}\r\n            />\r\n\r\n            <div className=\"container\">\r\n                <Box mt=\"30px\">\r\n                    <Typography className=\"txt_b txt_20\">\r\n                        투게더를 같이 즐길\r\n                    </Typography>\r\n                    <Typography className=\"txt_b txt_20\">\r\n                        친구를 추가해주세요.\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <Card style={{ marginTop: '24px' }}>\r\n                    <CardHeader\r\n                        title={\r\n                            <Typography className=\"txt_b txt_20\">\r\n                                내 연락처\r\n                            </Typography>\r\n                        }\r\n                    />\r\n                    <Box mt=\"24px\">\r\n                        <Tabs\r\n                            value={page}\r\n                            onChange={tabChange}\r\n                            indicatorColor=\"primary\"\r\n                            textColor=\"primary\"\r\n                            variant=\"fullWidth\"\r\n                            scrollButtons=\"auto\"\r\n                        >\r\n                            <Tab\r\n                                key={0}\r\n                                label={'혜택통 사용중인 친구'}\r\n                                {...a11yProps(0)}\r\n                            />\r\n                            <Tab\r\n                                key={1}\r\n                                label={'혜택동 미가입 친구'}\r\n                                {...a11yProps(1)}\r\n                            />\r\n                        </Tabs>\r\n                    </Box>\r\n                    <Slider {...commonSlickSettings} ref={sliderRef}>\r\n                        <TabPanel index={0} value={page}>\r\n                            {unUsedF.length > 0 ? (\r\n                                <AddFriendList\r\n                                    onClick={addClick}\r\n                                    data={unUsedF}\r\n                                    mode=\"USED\"\r\n                                />\r\n                            ) : (\r\n                                <Typography className=\"txt_14 txt_center\">\r\n                                    혜택통 사용중인 친구 중, 모든유저를 친구추가\r\n                                    하였습니다\r\n                                </Typography>\r\n                            )}\r\n                        </TabPanel>\r\n                        <TabPanel index={1} value={page}>\r\n                            <AddFriendList\r\n                                data={DUMMY_NOT_UNUSEDSET}\r\n                                mode=\"NOTUSED\"\r\n                            />\r\n                        </TabPanel>\r\n                    </Slider>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddFriendPage;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { BlockChainDataSet } from '../Giving/DataModel';\r\nimport BlockChainComponent from './BlockChainComponent';\r\n\r\nexport enum CHAIN_TYPE {\r\n    ENV = 201,\r\n    ANIMAL = 202,\r\n    CHILD = 203,\r\n    DISABLE = 204,\r\n    RELEIF = 205,\r\n}\r\n\r\nexport interface BlockChainTowerProps {\r\n    imageName: string;\r\n    titleName: string;\r\n    colorSet: string;\r\n    nickName: string;\r\n    donationId: number;\r\n    showMy: boolean;\r\n    currentData: BlockChainDataSet[];\r\n}\r\n\r\nconst showLogic = (showMy: boolean, isMine: boolean): string => {\r\n    if (showMy) {\r\n        return isMine ? 'block' : 'none';\r\n    } else {\r\n        return 'block';\r\n    }\r\n};\r\n\r\nconst BlockChainTower: React.FC<BlockChainTowerProps> = (\r\n    props: BlockChainTowerProps\r\n) => {\r\n    const {\r\n        showMy,\r\n        nickName,\r\n        imageName,\r\n        titleName,\r\n        colorSet,\r\n        currentData,\r\n        donationId,\r\n    } = props;\r\n    return (\r\n        <>\r\n            <Box\r\n                style={{\r\n                    display: 'flex',\r\n                    justifyContent: 'center',\r\n                    alignItems: 'center',\r\n                    height: '84px',\r\n                    backgroundSize: '100% 100%',\r\n                    backgroundImage: `url(/images/Roof_${imageName})`,\r\n                }}\r\n            >\r\n                <Box pt=\"15px\">\r\n                    <Typography className=\"txt_wh txt_b txt_20\">\r\n                        {titleName}\r\n                    </Typography>\r\n                </Box>\r\n            </Box>\r\n            <Box bgcolor={colorSet} p=\"15px\">\r\n                {currentData.map((eachData, index, arr) => {\r\n                    const isMine = nickName === eachData.name;\r\n                    return (\r\n                        <Box\r\n                            style={{\r\n                                display: showLogic(showMy, isMine),\r\n                            }}\r\n                            key={index}\r\n                            mt={`${index === 0 ? '0' : '15px'}`}\r\n                        >\r\n                            <BlockChainComponent\r\n                                {...eachData}\r\n                                isMine={isMine}\r\n                                donationId={donationId}\r\n                                floor={arr.length - index}\r\n                            />\r\n                        </Box>\r\n                    );\r\n                })}\r\n            </Box>\r\n            <Box>\r\n                <img src={`/images/floor_${imageName}`} />\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BlockChainTower;\r\n","import { atom } from 'recoil';\r\nimport {\r\n    BenefitCompanyRes,\r\n    BenefitFavoriteCompany,\r\n} from '../component/Benefit/DataModel';\r\nimport { persistAtom } from './index';\r\n\r\nexport const BenefitStateCompany = atom<BenefitCompanyRes>({\r\n    key: 'BenefitStateCompany',\r\n    default: {\r\n        isLoaded: false,\r\n        data: [],\r\n    },\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const BenefitFavoriteState = atom<BenefitFavoriteCompany>({\r\n    key: 'BenefitFavoriteState',\r\n    default: {},\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n\r\nexport const BenefitSlideNumber = atom<number>({\r\n    key: 'BenefitSlideNumber',\r\n    default: 0,\r\n    effects_UNSTABLE: [persistAtom],\r\n});\r\n","import { Box, Button, IconButton, makeStyles } from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport {\r\n    BenefitCompany,\r\n    BenefitCompanyRes,\r\n    BenefitFavoriteCompany,\r\n} from '../component/Benefit/DataModel';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport http from '../http';\r\nimport { BenefitFavoriteState, BenefitStateCompany } from '../recoil/Benefit';\r\nimport { CurrentUserState } from '../recoil/Session';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        width: '80%',\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nconst BenefitCompanyPage: React.FC = () => {\r\n    const { name } = useParams<any>();\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const [company, setBenefitCompany] = useRecoilState(BenefitStateCompany);\r\n    const [favoriteCompany, setFavoriteCompany] = useRecoilState(\r\n        BenefitFavoriteState\r\n    );\r\n    const [currentCompany, setCompany] = useState<BenefitCompany>();\r\n\r\n    const [statusChange, setStatusChange] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        const data = company.data.find((data) => {\r\n            return data.companyName === name;\r\n        });\r\n        favoriteCompany[name];\r\n        if (data) {\r\n            setCompany({\r\n                ...data,\r\n                userLike: !!favoriteCompany[name],\r\n            });\r\n        }\r\n    }, [company, favoriteCompany]);\r\n\r\n    const onClick = () => {\r\n        const copy = Object.assign({}, favoriteCompany);\r\n        copy[name] = !favoriteCompany[name];\r\n        setFavoriteCompany(copy);\r\n        if (!statusChange) {\r\n            setStatusChange(true);\r\n        }\r\n    };\r\n\r\n    const goBackFunciton = async () => {\r\n        setStatusChange(false);\r\n        const currendAdd = !!favoriteCompany[name];\r\n        console.log(currendAdd);\r\n        const data = {\r\n            companyName: name,\r\n            userNickname: userInfo.nickname,\r\n        };\r\n        let res;\r\n        if (currendAdd) {\r\n            res = await http.post('/api/company/like', data);\r\n        } else {\r\n            res = await http.delete('/api/company/like', { data });\r\n        }\r\n\r\n        http.get(`/api/${encodeURI(userInfo.nickname)}/company`).then((res) => {\r\n            const isertArr: BenefitCompanyRes = {\r\n                isLoaded: true,\r\n                data: [],\r\n            };\r\n            const benefitData: BenefitFavoriteCompany = {};\r\n            res.data.data.forEach((eachData: BenefitCompany) => {\r\n                isertArr.data.push({\r\n                    categoryId: eachData.categoryId,\r\n                    companyName: eachData.companyName,\r\n                    description: eachData.description,\r\n                    thumbNailPath: eachData.thumbNailPath\r\n                        .replace(/\\/\\//gi, '/')\r\n                        .replace(/\\.[^/.]+$/, '.png'),\r\n                    totalLike: eachData.totalLike,\r\n                });\r\n                benefitData[eachData.companyName] = eachData.userLike;\r\n            });\r\n\r\n            setBenefitCompany(isertArr);\r\n            setTimeout(() => {\r\n                setFavoriteCompany(benefitData);\r\n            }, 100);\r\n        });\r\n        history.goBack();\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                headerTitle={name}\r\n                isLast={false}\r\n                onMoveClick={goBackFunciton}\r\n                endIcon={\r\n                    <IconButton onClick={onClick}>\r\n                        {favoriteCompany[name] ? (\r\n                            <FavoriteIcon style={{ color: 'red' }} />\r\n                        ) : (\r\n                            <FavoriteBorderIcon />\r\n                        )}\r\n                    </IconButton>\r\n                }\r\n            >\r\n                {name}\r\n            </HeaderAction>\r\n\r\n            <div className=\"container\">\r\n                {currentCompany?.thumbNailPath && (\r\n                    <img\r\n                        src={`/images/company/500_${currentCompany?.thumbNailPath}`}\r\n                    />\r\n                )}\r\n                <div className=\"div_rd_txt mg_t20\">\r\n                    <p className=\"txt_20 txt_b\">{name}에서는</p>\r\n\r\n                    <p className=\"txt_20\">{currentCompany?.description}</p>\r\n                </div>\r\n\r\n                <div className=\"box_div bg_wh pd_20 mg_t30\">\r\n                    <p className=\"txt_20 txt_b\">{name} 상품</p>\r\n                    <div className=\"mg_t30\" style={{ width: '100%' }}>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_1.png\" />\r\n                            <p className=\"txt_16\">햄프코튼 다용도 타월</p>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                                marginLeft: '2%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_2.png\" />\r\n                            <p className=\"txt_16\">천연라텍스 고무장갑</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"mg_t30\" style={{ width: '100%' }}>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_3.png\" />\r\n                            <p className=\"txt_16\">사이잘 빨대 세척솔</p>\r\n                        </div>\r\n                        <div\r\n                            style={{\r\n                                position: 'relative',\r\n                                display: 'inline-block',\r\n                                width: '48%',\r\n                                marginLeft: '2%',\r\n                            }}\r\n                        >\r\n                            <img src=\"/images/product/product_4.png\" />\r\n                            <p className=\"txt_16\">다회용 밀랍 주방랩</p>\r\n                        </div>\r\n                    </div>\r\n                    <Box my=\"30px\" textAlign=\"center\">\r\n                        <Button\r\n                            className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                        >\r\n                            상품 더 보러가기\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n\r\n                <div className=\"box_div bg_wh pd_20 mg_t30\">\r\n                    <p className=\"txt_20 txt_b\">{name} 후기</p>\r\n                    <img\r\n                        className=\"mg_t20\"\r\n                        style={{ width: '100%' }}\r\n                        src=\"/images/product/company_score.png\"\r\n                    />\r\n                    <div className=\"line bg_gray3 mg_t20\"></div>\r\n\r\n                    <p className=\"txt_12 txt_b mg_t20\">\r\n                        hayeon0908 / 닥터노아 마루 대나무 칫솔\r\n                    </p>\r\n                    <img\r\n                        className=\"mg_t6\"\r\n                        style={{\r\n                            height: '16px',\r\n                            width: 'auto',\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                        src=\"/images/product/star_5.png\"\r\n                    />\r\n                    <p\r\n                        className=\"txt_12 txt_gray2 mg_l10\"\r\n                        style={{\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                    >\r\n                        2021.02.25\r\n                    </p>\r\n\r\n                    <p className=\"mg_t20 txt_14\">\r\n                        플라스틱 줄여야겠다고 생각해서 구매하게 되었어요! 여러\r\n                        제품 써봤는데 이 대나무 칫솔이 제일 쓰기도 편하고 재질이\r\n                        좋아요 ㅠㅠ 대나무 칫솔 쓰면 항상 입 안이 헐어서\r\n                        고민이였는데 이 저품 쓰고 싹 사라졌어요~{' '}\r\n                    </p>\r\n                    <div className=\"scroll_wrap\">\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_1_1.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_1_2.png\"\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"line bg_gray3 mg_t20\"></div>\r\n\r\n                    <p className=\"txt_12 txt_b mg_t20\">\r\n                        러빗88 / 유기농 면마스크\r\n                    </p>\r\n                    <img\r\n                        className=\"mg_t6\"\r\n                        style={{\r\n                            height: '16px',\r\n                            width: 'auto',\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                        src=\"/images/product/star_5.png\"\r\n                    />\r\n                    <p\r\n                        className=\"txt_12 txt_gray2 mg_l10\"\r\n                        style={{\r\n                            position: 'relative',\r\n                            display: 'inline-block',\r\n                        }}\r\n                    >\r\n                        2020.08.15\r\n                    </p>\r\n\r\n                    <p className=\"mg_t20 txt_14\">\r\n                        마스크가 마감도 깔끔하고 끈도 튼튼해요~ 아무래도 아이가\r\n                        많이 어리다보니 물고 빨고 할게 뻔한데, 항균,\r\n                        무형광소재로 마들었다니 안심이 되더라구요. 무엇보다 좋은\r\n                        자재들을 사용한 마스크라 더욱 믿음이 갑니다 추천합니다^^\r\n                    </p>\r\n                    <div className=\"scroll_wrap\">\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_1.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_2.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_3.png\"\r\n                        />\r\n                        <img\r\n                            className=\"mg_t10 mg_r10 review_img\"\r\n                            src=\"/images/product/product_review_2_4.png\"\r\n                        />\r\n                    </div>\r\n                    <Box my=\"30px\" textAlign=\"center\">\r\n                        <Button\r\n                            className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                        >\r\n                            후기 767개 전체보기\r\n                        </Button>\r\n                    </Box>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BenefitCompanyPage;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { getNumberString } from '../Common/util';\r\nexport interface BlockChainTopProps {\r\n    title: string;\r\n    floorCount: number;\r\n    total: number;\r\n}\r\n\r\nconst BlockChainTop: React.FC<BlockChainTopProps> = (\r\n    props: BlockChainTopProps\r\n) => {\r\n    return (\r\n        <>\r\n            <Box>\r\n                <Typography className={`txt_20 txt_line`}>현재</Typography>\r\n                &nbsp;\r\n                <Typography className={`txt_20 txt_b txt_line`}>\r\n                    {props.title}빌딩\r\n                </Typography>\r\n                <Typography className={`txt_20 txt_line`}>은</Typography>\r\n            </Box>\r\n            <Box>\r\n                <Typography className={`txt_20 txt_b txt_line`}>\r\n                    {props.floorCount}층\r\n                </Typography>\r\n                <Typography className={`txt_20 txt_line`}>이며,</Typography>\r\n            </Box>\r\n            <Box>\r\n                <Typography className={`txt_20 txt_line`}>\r\n                    {`모금액은 `}\r\n                </Typography>\r\n                &nbsp;\r\n                <Typography className={`txt_20 txt_b txt_line`}>\r\n                    {getNumberString(props.total)}\r\n                </Typography>\r\n                &nbsp;\r\n                <Typography className={`txt_20 txt_line`}>\r\n                    {` 입니다`}\r\n                </Typography>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BlockChainTop;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    Dialog,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { getGivingNameFromId, getNumberString } from '../Common/util';\r\nimport { BlockChainDataSet } from '../Giving/DataModel';\r\n\r\ntype PropsType = BlockChainDataSet & {\r\n    isMine: boolean;\r\n    floor: number;\r\n    donationId: number;\r\n};\r\n\r\ninterface InfoDialogProps {\r\n    open: boolean;\r\n    data: PropsType;\r\n    onClose: () => void;\r\n}\r\n\r\nconst InfoDialog: React.FC<InfoDialogProps> = (props: InfoDialogProps) => {\r\n    const { onClose, data, open } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Card>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography className=\"txt_20 txt_b txt_primaryBlue\">\r\n                            {data.name}님의 블록 정보\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent style={{ textAlign: 'center' }}>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            기부 카테고리:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {getGivingNameFromId(data.donationId)}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            기부 날짜:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.timeString}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Timestamp:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.timeStamp}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Hash:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.hash}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Previous Hash:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.previousHash}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Nonce:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.nonce}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box textAlign=\"start\" style={{ overflowWrap: 'anywhere' }}>\r\n                        <Typography className=\"txt_16 txt_b txt_line\">\r\n                            Target:\r\n                        </Typography>\r\n                        <Typography className=\"txt_16 txt_gray1 txt_line\">\r\n                            {data.target}\r\n                        </Typography>\r\n                    </Box>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{ justifyContent: 'flex-end', paddingTop: 0 }}\r\n                >\r\n                    <Button\r\n                        onClick={onClose}\r\n                        disableRipple\r\n                        style={{ color: '#62C3EB' }}\r\n                    >\r\n                        확인\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst colorSet: any = {\r\n    201: '#58937E',\r\n    202: '#CC8A54',\r\n    203: '#997194',\r\n    204: '#517BB7',\r\n    205: '#B34646',\r\n};\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    card: {\r\n        minHeight: '0 !important',\r\n    },\r\n}));\r\n\r\nconst BlockChainComponent: React.FC<PropsType> = (props: PropsType) => {\r\n    const cardBgColor = props.isMine ? colorSet[props.donationId] : 'white';\r\n    const mainColor = props.isMine ? 'white' : 'black';\r\n    const subColor = props.isMine ? 'rgb(234 234 234)' : '#747474';\r\n    const [open, setOpen] = useState(false);\r\n\r\n    const onOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const onClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <InfoDialog open={open} onClose={onClose} data={props} />\r\n            <Card\r\n                style={{\r\n                    backgroundColor: cardBgColor,\r\n                    borderRadius: '0.5rem',\r\n                    minHeight: 0,\r\n                }}\r\n            >\r\n                <CardContent>\r\n                    <Box display=\"flex\">\r\n                        <Typography\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_16 txt_b txt_line`}\r\n                        >\r\n                            {props.floor}층\r\n                        </Typography>\r\n                        <Box flexGrow=\"1\" />\r\n                        <Typography\r\n                            onClick={onOpen}\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_16 txt_b txt_line`}\r\n                        >\r\n                            자세히{'>'}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box mt=\"5px\">\r\n                        <Typography\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_16 txt_b txt_line`}\r\n                        >\r\n                            {props.name}\r\n                        </Typography>\r\n                        &nbsp;\r\n                        <Typography\r\n                            style={{\r\n                                color: subColor,\r\n                            }}\r\n                            className={`txt_line`}\r\n                        >\r\n                            {props.timeString}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Box>\r\n                        <Typography\r\n                            style={{\r\n                                color: mainColor,\r\n                            }}\r\n                            className={`txt_20 txt_b`}\r\n                        >\r\n                            {getNumberString(props.donationAmount)}원\r\n                        </Typography>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BlockChainComponent;\r\n","import { Box, Fab, makeStyles, Typography } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport BlockChainTop from '../component/Block/BlockChainTop';\r\nimport BlockChainTower from '../component/Block/BlockChainTower';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport LoaderComponent from '../component/Common/LoaderComponent';\r\nimport { BlockChainTotalSet, ChainAPIRes } from '../component/Giving/DataModel';\r\nimport http from '../http';\r\nimport { BlockChainState } from '../recoil/Giving';\r\nimport { CurrentUserState } from '../recoil/Session';\r\n\r\nexport enum CHAIN_TYPE {\r\n    ENV = 201,\r\n    ANIMAL = 202,\r\n    CHILD = 203,\r\n    DISABLE = 204,\r\n    RELEIF = 205,\r\n}\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    iconButton: {\r\n        maxWidth: '5rem',\r\n        maxHeight: '5rem',\r\n    },\r\n    text: {\r\n        marginTop: '5px',\r\n    },\r\n}));\r\n\r\nconst getColor = (data: CHAIN_TYPE) => {\r\n    switch (data) {\r\n        case CHAIN_TYPE.ANIMAL:\r\n            return '#E5B88A';\r\n        case CHAIN_TYPE.CHILD:\r\n            return '#C9AFC7';\r\n        case CHAIN_TYPE.DISABLE:\r\n            return '#98B5D8';\r\n        case CHAIN_TYPE.ENV:\r\n            return '#BFD0A3';\r\n        case CHAIN_TYPE.RELEIF:\r\n            return '#DE6C6C';\r\n    }\r\n    return '';\r\n};\r\n\r\nconst getImageName = (data: CHAIN_TYPE) => {\r\n    switch (data) {\r\n        case CHAIN_TYPE.ANIMAL:\r\n            return 'Animal.png';\r\n        case CHAIN_TYPE.CHILD:\r\n            return 'Children.png';\r\n        case CHAIN_TYPE.DISABLE:\r\n            return 'Disabled.png';\r\n        case CHAIN_TYPE.ENV:\r\n            return 'Environment.png';\r\n        case CHAIN_TYPE.RELEIF:\r\n            return 'Relief.png';\r\n    }\r\n    return '';\r\n};\r\n\r\nconst getTitle = (data: CHAIN_TYPE) => {\r\n    switch (data) {\r\n        case CHAIN_TYPE.ANIMAL:\r\n            return '동물보호';\r\n        case CHAIN_TYPE.CHILD:\r\n            return '아동/노인 복지';\r\n        case CHAIN_TYPE.DISABLE:\r\n            return '장애인 복지';\r\n        case CHAIN_TYPE.ENV:\r\n            return '친환경';\r\n        case CHAIN_TYPE.RELEIF:\r\n            return '구호물품';\r\n    }\r\n    return '';\r\n};\r\n\r\nconst BlockChainPage: React.FC = () => {\r\n    const { type } = useParams<any>();\r\n    const donaionId: number = type * 1;\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const titleName = getTitle(donaionId);\r\n    const imageName = getImageName(donaionId);\r\n    const colorSet = getColor(donaionId);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [chainData, setChainData] = useRecoilState(BlockChainState);\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        http.get('/api/blocks').then((res) => {\r\n            console.log(res.data);\r\n            const insertValue: BlockChainTotalSet = {};\r\n            res.data.forEach((eachData: ChainAPIRes) => {\r\n                const dataArr: string[] = eachData.data.split(';');\r\n                const givingTarget: number = Number(dataArr[3]).valueOf();\r\n                if (!insertValue[givingTarget]) {\r\n                    insertValue[givingTarget] = [];\r\n                }\r\n                console.log(dataArr);\r\n                insertValue[givingTarget].push({\r\n                    donationAmount: Number(dataArr[2]),\r\n                    givingTarget: dataArr[1],\r\n                    hash: eachData.hash,\r\n                    name: dataArr[0],\r\n                    nonce: eachData.nonce,\r\n                    previousHash: eachData.previousHash,\r\n                    target: eachData.target,\r\n                    targetDepth: eachData.targetDepth,\r\n                    timeStamp: eachData.timeStamp,\r\n                    timeString: dataArr[4],\r\n                });\r\n            });\r\n            setIsLoaded(true);\r\n            setChainData(insertValue);\r\n        });\r\n    }, []);\r\n\r\n    const [showMy, setShowMy] = useState(false);\r\n    const onShow = () => {\r\n        setShowMy(!showMy);\r\n    };\r\n    const goBackFunciton = () => {\r\n        setShowMy(false);\r\n        history.goBack();\r\n    };\r\n\r\n    const currentData = chainData[type * 1] || [];\r\n    let total = 0;\r\n\r\n    currentData.forEach((eachData) => {\r\n        total += eachData.donationAmount;\r\n    });\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                isLast={false}\r\n                headerTitle={titleName}\r\n                onMoveClick={goBackFunciton}\r\n            />\r\n\r\n            {isLoaded ? (\r\n                <Box className=\"container\">\r\n                    <Box mt=\"30px\">\r\n                        <BlockChainTop\r\n                            title={titleName}\r\n                            total={total}\r\n                            floorCount={currentData.length}\r\n                        />\r\n                    </Box>\r\n                    <Box>\r\n                        <BlockChainTower\r\n                            showMy={showMy}\r\n                            colorSet={colorSet}\r\n                            donationId={donaionId}\r\n                            currentData={currentData}\r\n                            imageName={imageName}\r\n                            nickName={userInfo.nickname}\r\n                            titleName={titleName}\r\n                        />\r\n                    </Box>\r\n                </Box>\r\n            ) : (\r\n                <LoaderComponent color={'#62C3EB'} />\r\n            )}\r\n\r\n            {currentData.length > 0 && (\r\n                <Fab\r\n                    variant=\"extended\"\r\n                    size=\"medium\"\r\n                    onClick={onShow}\r\n                    style={{\r\n                        backgroundColor: 'white',\r\n                        left: '50%',\r\n                        transform: 'translateX(-50%)',\r\n                        position: 'absolute',\r\n                        bottom: '15px',\r\n                    }}\r\n                >\r\n                    <Typography className=\"txt_primaryBlue\">\r\n                        {showMy ? '전부 보이기' : '내 블록만 보기'}\r\n                    </Typography>\r\n                </Fab>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlockChainPage;\r\n","import { Box, CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nexport interface LoaderComponentProps {\r\n    color: string;\r\n}\r\n\r\nconst LoaderComponent: React.FC<LoaderComponentProps> = ({\r\n    color,\r\n}: LoaderComponentProps) => {\r\n    return (\r\n        <Box\r\n            height=\"124px\"\r\n            display=\"flex\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n        >\r\n            <CircularProgress style={{ color: color }} />\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default LoaderComponent;\r\n","import { Box, IconButton, makeStyles, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport HeaderAction from '../component/Common/HeaderAction';\r\nimport { CHAIN_TYPE } from './BlockChainPage';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    iconButton: {\r\n        maxWidth: '5rem',\r\n        maxHeight: '5rem',\r\n    },\r\n    text: {\r\n        marginTop: '5px',\r\n    },\r\n}));\r\n\r\nconst BlockChainSelectPage: React.FC = () => {\r\n    const history = useHistory();\r\n    const classes = useStyles();\r\n\r\n    const onClickChain = (data: CHAIN_TYPE) => {\r\n        history.push(`/blockchain/${data}`);\r\n    };\r\n\r\n    const goBackFunciton = () => {\r\n        history.goBack();\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderAction\r\n                isLast={false}\r\n                headerTitle={'실시간 기부 상황'}\r\n                onMoveClick={goBackFunciton}\r\n            />\r\n\r\n            <Box className=\"container\">\r\n                <Box mt=\"30px\">\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        실시간 기부를 확인할\r\n                    </Typography>\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        카테고리를 확인해 주세요.\r\n                    </Typography>\r\n                </Box>\r\n\r\n                <Box display=\"flex\" flexDirection=\"column\" mt=\"24px\">\r\n                    <Box display=\"flex\">\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.ENV)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_environ.png\" />\r\n                            </IconButton>\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                친환경\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.ANIMAL)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_animal.png\" />\r\n                            </IconButton>\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                동물보호\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box display=\"flex\" mt=\"15px\">\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.CHILD)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_children.png\" />\r\n                            </IconButton>\r\n\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                아동/노인 복지\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box margin=\"auto\">\r\n                            <IconButton\r\n                                onClick={() => onClickChain(CHAIN_TYPE.DISABLE)}\r\n                                className={classes.iconButton}\r\n                            >\r\n                                <img src=\"/images/category_disabled.png\" />\r\n                            </IconButton>\r\n                            <Typography\r\n                                className={`${classes.text} txt_16 txt_center`}\r\n                            >\r\n                                장애인 복지\r\n                            </Typography>\r\n                        </Box>\r\n                    </Box>\r\n                    <Box margin=\"auto\" mt=\"14px\">\r\n                        <IconButton\r\n                            onClick={() => onClickChain(CHAIN_TYPE.RELEIF)}\r\n                            className={classes.iconButton}\r\n                        >\r\n                            <img src=\"/images/category_relief.png\" />\r\n                        </IconButton>\r\n                        <Typography\r\n                            className={`${classes.text} txt_16 txt_center`}\r\n                        >\r\n                            구호 물품\r\n                        </Typography>\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default BlockChainSelectPage;\r\n","import { Checkbox, FormControlLabel, makeStyles } from '@material-ui/core';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport React, { ChangeEvent } from 'react';\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        '&:hover': {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    margin: {\r\n        marginLeft: '5px',\r\n    },\r\n    icon: {\r\n        color: '#62C3EB',\r\n        fontSize: '1.5rem',\r\n    },\r\n});\r\n\r\nexport interface CategoryDataInfo {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\ninterface SelectListProps {\r\n    standardData: CategoryDataInfo[];\r\n    selectData: CategoryDataInfo[];\r\n    onChange: (\r\n        data: CategoryDataInfo,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => void;\r\n}\r\n\r\nconst SelectList: React.FC<SelectListProps> = (props: SelectListProps) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            {props.standardData.map((eachData) => {\r\n                return (\r\n                    <div\r\n                        key={eachData.id}\r\n                        className=\"box_div mg_t20 bg_wh height_80\"\r\n                    >\r\n                        <FormControlLabel\r\n                            style={{ display: 'flex' }}\r\n                            className=\"checkbox__label pd_t26 pd_l20\"\r\n                            control={\r\n                                <Checkbox\r\n                                    checkedIcon={\r\n                                        <CheckCircleOutlineIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    icon={\r\n                                        <RadioButtonUncheckedIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    color=\"primary\"\r\n                                    checked={\r\n                                        props.selectData.findIndex(\r\n                                            (select) =>\r\n                                                select.id === eachData.id\r\n                                        ) >= 0\r\n                                    }\r\n                                    onChange={(event) => {\r\n                                        props.onChange(eachData, event);\r\n                                    }}\r\n                                />\r\n                            }\r\n                            classes={{ label: classes.margin }}\r\n                            label={eachData.name}\r\n                        />\r\n                    </div>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SelectList;\r\n","import {\r\n    AppBar,\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    Toolbar,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React, { PropsWithChildren } from 'react';\r\n\r\nexport interface SignUpCommon {\r\n    buttonDisable: boolean;\r\n    isLast?: boolean;\r\n    onMoveButtonClick: (move: number) => void;\r\n    onCustomizeNextClick?: () => void;\r\n}\r\n\r\nconst SignupCommonComponent: React.FC<PropsWithChildren<SignUpCommon>> = (\r\n    props: PropsWithChildren<SignUpCommon>\r\n) => {\r\n    return (\r\n        <>\r\n            <AppBar position=\"sticky\">\r\n                <Toolbar style={{ alignItems: 'center' }}>\r\n                    {!props.isLast && (\r\n                        <IconButton\r\n                            className=\"back_div\"\r\n                            disabled={props.isLast}\r\n                            onClick={() => props.onMoveButtonClick(-1)}\r\n                        >\r\n                            <KeyboardArrowLeft\r\n                                style={{\r\n                                    display: `${\r\n                                        props.isLast ? 'none' : 'block'\r\n                                    }`,\r\n                                }}\r\n                            />\r\n                        </IconButton>\r\n                    )}\r\n                    <Typography className=\"txt_24 txt_b\">\r\n                        혜택통 만들기\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <div className=\"glow_body\">\r\n                <Box mt=\"30px\">\r\n                    <div className=\"container\" style={{ height: '100%' }}>\r\n                        {props.children}\r\n                    </div>\r\n                </Box>\r\n            </div>\r\n            <Button\r\n                disableRipple={props.buttonDisable}\r\n                disabled={props.buttonDisable}\r\n                className={`btn_bottom ${\r\n                    props.buttonDisable ? 'bg_gray3' : 'bg_primaryblue'\r\n                }`}\r\n                onClick={() => {\r\n                    props.onCustomizeNextClick\r\n                        ? props.onCustomizeNextClick()\r\n                        : props.onMoveButtonClick(1);\r\n                }}\r\n            >\r\n                <p className=\"p_btn_bottom txt_wh txt_b\">\r\n                    {props.isLast ? '완료! 혜택 받으러 가기' : '다음'}\r\n                </p>\r\n            </Button>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignupCommonComponent;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    Dialog,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState, SignUpCategoryState } from '../../recoil/Session';\r\nimport { CategoryDataSet, CategoryStandInfo } from '../Category/DataModel';\r\nimport SelectList from '../Common/SelectList';\r\nimport { getCategoryNameFromId } from '../Common/util';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\ninterface SignupCategory {\r\n    benefitCategoryList: Array<{ userNickname: string; categoryId: number }>;\r\n}\r\n\r\ninterface ACDialogProps {\r\n    open: boolean;\r\n    onClose: () => void;\r\n}\r\n\r\nconst LIMIT = 2;\r\n\r\ntype ACCCategoryDialogProps = ACDialogProps & {\r\n    recommand: number[];\r\n    nickName: string;\r\n};\r\n\r\nconst ACCategoryDialog: React.FC<ACCCategoryDialogProps> = (\r\n    props: ACCCategoryDialogProps\r\n) => {\r\n    const { onClose, open, nickName, recommand } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    let str = '';\r\n\r\n    recommand.forEach((eachData: number, index) => {\r\n        str += getCategoryNameFromId(eachData);\r\n        str += recommand.length - 1 !== index ? ', ' : ' ';\r\n    });\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <Card>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography className=\"txt_20 txt_b\">\r\n                            카테고리 추천\r\n                        </Typography>\r\n                    }\r\n                />\r\n\r\n                <CardContent>\r\n                    <Typography\r\n                        className=\"txt_14\"\r\n                        style={{ display: 'inline' }}\r\n                    >\r\n                        {nickName}님의 소비 패턴을 분석해보니\r\n                    </Typography>\r\n                    <Typography\r\n                        className=\"txt_14\"\r\n                        style={{ display: 'inline', color: '#62C3EB' }}\r\n                    >\r\n                        {str}\r\n                    </Typography>\r\n                    <Typography\r\n                        className=\"txt_14\"\r\n                        style={{ display: 'inline' }}\r\n                    >\r\n                        관련 소비가 많았어요! 해당 카테고리를 구독해보시는 것은\r\n                        어떨까요?\r\n                    </Typography>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{ justifyContent: 'flex-end', paddingTop: 0 }}\r\n                >\r\n                    <Button\r\n                        onClick={handleOk}\r\n                        disableRipple\r\n                        style={{ color: '#62C3EB' }}\r\n                    >\r\n                        확인 완료\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst ACOverDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { onClose, open } = props;\r\n\r\n    const handleOk = () => {\r\n        onClose();\r\n    };\r\n\r\n    return (\r\n        <Dialog onClose={handleOk} open={open}>\r\n            <CardContent>\r\n                <Typography>2가지의 카테고리만 선택 할 수 있어요.</Typography>\r\n            </CardContent>\r\n            <CardActions style={{ justifyContent: 'flex-end', paddingTop: 0 }}>\r\n                <Button\r\n                    onClick={handleOk}\r\n                    disableRipple\r\n                    style={{ color: '#62C3EB' }}\r\n                >\r\n                    확인 완료\r\n                </Button>\r\n            </CardActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nconst SignupCategoryComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [category, setCategory] = useRecoilState<CategoryDataSet[]>(\r\n        SignUpCategoryState\r\n    );\r\n\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n\r\n    const [suggestDialog, setSuggestDialog] = useState<boolean>(false);\r\n    const [overDialog, setOverDialog] = useState<boolean>(false);\r\n\r\n    const [recommand, setRecommand] = useState<number[]>([]);\r\n    const buttonDisable = category.length !== 2;\r\n\r\n    useEffect(() => {\r\n        http.get(`/api/members/${userInfo.nickname}/category/recommend`).then(\r\n            (res) => {\r\n                const recommand = res.data.data.map((eachData: any) => {\r\n                    return eachData.categoryId;\r\n                });\r\n                setRecommand(recommand);\r\n                setSuggestDialog(true);\r\n            }\r\n        );\r\n    }, []);\r\n\r\n    console.log(userInfo);\r\n    const selectData = (\r\n        data: CategoryDataSet,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        if (event.currentTarget.checked) {\r\n            if (category.length < LIMIT) {\r\n                setCategory([...category, data]);\r\n            } else {\r\n                setOverDialog(true);\r\n            }\r\n        } else {\r\n            setCategory(category.filter((item) => data !== item));\r\n        }\r\n    };\r\n\r\n    const onNextClick = (next: number) => {\r\n        const data: SignupCategory = {\r\n            benefitCategoryList: [],\r\n        };\r\n\r\n        category.forEach((eachData) => {\r\n            data.benefitCategoryList.push({\r\n                categoryId: eachData.id,\r\n                userNickname: userInfo.nickname,\r\n            });\r\n        });\r\n        http.post(`/api/members/category`, data).then((res) => {\r\n            console.log(res);\r\n            props.onMoveButtonClick(next);\r\n        });\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <ACCategoryDialog\r\n                nickName={userInfo.nickname}\r\n                recommand={recommand}\r\n                open={suggestDialog}\r\n                onClose={() => {\r\n                    setSuggestDialog(false);\r\n                }}\r\n            />\r\n            <ACOverDialog\r\n                open={overDialog}\r\n                onClose={() => {\r\n                    setOverDialog(false);\r\n                }}\r\n            />\r\n            <SignupCommonComponent\r\n                isLast={true}\r\n                buttonDisable={buttonDisable}\r\n                onMoveButtonClick={onNextClick}\r\n            >\r\n                <p className=\"txt_20\">관심있는 카테고리 2가지를 골라</p>\r\n                <p className=\"txt_20 txt_b\">집중 혜택 받으세요.</p>\r\n\r\n                <SelectList\r\n                    selectData={category}\r\n                    standardData={CategoryStandInfo}\r\n                    onChange={selectData}\r\n                />\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupCategoryComponent;\r\n","import { Box } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\nconst SignupFinishComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <SignupCommonComponent\r\n                isLast={true}\r\n                buttonDisable={false}\r\n                onMoveButtonClick={() => props.onMoveButtonClick(1)}\r\n            >\r\n                <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n                    <Box mt=\"25px\" />\r\n                    <p className=\"txt_20 txt_b\">축하합니다!</p>\r\n                    <p className=\"txt_20\">혜택통이 만들어졌어요!</p>\r\n                    <p className=\"txt_20\">이제 착한 소비하고</p>\r\n                    <p className=\"txt_20\">혜택도 받으세요.</p>\r\n                    <Box flexGrow=\"1\" />\r\n                    <p className=\"txt_center\">\r\n                        <img\r\n                            className=\"img_rending\"\r\n                            src=\"/images/rending_1.png\"\r\n                        />\r\n                    </p>\r\n                    <Box mb=\"45px\" />\r\n                </Box>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupFinishComponent;\r\n","import React, { useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport SignupCategoryComponent from '../component/Signup/SignupCategoryComponent';\r\nimport SignupFinishComponent from '../component/Signup/SignupFinishComponent';\r\n\r\nconst CategoryPage: React.FC = () => {\r\n    const sliderRef = useRef<Slider>(null);\r\n    const history = useHistory();\r\n    const [currentIndex, setIndex] = useState(0);\r\n\r\n    const onMove = async (index: number, move: number) => {\r\n        if (index + move < 0) {\r\n            return;\r\n        }\r\n        setIndex(index + move);\r\n        if (index + move >= 2) {\r\n            history.replace('/homepage');\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {currentIndex === 0 ? (\r\n                <SignupCategoryComponent\r\n                    key={0}\r\n                    onMoveButtonClick={(move: number) => {\r\n                        onMove(0, move);\r\n                    }}\r\n                />\r\n            ) : (\r\n                <SignupFinishComponent\r\n                    key={1}\r\n                    onMoveButtonClick={(move: number) => {\r\n                        onMove(1, move);\r\n                    }}\r\n                />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CategoryPage;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    Dialog,\r\n    IconButton,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\ninterface ACDialogProps {\r\n    title: string;\r\n    open: boolean;\r\n    fingerClick: () => void;\r\n    onClose: () => void;\r\n}\r\n\r\nconst FingerDialog: React.FC<ACDialogProps> = (props: ACDialogProps) => {\r\n    const { title, onClose, open, fingerClick } = props;\r\n\r\n    return (\r\n        <Dialog onClose={onClose} open={open}>\r\n            <Card>\r\n                <CardHeader\r\n                    title={\r\n                        <Typography className=\"txt_20 txt_b\">\r\n                            {title}\r\n                        </Typography>\r\n                    }\r\n                    subheader={\r\n                        <Typography className=\"txt_14\">\r\n                            더욱 쉽고 빠른 로그인을 위해 지문을 등록해 주세요.\r\n                        </Typography>\r\n                    }\r\n                />\r\n                <CardContent style={{ textAlign: 'center' }}>\r\n                    <IconButton onClick={fingerClick}>\r\n                        <img src=\"/images/Fingerprint_Color.png\" />\r\n                    </IconButton>\r\n                    <Typography className=\"txt_14\">센서에 지문인식</Typography>\r\n                </CardContent>\r\n                <CardActions\r\n                    style={{ justifyContent: 'flex-end', paddingTop: 0 }}\r\n                >\r\n                    <Button\r\n                        onClick={onClose}\r\n                        disableRipple\r\n                        style={{ color: '#62C3EB' }}\r\n                    >\r\n                        취소\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default FingerDialog;\r\n","import { Box, Button, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport HeaderAction from '../Common/HeaderAction';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nexport interface GivingCommonProps {\r\n    headerTitle: string;\r\n    isLast: boolean;\r\n    buttonTitle: string;\r\n    buttonDisable?: boolean;\r\n    onMoveClick: (offset: number) => void;\r\n}\r\n\r\ntype GivingCommonType = React.PropsWithChildren<GivingCommonProps>;\r\n\r\nconst GivingCommon: React.FC<GivingCommonType> = (props: GivingCommonType) => {\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\" width=\"100%\">\r\n            <HeaderAction\r\n                isLast={props.isLast}\r\n                headerTitle={props.headerTitle}\r\n                onMoveClick={() => props.onMoveClick(-1)}\r\n            />\r\n            <div className=\"glow_body\">\r\n                <div className=\"container\" style={{ height: '100%' }}>\r\n                    {props.children}\r\n                </div>\r\n            </div>\r\n            <Button\r\n                disableRipple={props.buttonDisable}\r\n                disabled={props.buttonDisable}\r\n                className={`btn_bottom ${\r\n                    props.buttonDisable ? 'bg_gray3' : 'bg_primaryblue'\r\n                }`}\r\n                onClick={() => props.onMoveClick(1)}\r\n            >\r\n                <p className=\"p_btn_bottom txt_wh txt_b\">{props.buttonTitle}</p>\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default GivingCommon;\r\n","import { Box, makeStyles, TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState } from 'react';\r\nimport {\r\n    useRecoilState,\r\n    useRecoilValue,\r\n    useResetRecoilState,\r\n    useSetRecoilState,\r\n} from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    DonationResState,\r\n    GivingAmountState,\r\n    GivingSelectState,\r\n} from '../../recoil/Giving';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport FingerDialog from '../Common/FingerDialog';\r\nimport { getNumberString } from '../Common/util';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    inputText: {\r\n        '&>div>input': {\r\n            textAlign: 'center',\r\n        },\r\n        '&>p': {\r\n            textAlign: 'center',\r\n        },\r\n    },\r\n}));\r\n\r\nconst isValid = (origin: number, max: number) => {\r\n    return 0 < origin && origin <= max;\r\n};\r\n\r\nconst GivingAmountComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const classes = useStyles();\r\n    const resetSelect = useResetRecoilState(GivingSelectState);\r\n    const resetAmount = useResetRecoilState(GivingAmountState);\r\n\r\n    const [givingAmount, setGivingAmount] = useRecoilState(GivingAmountState);\r\n    const givingSelect = useRecoilValue(GivingSelectState);\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n\r\n    const [open, setOpen] = useState<boolean>(false);\r\n    const setDonationRes = useSetRecoilState(DonationResState);\r\n\r\n    const onChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setGivingAmount(Number(event.target.value));\r\n    };\r\n\r\n    const onFingerClick = () => {\r\n        http.post(`/api/trading/donation`, {\r\n            userNickname: userInfo.nickname,\r\n            donationId: givingSelect[0].id,\r\n            donationPoint: givingAmount,\r\n        }).then(() => {\r\n            console.log('기부 완료');\r\n            setDonationRes({\r\n                donationId: givingSelect[0].id,\r\n                open: true,\r\n            });\r\n        });\r\n        resetSelect();\r\n        resetAmount();\r\n        setOpen(false);\r\n        onMoveClick(index + 1);\r\n    };\r\n    const onClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            buttonDisable={!isValid(givingAmount, userInfo.point)}\r\n            onMoveClick={(nextMove: number) => {\r\n                if (nextMove < 0) {\r\n                    onMoveClick(index + nextMove);\r\n                } else {\r\n                    setOpen(true);\r\n                }\r\n\r\n                // onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"다음\"\r\n        >\r\n            <FingerDialog\r\n                title={'지문확인'}\r\n                fingerClick={onFingerClick}\r\n                open={open}\r\n                onClose={onClose}\r\n            />\r\n            <Box mt=\"30px\">\r\n                <p className=\"txt_20\">기부하고 싶은</p>\r\n                <p className=\"txt_20 txt_b\">금액을 입력하세요.</p>\r\n            </Box>\r\n\r\n            <Box mt=\"25px\">\r\n                <TextField\r\n                    classes={{\r\n                        root: classes.inputText,\r\n                    }}\r\n                    style={{\r\n                        width: '80%',\r\n                        marginLeft: '10%',\r\n                    }}\r\n                    helperText={`최대 ${getNumberString(\r\n                        userInfo.point\r\n                    )} 원 입금 가능`}\r\n                    onChange={onChange}\r\n                />\r\n            </Box>\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingAmountComponent;\r\n","import { CircularProgress, Grid } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst Loading: React.FC = () => {\r\n    return (\r\n        <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ height: '100%' }}\r\n        >\r\n            <CircularProgress\r\n                style={{\r\n                    height: '4rem',\r\n                    width: '4rem',\r\n                    color: '#62C3EB',\r\n                }}\r\n            />\r\n        </Grid>\r\n    );\r\n};\r\n\r\nexport default Loading;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { COLOR_SET, DonationMember } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    text: {\r\n        display: 'inline-block',\r\n        maxWidth: '55px',\r\n        minWidth: '50px',\r\n        whiteSpace: 'nowrap',\r\n        textAlign: 'right',\r\n        overflow: 'hidden !important',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    money: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif\",\r\n        fontSize: '17px',\r\n    },\r\n}));\r\n\r\nconst MAX_SHOW_MEMBER = 8;\r\n\r\ninterface GivingComponentDonationMemberProps {\r\n    donationMember: DonationMember[];\r\n}\r\n\r\nconst getOrderMember = (donationMember: DonationMember[]) => {\r\n    return donationMember\r\n        .slice()\r\n        .sort((d1, d2) => {\r\n            return d2.point - d1.point;\r\n        })\r\n        .slice(0, MAX_SHOW_MEMBER);\r\n};\r\n\r\nconst getRage = (sortMemger: DonationMember[]): [number, number] => {\r\n    const maxValueLen = sortMemger[0].point;\r\n    const minValueLen = sortMemger[sortMemger.length - 1].point;\r\n\r\n    if (sortMemger.length >= 1) {\r\n        const max = maxValueLen * 1.1;\r\n        const min = minValueLen * 0.9;\r\n        return [min, max];\r\n    } else {\r\n        return [0, 0];\r\n    }\r\n};\r\n\r\nconst GivingComponentDonationMember: React.FC<GivingComponentDonationMemberProps> = ({\r\n    donationMember,\r\n}: GivingComponentDonationMemberProps) => {\r\n    const classes = useStyles();\r\n    const orderMember = getOrderMember(donationMember);\r\n    const [start, end] = getRage(orderMember);\r\n    return (\r\n        <Card\r\n            style={{\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_b txt_20\">\r\n                    지난 달 기부왕👍\r\n                </Typography>\r\n                <Box>\r\n                    <Grid>\r\n                        {orderMember.map((eachMember, index) => {\r\n                            return (\r\n                                <Box\r\n                                    display=\"flex\"\r\n                                    key={eachMember.nickname}\r\n                                    my=\"1.5rem\"\r\n                                >\r\n                                    <Box\r\n                                        width=\"1.5rem\"\r\n                                        height=\"2rem\"\r\n                                        position=\"relative\"\r\n                                    >\r\n                                        {index <= 2 && (\r\n                                            <img\r\n                                                src={`/images/ICON_ranking${\r\n                                                    index + 1\r\n                                                }.png`}\r\n                                            />\r\n                                        )}\r\n                                    </Box>\r\n                                    <Box flexGrow=\"1\" ml=\"0.5rem\">\r\n                                        <Box\r\n                                            mt=\"0.3rem\"\r\n                                            height=\"40%\"\r\n                                            width={`${\r\n                                                ((eachMember.point - start) /\r\n                                                    (end - start)) *\r\n                                                100\r\n                                            }%`}\r\n                                            style={{\r\n                                                backgroundColor:\r\n                                                    COLOR_SET[\r\n                                                        index >= 5 ? 4 : index\r\n                                                    ],\r\n                                            }}\r\n                                        />\r\n                                        <Typography className={classes.money}>\r\n                                            {eachMember.point}원\r\n                                        </Typography>\r\n                                    </Box>\r\n                                    <Typography className={classes.text}>\r\n                                        {eachMember.nickname}\r\n                                    </Typography>\r\n                                </Box>\r\n                            );\r\n                        })}\r\n                    </Grid>\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GivingComponentDonationMember;\r\n","import { Box, Card, CardContent, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Pie } from 'react-chartjs-2';\r\nimport { getGivingNameFromId } from '../Common/util';\r\nimport { COLOR_SET, DonationCategory } from './DataModel';\r\n\r\ninterface GivingComponentDonationPieProps {\r\n    donationStatus: DonationCategory[];\r\n}\r\n\r\nconst GivingComponentDonationPie: React.FC<GivingComponentDonationPieProps> = ({\r\n    donationStatus,\r\n}: GivingComponentDonationPieProps) => {\r\n    const sortData = donationStatus\r\n        .filter((data) => data.totalDonationCount !== 0)\r\n        .sort((d1, d2) => {\r\n            return d2.totalDonationCount - d1.totalDonationCount;\r\n        });\r\n\r\n    const data = {\r\n        labels: new Array<string>(),\r\n        datasets: [\r\n            {\r\n                data: new Array<number>(),\r\n                backgroundColor: new Array<string>(),\r\n                borderColor: new Array<string>(),\r\n            },\r\n        ],\r\n    };\r\n\r\n    const options = {\r\n        maintainAspectRatio: false,\r\n        responsive: false,\r\n        plugins: {\r\n            legend: {\r\n                position: 'right',\r\n                labels: {\r\n                    fontSize: 12,\r\n                    boxWidth: 12,\r\n                    usePointStyle: true,\r\n                },\r\n                onClick: null,\r\n            },\r\n        },\r\n        animation: {\r\n            duration: 0,\r\n        },\r\n    };\r\n\r\n    sortData.forEach((eachData, index) => {\r\n        data.labels.push(getGivingNameFromId(eachData.donationId));\r\n        data.datasets[0].data.push(eachData.totalDonationCount);\r\n        data.datasets[0].backgroundColor.push(COLOR_SET[index]);\r\n        data.datasets[0].borderColor.push('#00000000');\r\n    });\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_b txt_20\">기부 현황</Typography>\r\n                <Box mt=\"1rem\">\r\n                    <Pie\r\n                        width={250}\r\n                        height={160}\r\n                        options={options}\r\n                        type=\"pie\"\r\n                        data={data}\r\n                    />\r\n                </Box>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GivingComponentDonationPie;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { getNumberString } from '../Common/util';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '36px',\r\n        textAlign: 'center',\r\n    },\r\n    button: {\r\n        flexGrow: 1,\r\n        flexBasis: 0,\r\n        borderRadius: '0.5rem',\r\n        backgroundColor: '#3BAAD8',\r\n        color: 'white',\r\n    },\r\n}));\r\n\r\ninterface GivingComponentStatusProps {\r\n    money: number;\r\n}\r\n\r\nconst GivingComponentStatus: React.FC<GivingComponentStatusProps> = ({\r\n    money,\r\n}: GivingComponentStatusProps) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const onClick = () => {\r\n        history.push('/chain-select');\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_20\">이번달에 모인</Typography>\r\n                <Typography className=\"txt_b txt_20\">\r\n                    총 기부액이에요!\r\n                </Typography>\r\n                <Box mt=\"20px\">\r\n                    <Typography\r\n                        className={`txt_primaryBlue2 ${classes.moneyFont}`}\r\n                    >\r\n                        {getNumberString(money)}원\r\n                    </Typography>\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Button onClick={onClick} className={classes.button}>\r\n                    실시간 기부 상황 보기\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default GivingComponentStatus;\r\n","import { Box } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { GivingResultState } from '../../recoil/Giving';\r\nimport Loading from '../Common/Loading';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\nimport GivingComponentDonationMember from './GivingComponentDonationMember';\r\nimport GivingComponentDonationPie from './GivingComponentDonationPie';\r\nimport GivingComponentStatus from './GivingComponentStatus';\r\n\r\nconst GivingComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const [givingData, setGivingData] = useRecoilState(GivingResultState);\r\n\r\n    useEffect(() => {\r\n        http.get('/api/trading/donation/statistics').then((res) => {\r\n            setGivingData({\r\n                isLoaded: true,\r\n                ...res.data.data,\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"기부 동참하기\"\r\n        >\r\n            {givingData.isLoaded ? (\r\n                <>\r\n                    <Box mt=\"1rem\">\r\n                        <GivingComponentStatus\r\n                            money={givingData.totalDonationMoney}\r\n                        />\r\n                    </Box>\r\n                    <Box mt=\"1rem\">\r\n                        <GivingComponentDonationPie\r\n                            donationStatus={givingData.donationRatioStatus}\r\n                        />\r\n                    </Box>\r\n                    <Box my=\"1rem\">\r\n                        <GivingComponentDonationMember\r\n                            donationMember={givingData.memberDTOs}\r\n                        />\r\n                    </Box>\r\n                </>\r\n            ) : (\r\n                <Loading />\r\n            )}\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingComponent;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst GivingExplanComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"블록쌓기에 동참할래요!\"\r\n        >\r\n            <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n                <Box mt=\"25px\" />\r\n                <Typography className=\"txt_20\">우리핏 베네핏은</Typography>\r\n                <Typography className=\"txt_20 txt_b\">\r\n                    블록체인 기술로\r\n                </Typography>\r\n                <Typography className=\"txt_20 txt_b\">\r\n                    기부를 할 때마다 블록으로 만들어요.\r\n                </Typography>\r\n                <br />\r\n\r\n                <Typography className=\"txt_20\">\r\n                    함께 하나씩 블록을 쌓아\r\n                </Typography>\r\n                <Typography className=\"txt_20\">\r\n                    높은 빌딩을 만들어 기부하세요.\r\n                </Typography>\r\n\r\n                <Box flexGrow=\"1\" />\r\n                <p className=\"txt_center\">\r\n                    <img\r\n                        className=\"img_rending\"\r\n                        src=\"/images/blockchain_before.png\"\r\n                    />\r\n                </p>\r\n                <Box mb=\"45px\" />\r\n            </Box>\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingExplanComponent;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { CommonInterface } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst GivingFinishComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={true}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"홈으로 이동\"\r\n        >\r\n            <Box display=\"flex\" flexDirection=\"column\" height=\"100%\">\r\n                <Box mt=\"25px\" />\r\n                <Typography className=\"txt_20 txt_b\">\r\n                    기부 블록이 만들어졌어요!\r\n                </Typography>\r\n                <Typography className=\"txt_20\">\r\n                    {userInfo.nickname}님의 나눔으로\r\n                </Typography>\r\n                <Typography className=\"txt_20\">\r\n                    세상이 한 층 더 밝아졌어요!\r\n                </Typography>\r\n                <br />\r\n                <Typography className=\"txt_20\">\r\n                    {userInfo.nickname}님의 기부블록이 기부빌딩에\r\n                </Typography>\r\n                <Typography className=\"txt_20\">\r\n                    쌓여지면 알람으로 공유됩니다.\r\n                </Typography>\r\n                <Box flexGrow=\"1\" />\r\n                <p className=\"txt_center\">\r\n                    <img\r\n                        className=\"img_rending\"\r\n                        src=\"/images/blockchain_after.png\"\r\n                    />\r\n                </p>\r\n                <Box mb=\"45px\" />\r\n            </Box>\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingFinishComponent;\r\n","import React, { ChangeEvent } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { GivingSelectState } from '../../recoil/Giving';\r\nimport SelectList from '../Common/SelectList';\r\nimport { CommonInterface, GivingDataSet, GivingStandInfo } from './DataModel';\r\nimport GivingCommon from './GivingCommon';\r\n\r\nconst GivingSelectComponent: React.FC<CommonInterface> = ({\r\n    index,\r\n    onMoveClick,\r\n}: CommonInterface) => {\r\n    const [givingData, setGivingData] = useRecoilState(GivingSelectState);\r\n\r\n    const onChange = (\r\n        data: GivingDataSet,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        console.log('Clicked');\r\n        if (event.currentTarget.checked) {\r\n            setGivingData([data]);\r\n        } else {\r\n            setGivingData([]);\r\n        }\r\n    };\r\n    console.log(givingData);\r\n    return (\r\n        <GivingCommon\r\n            headerTitle=\"기부하기\"\r\n            isLast={false}\r\n            buttonDisable={givingData.length === 0}\r\n            onMoveClick={(nextMove: number) => {\r\n                onMoveClick(index + nextMove);\r\n            }}\r\n            buttonTitle=\"다음\"\r\n        >\r\n            <p className=\"txt_20\">관심있는 카테고리 하나를 골라</p>\r\n            <p className=\"txt_20 txt_b\">기부하세요.</p>\r\n            <SelectList\r\n                selectData={givingData}\r\n                standardData={GivingStandInfo}\r\n                onChange={onChange}\r\n            />\r\n        </GivingCommon>\r\n    );\r\n};\r\n\r\nexport default GivingSelectComponent;\r\n","import React, { useRef } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport { useResetRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport GivingAmountComponent from '../component/Giving/GivingAmountComponent';\r\nimport GivingComponent from '../component/Giving/GivingComponent';\r\nimport GivingExplanComponent from '../component/Giving/GivingExplanComponent';\r\nimport GivingFinishComponent from '../component/Giving/GivingFinishComponent';\r\nimport GivingSelectComponent from '../component/Giving/GivingSelectComponent';\r\nimport { GivingAmountState, GivingSelectState } from '../recoil/Giving';\r\n\r\nconst GivingPage: React.FC = () => {\r\n    const sliderRef = useRef<Slider>(null);\r\n    const history = useHistory();\r\n    const resetSelect = useResetRecoilState(GivingSelectState);\r\n    const resetAmount = useResetRecoilState(GivingAmountState);\r\n\r\n    const onNextMove = (nextMove: number) => {\r\n        if (nextMove < 0) {\r\n            resetSelect();\r\n            resetAmount();\r\n            history.goBack();\r\n            return;\r\n        }\r\n\r\n        if (nextMove > 4) {\r\n            history.replace('/homepage');\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(nextMove);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <Slider {...commonSlickSettings} ref={sliderRef}>\r\n                <GivingComponent index={0} onMoveClick={onNextMove} />\r\n                <GivingExplanComponent index={1} onMoveClick={onNextMove} />\r\n                <GivingSelectComponent index={2} onMoveClick={onNextMove} />\r\n                <GivingAmountComponent index={3} onMoveClick={onNextMove} />\r\n                <GivingFinishComponent index={4} onMoveClick={onNextMove} />\r\n            </Slider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GivingPage;\r\n","import { AppBar, Box, Toolbar, Typography } from '@material-ui/core';\r\nimport React, { PropsWithChildren } from 'react';\r\n\r\nexport interface HeaderDeafaultProps {\r\n    icon: JSX.Element;\r\n    title: string;\r\n}\r\n\r\ntype HeaderDefaultType = PropsWithChildren<HeaderDeafaultProps>;\r\n\r\nconst HeaderDeafault: React.FC<HeaderDefaultType> = (\r\n    props: HeaderDefaultType\r\n) => {\r\n    return (\r\n        <AppBar position=\"sticky\" style={{ backgroundColor: '#F1F4F7' }}>\r\n            <Toolbar>\r\n                {props.icon}\r\n                <Box ml=\"0.5rem\">\r\n                    <Typography\r\n                        style={{\r\n                            fontWeight: 'bold',\r\n                            fontSize: '1.3rem',\r\n                        }}\r\n                    >\r\n                        {props.title}\r\n                    </Typography>\r\n                </Box>\r\n            </Toolbar>\r\n            {props.children}\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default HeaderDeafault;\r\n","import { IconButton, makeStyles, Paper } from '@material-ui/core';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginRight: '5%',\r\n        marginLeft: '5%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n    input: {\r\n        marginLeft: theme.spacing(1),\r\n        flex: 1,\r\n    },\r\n    img: {\r\n        width: '1rem',\r\n        height: '1rem',\r\n        margin: '0.5rem',\r\n    },\r\n}));\r\n\r\nexport interface HomeBenefitInputTextProps {\r\n    inputText: string;\r\n    onChange: (value: string) => void;\r\n}\r\n\r\nconst HomeBenefitInputText: React.FC<HomeBenefitInputTextProps> = (\r\n    props: HomeBenefitInputTextProps\r\n) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Paper component=\"form\" className={classes.root}>\r\n            <img className={classes.img} src=\"/images/ICON_Search.png\" />\r\n            <InputBase\r\n                onKeyPress={(e) => {\r\n                    e.key === 'Enter' && e.preventDefault();\r\n                }}\r\n                className={classes.input}\r\n                value={props.inputText}\r\n                onChange={(event) => {\r\n                    props.onChange(event.target.value);\r\n                }}\r\n                placeholder=\"기업이나 제품들을 검색하세요.\"\r\n                inputProps={{ 'aria-label': 'search google maps' }}\r\n            />\r\n            {props.inputText.length > 0 && (\r\n                <IconButton\r\n                    onClick={() => {\r\n                        props.onChange('');\r\n                    }}\r\n                >\r\n                    <img\r\n                        className={classes.img}\r\n                        src=\"/images/ICON_Close_Button.png\"\r\n                    />\r\n                </IconButton>\r\n            )}\r\n        </Paper>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitInputText;\r\n","import {\r\n    Card,\r\n    CardActionArea,\r\n    CardContent,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { BenefitCompany } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    commonHeart: {\r\n        fontSize: '0.8rem !important',\r\n        color: 'gray',\r\n    },\r\n    selectedHeart: {\r\n        color: 'red !important',\r\n    },\r\n}));\r\n\r\nconst HomBenefitCompany: React.FC<BenefitCompany> = (props: BenefitCompany) => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    return (\r\n        <Card>\r\n            <CardActionArea\r\n                onClick={() => {\r\n                    history.push(\r\n                        `/benefit-company/${encodeURI(props.companyName)}`\r\n                    );\r\n                }}\r\n            >\r\n                <CardContent>\r\n                    <Grid container wrap=\"nowrap\">\r\n                        <Grid container>\r\n                            <Typography className=\"txt_b txt_20\">\r\n                                {props.companyName}\r\n                            </Typography>\r\n                            <Typography className=\"txt_14\">\r\n                                {props.description}\r\n                            </Typography>\r\n                            <Grid>\r\n                                {props.userLike ? (\r\n                                    <FavoriteIcon\r\n                                        className={`${classes.commonHeart} ${classes.selectedHeart}`}\r\n                                    />\r\n                                ) : (\r\n                                    <FavoriteBorderIcon\r\n                                        className={classes.commonHeart}\r\n                                    />\r\n                                )}\r\n                                <Typography\r\n                                    style={{\r\n                                        marginLeft: '0.4rem',\r\n                                        display: 'inline-block',\r\n                                    }}\r\n                                    className=\"txt_14 txt_gray1\"\r\n                                >\r\n                                    {props.totalLike}\r\n                                </Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid>\r\n                            <img\r\n                                src={`/images/company/150_${props.thumbNailPath}`}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HomBenefitCompany;\r\n","import Box from '@material-ui/core/Box';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport {\r\n    BenefitFavoriteState,\r\n    BenefitStateCompany,\r\n} from '../../recoil/Benefit';\r\nimport { getCategoryNameFromId } from '../Common/util';\r\nimport { BenefitCompany } from './DataModel';\r\nimport HomBenefitCompany from './HomBenefitCompany';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        '&:first-child': {\r\n            marginTop: 0,\r\n        },\r\n    },\r\n}));\r\n\r\nexport interface HomeBenefitSearchListProps {\r\n    searchText: string;\r\n}\r\n\r\nconst HomeBenefitSearchList: React.FC<HomeBenefitSearchListProps> = ({\r\n    searchText,\r\n}: HomeBenefitSearchListProps) => {\r\n    const classes = useStyles();\r\n    const benefitCompany = useRecoilValue(BenefitStateCompany);\r\n    const benefitFavoriteCompany = useRecoilValue(BenefitFavoriteState);\r\n    const [renderValue, setRenderValue] = useState<\r\n        Omit<BenefitCompany, 'userLike'>[]\r\n    >();\r\n\r\n    useEffect(() => {\r\n        const filterData = benefitCompany.data.filter((eachData) => {\r\n            const categoryName = getCategoryNameFromId(eachData.categoryId);\r\n            console.log(\r\n                `Current Category Name ${categoryName} ${eachData.companyName} ${searchText}`\r\n            );\r\n            return (\r\n                categoryName.includes(searchText) ||\r\n                eachData.companyName.includes(searchText)\r\n            );\r\n        });\r\n        setRenderValue(filterData);\r\n    }, [searchText]);\r\n\r\n    return (\r\n        <>\r\n            {renderValue?.map((eachData) => {\r\n                return (\r\n                    <Box key={eachData.companyName} className={classes.root}>\r\n                        <HomBenefitCompany\r\n                            companyName={eachData.companyName}\r\n                            categoryId={eachData.categoryId}\r\n                            description={eachData.description}\r\n                            thumbNailPath={eachData.thumbNailPath}\r\n                            totalLike={eachData.totalLike}\r\n                            userLike={\r\n                                !!benefitFavoriteCompany[eachData.companyName]\r\n                            }\r\n                        />\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitSearchList;\r\n","import Box from '@material-ui/core/Box';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport {\r\n    BenefitFavoriteState,\r\n    BenefitStateCompany,\r\n} from '../../recoil/Benefit';\r\nimport { BenefitCompany } from './DataModel';\r\nimport HomBenefitCompany from './HomBenefitCompany';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        '&:first-child': {\r\n            marginTop: 0,\r\n        },\r\n    },\r\n}));\r\n\r\nexport interface HomeBenefitListProps {\r\n    categoryId: number;\r\n}\r\n\r\nconst HomeBenefitList: React.FC<HomeBenefitListProps> = (\r\n    props: HomeBenefitListProps\r\n) => {\r\n    const classes = useStyles();\r\n    const benefitCompany = useRecoilValue(BenefitStateCompany);\r\n    const benefitFavoriteCompany = useRecoilValue(BenefitFavoriteState);\r\n    const [renderValue, setRenderValue] = useState<\r\n        Omit<BenefitCompany, 'userLike'>[]\r\n    >();\r\n\r\n    useEffect(() => {\r\n        const filterData = benefitCompany.data.filter((eachData) => {\r\n            return eachData.categoryId === props.categoryId;\r\n        });\r\n        setRenderValue(filterData);\r\n    }, [benefitCompany.data]);\r\n\r\n    return (\r\n        <>\r\n            {renderValue?.map((eachData) => {\r\n                return (\r\n                    <Box key={eachData.companyName} className={classes.root}>\r\n                        <HomBenefitCompany\r\n                            companyName={eachData.companyName}\r\n                            categoryId={eachData.categoryId}\r\n                            description={eachData.description}\r\n                            thumbNailPath={eachData.thumbNailPath}\r\n                            totalLike={eachData.totalLike}\r\n                            userLike={\r\n                                !!benefitFavoriteCompany[eachData.companyName]\r\n                            }\r\n                        />\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitList;\r\n","import Box from '@material-ui/core/Box';\r\nimport { makeStyles, Theme } from '@material-ui/core/styles';\r\nimport React, { useRef } from 'react';\r\nimport Slider from 'react-slick';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { BenefitSlideNumber } from '../../recoil/Benefit';\r\nimport { CategoryStandInfo } from '../Category/DataModel';\r\nimport { commonSlickSettings } from '../Common';\r\nimport HomeBenefitList from './HomeBenefitList';\r\n\r\ninterface TabPanelProps {\r\n    children?: React.ReactNode;\r\n    index: any;\r\n    value: any;\r\n}\r\n\r\nfunction TabPanel(props: TabPanelProps) {\r\n    const { children, value, index, ...other } = props;\r\n\r\n    return (\r\n        <div\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            <Box style={{ backgroundColor: '#F1F4F7' }} p={3}>\r\n                {children}\r\n            </Box>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) => ({\r\n    root: {\r\n        backgroundColor: 'rgb(250, 251, 252)',\r\n    },\r\n}));\r\n\r\nconst HomeBenefitSlider: React.FC = () => {\r\n    const classes = useStyles();\r\n    const page = useRecoilValue(BenefitSlideNumber);\r\n    const sliderRef = useRef<Slider>(null);\r\n    sliderRef.current && sliderRef.current.slickGoTo(page);\r\n    const override = commonSlickSettings;\r\n    override.speed = 100;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Slider {...override} ref={sliderRef}>\r\n                {CategoryStandInfo.map((eachData, index) => {\r\n                    return (\r\n                        <TabPanel key={page} value={page} index={index}>\r\n                            <HomeBenefitList categoryId={eachData.id} />\r\n                        </TabPanel>\r\n                    );\r\n                })}\r\n            </Slider>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitSlider;\r\n","export enum SIGNUP_TYPE {\r\n    PROFILE,\r\n    ACCOUNT,\r\n    ADD_CATEGORY,\r\n    BILL_INFO,\r\n    PASSWORD,\r\n}\r\n\r\nexport interface SignupAccountInterface {\r\n    ACCT_KND: string;\r\n    ACNO: string;\r\n    ACT_STCD: string;\r\n    ADNT_RGS_YN: string;\r\n    CUCD: string;\r\n    FAXC_BAL: string;\r\n    NEW_DT: string;\r\n    PBOK_BAL: string;\r\n    PRD_NM: string;\r\n    PSKL_ACT_YN: string;\r\n    XPR_DT: string;\r\n}\r\n\r\nexport interface SignupProfileInterface {\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\nexport interface SignupComponentProps {\r\n    checkCurrent?: boolean;\r\n    onMoveButtonClick: (move: number) => void;\r\n}\r\n\r\nexport interface SignupProfileInfo {\r\n    realName: string;\r\n    nickName: string;\r\n    cellNumber: string;\r\n}\r\n\r\nexport const rendingData: Array<SignupProfileInterface> = [\r\n    {\r\n        title: '이름을 알려주세요.',\r\n        description: '이름',\r\n    },\r\n    {\r\n        title: '닉네임을 정해주세요.',\r\n        description: '닉네임',\r\n    },\r\n];\r\n","import { Box, Tab, Tabs } from '@material-ui/core';\r\nimport StorefrontIcon from '@material-ui/icons/Storefront';\r\nimport React, { ChangeEvent, useEffect } from 'react';\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    BenefitFavoriteState,\r\n    BenefitSlideNumber,\r\n    BenefitStateCompany,\r\n} from '../../recoil/Benefit';\r\nimport { BenefitSearch, CurrentUserState } from '../../recoil/Session';\r\nimport { CategoryStandInfo } from '../Category/DataModel';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport { a11yProps } from '../Common/util';\r\nimport {\r\n    BenefitCompany,\r\n    BenefitCompanyRes,\r\n    BenefitFavoriteCompany,\r\n} from './DataModel';\r\nimport HomeBenefitInputText from './HomeBenefitInputText';\r\nimport HomeBenefitSearchList from './HomeBenefitSearchList';\r\nimport HomeBenefitSlider from './HomeBenefitSlider';\r\n\r\nconst HomeBenefitComponent: React.FC = () => {\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n\r\n    const [searchText, setSearchText] = useRecoilState(BenefitSearch);\r\n    const [benefitCompany, setBenefitCompany] = useRecoilState(\r\n        BenefitStateCompany\r\n    );\r\n    const setFavoriteState = useSetRecoilState(BenefitFavoriteState);\r\n\r\n    useEffect(() => {\r\n        if (benefitCompany.isLoaded) {\r\n            return;\r\n        }\r\n\r\n        http.get(`/api/${encodeURI(userInfo.nickname)}/company`).then((res) => {\r\n            const isertArr: BenefitCompanyRes = {\r\n                isLoaded: true,\r\n                data: [],\r\n            };\r\n            const benefitData: BenefitFavoriteCompany = {};\r\n            res.data.data.forEach((eachData: BenefitCompany) => {\r\n                isertArr.data.push({\r\n                    categoryId: eachData.categoryId,\r\n                    companyName: eachData.companyName,\r\n                    description: eachData.description,\r\n                    thumbNailPath: eachData.thumbNailPath\r\n                        .replace(/\\/\\//gi, '/')\r\n                        .replace(/\\.[^/.]+$/, '.png'),\r\n                    totalLike: eachData.totalLike,\r\n                });\r\n                benefitData[eachData.companyName] = eachData.userLike;\r\n            });\r\n\r\n            setBenefitCompany(isertArr);\r\n            setTimeout(() => {\r\n                setFavoriteState(benefitData);\r\n            }, 100);\r\n        });\r\n    }, []);\r\n\r\n    const onChange = (value: string) => {\r\n        setSearchText(value);\r\n    };\r\n\r\n    const [page, setPage] = useRecoilState(BenefitSlideNumber);\r\n\r\n    const tabChange = (event: ChangeEvent<any>, nextValue: number) => {\r\n        console.log(`Tab Change Called ${nextValue}`);\r\n        setPage(nextValue);\r\n    };\r\n\r\n    const isSearchMode = searchText.length !== 0;\r\n\r\n    return (\r\n        <>\r\n            <HeaderDeafault icon={<StorefrontIcon />} title=\"혜택 찾기\">\r\n                <HomeBenefitInputText\r\n                    inputText={searchText}\r\n                    onChange={onChange}\r\n                />\r\n                {!isSearchMode && (\r\n                    <Tabs\r\n                        value={page}\r\n                        onChange={tabChange}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        variant=\"scrollable\"\r\n                        scrollButtons=\"auto\"\r\n                    >\r\n                        {CategoryStandInfo.map((eachData, index) => {\r\n                            return (\r\n                                <Tab\r\n                                    key={index}\r\n                                    label={eachData.name}\r\n                                    {...a11yProps(index)}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </Tabs>\r\n                )}\r\n            </HeaderDeafault>\r\n            {isSearchMode ? (\r\n                <Box p={3}>\r\n                    <HomeBenefitSearchList searchText={searchText} />\r\n                </Box>\r\n            ) : (\r\n                <HomeBenefitSlider />\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeBenefitComponent;\r\n","import { Box, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { getCategoryImgPath, getCategoryNameFromId } from './util';\r\n\r\nexport interface CategoryIconProps {\r\n    id: number;\r\n}\r\n\r\nconst CategoryIcon: React.FC<CategoryIconProps> = (\r\n    props: CategoryIconProps\r\n) => {\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\">\r\n            <img\r\n                src={getCategoryImgPath(props.id)}\r\n                style={{ width: '3.5rem', height: '3.5rem', margin: 'auto' }}\r\n            />\r\n            <Typography style={{ textAlign: 'center' }}>\r\n                {getCategoryNameFromId(props.id)}\r\n            </Typography>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default CategoryIcon;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    CurrentUserCategoryState,\r\n    CurrentUserState,\r\n} from '../../recoil/Session';\r\nimport CategoryIcon from '../Common/CategoryIcon';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n        justifyContent: 'flex-end',\r\n    },\r\n}));\r\n\r\nconst HCPoint: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const [category, setCategory] = useRecoilState(CurrentUserCategoryState);\r\n\r\n    const onClick = () => {\r\n        console.log('Click');\r\n    };\r\n\r\n    useEffect(() => {\r\n        http.get(`/api/members/${encodeURI(userInfo.nickname)}/category`).then(\r\n            (res) => {\r\n                const resCategory = res.data.data.map(\r\n                    (eachData: any) => eachData.categoryId\r\n                );\r\n                setCategory(resCategory);\r\n            }\r\n        );\r\n    }, [userInfo]);\r\n\r\n    if (category.length === 0) {\r\n        return <></>;\r\n    }\r\n    console.log(category);\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardHeader\r\n                title={\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        내가 선택한 혜택\r\n                    </Typography>\r\n                }\r\n            />\r\n            <CardContent>\r\n                <Box display=\"flex\">\r\n                    {category.map((eachCategory: number) => {\r\n                        return (\r\n                            <Box key={eachCategory} margin=\"auto\">\r\n                                <CategoryIcon id={eachCategory} />\r\n                            </Box>\r\n                        );\r\n                    })}\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Typography onClick={onClick} variant=\"caption\">\r\n                    혜택을 바꾸고 싶나요?\r\n                </Typography>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HCPoint;\r\n","import { Box, Grid, Typography } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { getCategoryNameFromId, getNumberString } from '../Common/util';\r\nimport { TransactionSet } from './DataModel';\r\n\r\nexport interface BenefitListProps {\r\n    data: TransactionSet[];\r\n}\r\n\r\nconst extractDate = (date: string): string => {\r\n    const c = new Date(date);\r\n    const week = ['일', '월', '화', '수', '목', '금', '토'];\r\n\r\n    return `${c.getMonth()}월 ${c.getDate()} (${week[c.getDay()]})`;\r\n};\r\n\r\nconst BenefitList: React.FC<BenefitListProps> = ({\r\n    data,\r\n}: BenefitListProps) => {\r\n    return (\r\n        <>\r\n            {data.map((eachData, index, arr) => {\r\n                return (\r\n                    <Box key={index} mt={index === 0 ? '0px' : '5px'}>\r\n                        <Typography className={`txt_14`}>\r\n                            {extractDate(eachData.date)}\r\n                        </Typography>\r\n                        <Grid container style={{ marginTop: '5px' }}>\r\n                            <Grid>\r\n                                <Typography className={`txt_16`}>\r\n                                    {eachData.companyName}\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Box flexGrow=\"1\" />\r\n\r\n                            <Grid style={{ textAlign: 'right' }}>\r\n                                <Typography className={`txt_16`}>\r\n                                    {getNumberString(eachData.totalBuyPrice)}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`txt_14 txt_primaryBlue2`}\r\n                                >{`${getCategoryNameFromId(\r\n                                    eachData.categoryId\r\n                                )} 적립 ${getNumberString(\r\n                                    eachData.point\r\n                                )}`}</Typography>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {arr.length - 1 !== index && (\r\n                            <div className=\"line bg_gray3 mg_t20\" />\r\n                        )}\r\n                    </Box>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default BenefitList;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useRecoilState, useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    CurrentUserCategoryState,\r\n    CurrentUserState,\r\n    CurrentUserTransactionState,\r\n} from '../../recoil/Session';\r\nimport BenefitList from './BenefitList';\r\nimport { TransactionSet } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst DISPLAY_COUNT = 3;\r\n\r\nconst HCPoint: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const userCategory = useRecoilValue(CurrentUserCategoryState);\r\n    const [transaction, setTransaction] = useRecoilState(\r\n        CurrentUserTransactionState\r\n    );\r\n    const [displaySet, setDisplaySet] = useState<TransactionSet[]>([]);\r\n\r\n    useEffect(() => {\r\n        http.get(`/api/trading/benefits/${encodeURI(userInfo.nickname)}`).then(\r\n            (res) => {\r\n                let data: TransactionSet[] = [];\r\n                data = res.data.data;\r\n                data = data.filter((eachData) => {\r\n                    return userCategory.includes(eachData.categoryId);\r\n                });\r\n                setDisplaySet(data.slice(0, DISPLAY_COUNT));\r\n                setTransaction(data);\r\n            }\r\n        );\r\n    }, [userCategory]);\r\n\r\n    if (displaySet.length === 0) {\r\n        return <></>;\r\n    }\r\n\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardHeader title={<Typography>혜택 적립 내역</Typography>} />\r\n            <CardContent>\r\n                <BenefitList data={displaySet} />\r\n            </CardContent>\r\n            {transaction.length > DISPLAY_COUNT && (\r\n                <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                    <Button\r\n                        className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                    >\r\n                        이용 내역 더 보기\r\n                    </Button>\r\n                </CardActions>\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HCPoint;\r\n","import {\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { getNumberString } from '../Common/util';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    moneyFont: {\r\n        fontSize: '26px',\r\n        fontFamily: '\"Recursive\", sans-serif !important',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst HCStatus: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [userInfo, setUserInfo] = useRecoilState(CurrentUserState);\r\n    //const [account, setAccount] = useRecoilState(CurrentAccountState);\r\n\r\n    useEffect(() => {\r\n        if (userInfo.nickname) {\r\n            http.get(`/api/members/${encodeURI(userInfo.nickname)}`).then(\r\n                (res) => {\r\n                    setUserInfo({\r\n                        ...userInfo,\r\n                        accountMoney: res.data.data.accountMoney,\r\n                        point: res.data.data.point,\r\n                    });\r\n                }\r\n            );\r\n        }\r\n    }, []);\r\n\r\n    const onGivingClick = () => {\r\n        history.push('/giving');\r\n    };\r\n\r\n    return (\r\n        <Card style={{ backgroundColor: '#62C3EB', borderRadius: '0.5rem' }}>\r\n            <CardContent>\r\n                <Typography className={classes.dfColor}>\r\n                    {`${userInfo.nickname}님의`}\r\n                    <br />\r\n                    혜택통 현황입니다.\r\n                </Typography>\r\n                <Typography\r\n                    className={`${classes.inline} ${classes.moneyFont} ${classes.dfColor}`}\r\n                >\r\n                    {getNumberString(userInfo.point)}\r\n                </Typography>\r\n                <Typography className={`${classes.inline} ${classes.dfColor}`}>\r\n                    원\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Button\r\n                    disabled={userInfo.point === 0}\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                >\r\n                    내 계좌로 인출\r\n                </Button>\r\n                <Button\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                    onClick={onGivingClick}\r\n                >\r\n                    기부하기\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default HCStatus;\r\n","import { Box } from '@material-ui/core';\r\nimport HomeIcon from '@material-ui/icons/Home';\r\nimport React from 'react';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport HCBenefit from './HCBenefit';\r\nimport HCPoint from './HCPoint';\r\nimport HCStatus from './HCStatus';\r\n\r\nconst HomeComponent: React.FC = () => {\r\n    return (\r\n        <>\r\n            <HeaderDeafault icon={<HomeIcon />} title=\"홈\" />\r\n            <Box mx=\"1rem\" overflow=\"hiddne\">\r\n                <Box mt=\"1rem\">\r\n                    <HCStatus />\r\n                </Box>\r\n                <Box mt=\"1rem\">\r\n                    <HCBenefit />\r\n                </Box>\r\n                <Box my=\"1rem\">\r\n                    <HCPoint />\r\n                </Box>\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default HomeComponent;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    CardHeader,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserCategoryState } from '../../recoil/Session';\r\nimport CategoryIcon from '../Common/CategoryIcon';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n        justifyContent: 'flex-end',\r\n    },\r\n}));\r\n\r\nconst SettingBenefit: React.FC = () => {\r\n    const classes = useStyles();\r\n    const category = useRecoilValue(CurrentUserCategoryState);\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardHeader\r\n                title={\r\n                    <Typography className=\"txt_20 txt_b\">\r\n                        내가 선택한 혜택\r\n                    </Typography>\r\n                }\r\n            />\r\n            <CardContent>\r\n                <Box display=\"flex\">\r\n                    {category.map((eachCategory: number) => {\r\n                        return (\r\n                            <Box key={eachCategory} margin=\"auto\">\r\n                                <CategoryIcon id={eachCategory} />\r\n                            </Box>\r\n                        );\r\n                    })}\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Button\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                >\r\n                    혜택 바꾸기\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SettingBenefit;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { getNumberString } from '../Common/util';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dfColor: {\r\n        color: 'white',\r\n    },\r\n    buttonLayout: {\r\n        backgroundColor: '#3BAAD8',\r\n        borderRadius: '0.5rem',\r\n        flexBasis: 0,\r\n        flexGrow: 1,\r\n    },\r\n    moneyFont: {\r\n        fontFamily: '\"Recursive\", sans-serif !important',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst SettingStatus: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    //const [account, setAccount] = useRecoilState(CurrentAccountState);\r\n\r\n    return (\r\n        <Card style={{ borderRadius: '0.5rem' }}>\r\n            <CardContent>\r\n                <Typography className=\"txt_20 txt_b\">계좌정보</Typography>\r\n                <Typography className=\"txt_gray1 pd_t10\">\r\n                    {userInfo.accountNumber}\r\n                </Typography>\r\n                <Box textAlign=\"end\">\r\n                    <Typography className={`txt_16 ${classes.inline}`}>\r\n                        잔액\r\n                    </Typography>\r\n                    <Typography\r\n                        className={`txt_32 ${classes.inline} ${classes.moneyFont}`}\r\n                    >\r\n                        {getNumberString(userInfo.accountMoney)}\r\n                    </Typography>\r\n                    <Typography className={`${classes.inline} `}>원</Typography>\r\n                </Box>\r\n            </CardContent>\r\n            <CardActions classes={{ root: classes.cardActionLayout }}>\r\n                <Button\r\n                    className={`${classes.buttonLayout} ${classes.dfColor}`}\r\n                >\r\n                    계좌 변경\r\n                </Button>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default SettingStatus;\r\n","import { Box, Divider, makeStyles, Typography } from '@material-ui/core';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport FeedbackIcon from '@material-ui/icons/Feedback';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport React from 'react';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport SettingBenefit from './SettingBenefit';\r\nimport SettingStatus from './SettingStatus';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    container: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n    },\r\n    containerOuter: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        paddingTop: '13px',\r\n        paddingBottom: '13px',\r\n    },\r\n    iconSize: {\r\n        fontSize: '1.5rem !important',\r\n    },\r\n}));\r\n\r\nconst SettingComponent: React.FC = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <HeaderDeafault icon={<SettingsIcon />} title=\"마이 페이지\" />\r\n            <Box mx=\"1rem\" overflow=\"hiddne\">\r\n                <Box mt=\"1rem\">\r\n                    <SettingStatus />\r\n                </Box>\r\n                <Box mt=\"1rem\">\r\n                    <SettingBenefit />\r\n                </Box>\r\n                <Box display=\"flex\" flexDirection=\"column\">\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <PersonIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                홈\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <CheckCircleIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                구독 관리\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <FeedbackIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                공지사항\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                    <Divider />\r\n                    <Box className={classes.containerOuter}>\r\n                        <Box className={classes.container}>\r\n                            <EmailIcon className={classes.iconSize} />\r\n                        </Box>\r\n                        <Box className={classes.container}>\r\n                            <Typography className=\"mg_l10 txt_16\">\r\n                                문의하기\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow=\"1\" />\r\n                        <ChevronRightIcon />\r\n                    </Box>\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SettingComponent;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardActions,\r\n    CardContent,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '24px',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst TCNoFriend: React.FC = () => {\r\n    const history = useHistory();\r\n    const onAddFriend = (event: any) => {\r\n        history.push('/add-friend');\r\n        event.preventDefault();\r\n        if (window && window.parent) {\r\n            window.parent.postMessage('child;;;requestPhoneNumber', '*');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                border: 'solid',\r\n                borderWidth: '2px',\r\n                borderColor: '#62C3EB',\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"txt_14\">\r\n                    투게더를 통해 친구들과 함께 혜택통을 즐길 수 있어요. 지금\r\n                    시작해볼까요?\r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions style={{ justifyContent: 'flex-end' }}>\r\n                <Box mr=\"13px\">\r\n                    <Button\r\n                        onClick={onAddFriend}\r\n                        className=\"btn_blue txt_wh txt_14\"\r\n                    >\r\n                        시작\r\n                    </Button>\r\n                </Box>\r\n            </CardActions>\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TCNoFriend;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { TogetherAVGState } from '../../recoil/Together';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '24px',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst TCRanking: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const avgInfo = useRecoilValue(TogetherAVGState);\r\n\r\n    return (\r\n        <Card\r\n            style={{\r\n                marginBottom: '15px',\r\n                borderRadius: '0.5rem',\r\n            }}\r\n        >\r\n            {avgInfo.aveRank >= 0 ? (\r\n                <>\r\n                    <CardHeader\r\n                        title={\r\n                            <Box>\r\n                                <Typography\r\n                                    className={`txt_b txt_20 ${classes.inline}`}\r\n                                >\r\n                                    {`${userInfo.nickname}님 `}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`txt_16 ${classes.inline}`}\r\n                                >\r\n                                    의 혜택통 순위입니다.\r\n                                </Typography>\r\n                            </Box>\r\n                        }\r\n                    />\r\n                    <CardContent>\r\n                        <Box mt=\"30px\">\r\n                            <Grid container>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_center\">\r\n                                        나\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            상위\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            className={`${classes.moneyFont} txt_primaryBlue`}\r\n                                        >\r\n                                            {avgInfo.myRank}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            %\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_center\">\r\n                                        모든 사용자 평균\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            {'상위 '}\r\n                                        </Typography>\r\n                                        <Typography\r\n                                            className={`${classes.moneyFont}`}\r\n                                        >\r\n                                            {avgInfo.aveRank}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_16 txt_line\">\r\n                                            %\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </CardContent>\r\n                </>\r\n            ) : (\r\n                <LoaderComponent color=\"black\" />\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TCRanking;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilValue } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\nimport { COLOR_SET } from '../Giving/DataModel';\r\nimport { RankingDataSet } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    text: {\r\n        display: 'inline-block',\r\n        maxWidth: '55px',\r\n        minWidth: '50px',\r\n        whiteSpace: 'nowrap',\r\n        textAlign: 'right',\r\n        overflow: 'hidden !important',\r\n        textOverflow: 'ellipsis',\r\n    },\r\n    money: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif\",\r\n        fontSize: '17px',\r\n    },\r\n}));\r\n\r\nconst MAX_SHOW_MEMBER = 8;\r\n\r\nconst getRage = (sortMemger: RankingDataSet[]): [number, number] => {\r\n    if (sortMemger.length >= 1) {\r\n        const maxValueLen = sortMemger[0].friendPoint;\r\n        const minValueLen = sortMemger[sortMemger.length - 1].friendPoint;\r\n\r\n        const max = maxValueLen * 1.1;\r\n        const min = minValueLen * 0.9;\r\n        return [min, max];\r\n    } else {\r\n        return [0, 0];\r\n    }\r\n};\r\n\r\nconst TCRankList: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const [titleStr, setTitleStr] = useState<string[]>([]);\r\n    const [rankList, setRankList] = useState<RankingDataSet[]>([]);\r\n    const [isLoad, setIsLoad] = useState<boolean>(false);\r\n    const [start, end] = getRage(rankList);\r\n    console.log(`${start} ${end}`);\r\n    useEffect(() => {\r\n        http.get(`/api/rank/friends/${userInfo.nickname}`).then((res) => {\r\n            console.log(res);\r\n            const insertData: RankingDataSet[] = [];\r\n            res.data.data.forEach((eachData: RankingDataSet, index: number) => {\r\n                const isMy: boolean =\r\n                    eachData.friendNickname === userInfo.nickname;\r\n                insertData.push(\r\n                    isMy ? { ...eachData, friendNickname: '나' } : eachData\r\n                );\r\n                if (isMy) {\r\n                    if (index === 0) {\r\n                        setTitleStr([\r\n                            '대단한데요?',\r\n                            '친구들 중에서 1등이에요!',\r\n                        ]);\r\n                    } else if (index === 1) {\r\n                        setTitleStr([\r\n                            '와! 잘하고 있어요!',\r\n                            '1등을 향해 가즈아~',\r\n                        ]);\r\n                    } else if (index === 2) {\r\n                        setTitleStr([\r\n                            '열심히 하고 있군요!',\r\n                            '좀 더 노력해봐요~',\r\n                        ]);\r\n                    } else {\r\n                        setTitleStr([\r\n                            '아직 멀었네요.',\r\n                            '착한 소비를 시도해볼까요?',\r\n                        ]);\r\n                    }\r\n                }\r\n                console.log(eachData);\r\n            });\r\n            setIsLoad(true);\r\n            setRankList(insertData.slice(0, MAX_SHOW_MEMBER));\r\n        });\r\n    }, []);\r\n\r\n    const onClick = () => {\r\n        history.push('/add-friend');\r\n    };\r\n\r\n    if (!isLoad) {\r\n        return <LoaderComponent color=\"#62C3EB\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {titleStr.map((eachString, index) => {\r\n                return (\r\n                    <Typography key={index} className=\"txt_b txt_20\">\r\n                        {eachString}\r\n                    </Typography>\r\n                );\r\n            })}\r\n\r\n            <Card\r\n                style={{\r\n                    borderRadius: '0.5rem',\r\n                    marginTop: '24px',\r\n                }}\r\n            >\r\n                <CardContent>\r\n                    <Box display=\"flex\" flexDirection=\"row\">\r\n                        <Box>\r\n                            <Typography className=\"txt_b txt_20 txt_line mg_r10\">\r\n                                친구\r\n                            </Typography>\r\n                            <Typography className=\"txt_16 txt_line\">\r\n                                {rankList.length}\r\n                            </Typography>\r\n                        </Box>\r\n                        <Box flexGrow={1} />\r\n                        <Box>\r\n                            <Button\r\n                                onClick={onClick}\r\n                                className=\"btn_blueBorder txt_14\"\r\n                            >\r\n                                추가\r\n                            </Button>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box>\r\n                        <Grid>\r\n                            {rankList.map((eachData, index) => {\r\n                                return (\r\n                                    <Box\r\n                                        display=\"flex\"\r\n                                        key={eachData.friendNickname}\r\n                                        my=\"1.5rem\"\r\n                                    >\r\n                                        <Box\r\n                                            width=\"1.5rem\"\r\n                                            height=\"2rem\"\r\n                                            position=\"relative\"\r\n                                        >\r\n                                            {index <= 2 && (\r\n                                                <img\r\n                                                    src={`/images/ICON_ranking${\r\n                                                        index + 1\r\n                                                    }.png`}\r\n                                                />\r\n                                            )}\r\n                                        </Box>\r\n                                        <Box flexGrow=\"1\" ml=\"0.5rem\">\r\n                                            <Box\r\n                                                mt=\"0.3rem\"\r\n                                                height=\"40%\"\r\n                                                width={`${\r\n                                                    ((eachData.friendPoint -\r\n                                                        start) /\r\n                                                        (end - start)) *\r\n                                                    100\r\n                                                }%`}\r\n                                                style={{\r\n                                                    backgroundColor:\r\n                                                        COLOR_SET[\r\n                                                            index >= 5\r\n                                                                ? 4\r\n                                                                : index\r\n                                                        ],\r\n                                                }}\r\n                                            />\r\n                                            <Typography\r\n                                                className={classes.money}\r\n                                            >\r\n                                                {eachData.friendPoint}원\r\n                                            </Typography>\r\n                                        </Box>\r\n                                        <Typography\r\n                                            className={`${classes.text} ${\r\n                                                eachData.friendNickname === '나'\r\n                                                    ? 'txt_primaryBlue'\r\n                                                    : ''\r\n                                            }`}\r\n                                        >\r\n                                            {eachData.friendNickname}\r\n                                        </Typography>\r\n                                    </Box>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TCRankList;\r\n","import {\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    CardHeader,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport { TogetherAVGState } from '../../recoil/Together';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    moneyFont: {\r\n        position: 'relative',\r\n        display: 'inline-block',\r\n        fontFamily: \"'Recursive', sans-serif !important\",\r\n        fontSize: '24px',\r\n    },\r\n    inline: {\r\n        display: 'inline',\r\n    },\r\n    cardActionLayout: {\r\n        padding: '16px',\r\n    },\r\n}));\r\n\r\nconst TCStatus: React.FC = () => {\r\n    const classes = useStyles();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const avgInfo = useRecoilValue(TogetherAVGState);\r\n\r\n    return (\r\n        <Card style={{ backgroundColor: '#62C3EB', borderRadius: '0.5rem' }}>\r\n            {avgInfo.aveRank >= 0 ? (\r\n                <>\r\n                    <CardHeader\r\n                        title={\r\n                            <Box>\r\n                                <Typography\r\n                                    className={`txt_b txt_20 txt_wh ${classes.inline}`}\r\n                                >\r\n                                    {`${userInfo.nickname}님 `}\r\n                                </Typography>\r\n                                <Typography\r\n                                    className={`txt_16 txt_wh ${classes.inline}`}\r\n                                >\r\n                                    이 받은 혜택\r\n                                </Typography>\r\n                            </Box>\r\n                        }\r\n                    />\r\n                    <CardContent>\r\n                        <Box mt=\"30px\">\r\n                            <Grid container>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_wh txt_center\">\r\n                                        이번 달\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography\r\n                                            className={`txt_wh ${classes.moneyFont}`}\r\n                                        >\r\n                                            {avgInfo.thisMonthBenefitPoint}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_wh txt_16 txt_line\">\r\n                                            원\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                                <Grid item xs={6}>\r\n                                    <Typography className=\"txt_14 txt_b txt_wh txt_center\">\r\n                                        지난 3개월\r\n                                    </Typography>\r\n                                    <Box pt=\"11px\" textAlign=\"center\">\r\n                                        <Typography\r\n                                            className={`txt_wh ${classes.moneyFont}`}\r\n                                        >\r\n                                            {avgInfo.ago3MonthBenefitPoint}\r\n                                        </Typography>\r\n                                        <Typography className=\"txt_wh txt_16 txt_line\">\r\n                                            원\r\n                                        </Typography>\r\n                                    </Box>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </CardContent>\r\n                </>\r\n            ) : (\r\n                <LoaderComponent color=\"white\" />\r\n            )}\r\n        </Card>\r\n    );\r\n};\r\n\r\nexport default TCStatus;\r\n","import { Box } from '@material-ui/core';\r\nimport PeopleIcon from '@material-ui/icons/People';\r\nimport React, { useEffect } from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { CurrentUserState } from '../../recoil/Session';\r\nimport {\r\n    FriendDataSetState,\r\n    TogetherAVGState,\r\n    UnUsedFriendState,\r\n    UsedFriendState,\r\n} from '../../recoil/Together';\r\nimport HeaderDeafault from '../Common/HeaderDefault';\r\nimport TCNoFriend from './TCNoFriend';\r\nimport TCRanking from './TCRanking';\r\nimport TCRankList from './TCRankList';\r\nimport TCStatus from './TCStatus';\r\n\r\nconst TogetherComponent: React.FC = () => {\r\n    const friendList = useRecoilValue(FriendDataSetState);\r\n\r\n    const co = useRecoilValue(UsedFriendState);\r\n    const co2 = useRecoilValue(UnUsedFriendState);\r\n    console.log(co);\r\n    console.log(co2);\r\n    const friendMode = friendList.length > 0;\r\n\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const setAVGInfo = useSetRecoilState(TogetherAVGState);\r\n\r\n    useEffect(() => {\r\n        if (userInfo.nickname) {\r\n            http.get(`/api/members/${userInfo.nickname}/together`).then(\r\n                (res) => {\r\n                    setAVGInfo(res.data.data);\r\n                    console.log(res);\r\n                }\r\n            );\r\n        }\r\n    }, [userInfo]);\r\n\r\n    return (\r\n        <>\r\n            <HeaderDeafault icon={<PeopleIcon />} title=\"투게더\" />\r\n            <Box mx=\"1rem\" overflow=\"hiddne\">\r\n                {friendMode && <TCRankList />}\r\n                <Box mt=\"1rem\">\r\n                    <TCStatus />\r\n                </Box>\r\n                <Box mt=\"1rem\">\r\n                    <TCRanking />\r\n                </Box>\r\n                {!friendMode && (\r\n                    <Box mt=\"1rem\">\r\n                        <TCNoFriend />\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TogetherComponent;\r\n","import { Box } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport HomeBenefitComponent from '../component/Benefit/HomeBenefitComponent';\r\nimport BottomBarNav, { DISPLAY_TYPE } from '../component/Common/BottomBar';\r\nimport HomeComponent from '../component/Home/HomeComponent';\r\nimport SettingComponent from '../component/Setting/SettingComponent';\r\nimport TogetherComponent from '../component/Together/TogetherComponent';\r\nimport { BottomNavState } from '../recoil/Session';\r\nconst homeRendering = (type: DISPLAY_TYPE) => {\r\n    switch (type) {\r\n        case DISPLAY_TYPE.HOME:\r\n            return <HomeComponent />;\r\n        case DISPLAY_TYPE.BENEFIT:\r\n            return <HomeBenefitComponent />;\r\n        case DISPLAY_TYPE.TOGETHER:\r\n            return <TogetherComponent />;\r\n        case DISPLAY_TYPE.SETTING:\r\n            return <SettingComponent />;\r\n        default:\r\n            return <></>;\r\n    }\r\n};\r\n\r\nconst HomePage: React.FC = () => {\r\n    const [renderType, setCurrentRenderType] = useRecoilState(BottomNavState);\r\n\r\n    const onChange = (type: DISPLAY_TYPE) => {\r\n        setCurrentRenderType(type);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <Box className=\"glow_body\" overflow=\"hidden\">\r\n                {homeRendering(renderType)}\r\n            </Box>\r\n            <BottomBarNav current={renderType} onChange={onChange} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n","import { IconButton, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    imgContainer: {\r\n        width: '100px',\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        width: '100%',\r\n    },\r\n    bodyReplace: {\r\n        zIndex: -1,\r\n        position: 'fixed',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n}));\r\n\r\nconst LoginPage: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const onClickGoMain = () => {\r\n        history.replace('/homepage');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={`bg_primaryblue ${classes.bodyReplace}`} />\r\n            <div className=\"container\">\r\n                <div className=\"div_rd_txt pd_t60\">\r\n                    <p className=\"txt_center\">\r\n                        <img\r\n                            style={{ width: '100px' }}\r\n                            className={`pd_t130 ${classes.imgContainer}`}\r\n                            src=\"images/Logo.png\"\r\n                        />\r\n                    </p>\r\n                    <p className=\"txt_24 txt_wh txt_center\">환영합니다!</p>\r\n                </div>\r\n\r\n                <div className=\"fingerprint_div\">\r\n                    <p className=\"txt_center\">\r\n                        <IconButton onClick={onClickGoMain}>\r\n                            <img\r\n                                className=\"fingerprint_icon\"\r\n                                src=\"/images/Fingerprint.png\"\r\n                            />\r\n                        </IconButton>\r\n                    </p>\r\n                    <p className=\"txt_16 txt_wh txt_center mg_t10\">\r\n                        로그인을 위해\r\n                        <br />\r\n                        지문으로 인증해주세요.\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n","export interface RenderComponentInterface {\r\n    title: { first: string; second: string };\r\n    description: string[];\r\n    highLight: string;\r\n    imgPath: string;\r\n}\r\n\r\nexport const rendingData: Array<RenderComponentInterface> = [\r\n    {\r\n        title: { first: '내맘대로', second: '혜택고르기!' },\r\n        description: ['정해진 틀에 맞춰서', '혜택받기는 싫어!'],\r\n        highLight: '내가 관심있는 카테고리 대로 혜택을!',\r\n        imgPath: '/images/rending_1.png',\r\n    },\r\n    {\r\n        title: { first: '나는 소비하면서', second: '사회까지 생각한다!' },\r\n        description: ['환경, 유기견, 소상공인', '저소득층, 동물보호...'],\r\n        highLight: '작은 소비 하나하나 모여 사회를 개선!',\r\n        imgPath: '/images/rending_2.png',\r\n    },\r\n    {\r\n        title: { first: '내가 이 골목 혜택왕!', second: '친구들과 혜택대결' },\r\n        description: ['누가 누가', '더 많이 혜택을 모았나?'],\r\n        highLight: '여기 모여라! 친구들끼리 혜택 대결!',\r\n        imgPath: '/images/rending_3.png',\r\n    },\r\n    {\r\n        title: { first: '혜택을 모아모아', second: '기부까지?!' },\r\n        description: [\r\n            '혜택받은 금액을 인출하거나',\r\n            '원하는 곳에 기부할 수 있지!',\r\n        ],\r\n        highLight: \"우리은행에서 '모인 기부액의 2배를' 기부!\",\r\n        imgPath: '/images/rending_4.png',\r\n    },\r\n];\r\n","import {\r\n    Box,\r\n    Button,\r\n    IconButton,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport { KeyboardArrowLeft } from '@material-ui/icons';\r\nimport React from 'react';\r\nimport { RenderComponentInterface } from './DataModel';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    buttonOverride: {\r\n        position: 'absolute !important' as 'absolute',\r\n    },\r\n}));\r\n\r\ninterface RenderingPageProps {\r\n    data: RenderComponentInterface;\r\n    onMoveButtonClick: (move: number) => void;\r\n}\r\n\r\ntype PropsType = RenderingPageProps & {\r\n    isLast: boolean;\r\n    isFirst: boolean;\r\n};\r\n\r\nconst RendingComponent: React.FC<PropsType> = ({\r\n    data,\r\n    ...props\r\n}: PropsType) => {\r\n    const classes = useStyles();\r\n\r\n    const onNextClick = () => {\r\n        props.onMoveButtonClick(1);\r\n    };\r\n\r\n    const onBackClick = () => {\r\n        props.onMoveButtonClick(-1);\r\n    };\r\n\r\n    return (\r\n        <Box style={{ position: 'relative' }} width=\"100%\" height=\"100%\">\r\n            <Box mt=\"10px\">\r\n                <div className=\"container\" style={{ overflowX: 'visible' }}>\r\n                    <IconButton\r\n                        className={`back_div ${props.isFirst && 'hide'}`}\r\n                        onClick={onBackClick}\r\n                    >\r\n                        <KeyboardArrowLeft />\r\n                    </IconButton>\r\n                </div>\r\n            </Box>\r\n\r\n            <div>\r\n                <p className=\"rd_posi_1 txt_30\">{data.title.first}</p>\r\n                <p className=\"rd_posi_2 txt_30 txt_b\">{data.title.second}</p>\r\n\r\n                <p className=\"rd_posi_3 txt_18\">\r\n                    {data.description[0]}\r\n                    <br />\r\n                    {data.description[1]}\r\n                </p>\r\n                <div\r\n                    className=\"txt_back_highlight\"\r\n                    style={{ width: '276px' }}\r\n                />\r\n                <p className=\"rd_posi_4 txt_18 txt_b\">{data.highLight}</p>\r\n            </div>\r\n            <div className=\"pd_b30 rd_posi_img\" style={{ left: '5%' }}>\r\n                <p className=\"txt_center\">\r\n                    <img className=\"img_rending\" src={data.imgPath} />\r\n                </p>\r\n            </div>\r\n            <Button\r\n                className={`btn_bottom bg_primaryblue ${classes.buttonOverride}`}\r\n                onClick={onNextClick}\r\n            >\r\n                <Typography className={`p_btn_bottom txt_wh txt_b`}>\r\n                    {props.isLast ? '시작하기' : '다음'}\r\n                </Typography>\r\n            </Button>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default RendingComponent;\r\n","import { Button, makeStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { useRecoilValue } from 'recoil';\r\nimport { CurrentUserState } from '../recoil/Session';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    imgContainer: {\r\n        width: '100px',\r\n    },\r\n    button: {\r\n        display: 'block',\r\n        width: '100%',\r\n    },\r\n    bodyReplace: {\r\n        zIndex: -1,\r\n        position: 'fixed',\r\n        width: '100%',\r\n        height: '100%',\r\n    },\r\n}));\r\n\r\nconst SigninPage: React.FC = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const userInfo = useRecoilValue(CurrentUserState);\r\n    const onClickSignup = () => {\r\n        history.push('/signup');\r\n    };\r\n\r\n    const onClickLogin = () => {\r\n        history.push('/login');\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className={`bg_primaryblue ${classes.bodyReplace}`} />\r\n            <div className=\"container\">\r\n                <div className=\"div_rd_txt pd_t60\">\r\n                    <p className=\"txt_center\">\r\n                        <img\r\n                            style={{ width: '100px' }}\r\n                            className={`pd_t130 ${classes.imgContainer}`}\r\n                            src=\"images/Logo.png\"\r\n                        />\r\n                    </p>\r\n                    <p className=\"txt_24 txt_wh txt_center\">환영합니다!</p>\r\n                </div>\r\n\r\n                <div className=\"login_btn\">\r\n                    <Button\r\n                        onClick={onClickSignup}\r\n                        className={classes.button}\r\n                        style={{ backgroundColor: 'white', height: '55px' }}\r\n                    >\r\n                        <p className=\"txt_primaryBlue txt_center txt_b\">\r\n                            혜택통 첫달 무료 체험하기\r\n                        </p>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        disabled={userInfo.nickname === ''}\r\n                        onClick={onClickLogin}\r\n                        className={`mg_t10 ${classes.button}`}\r\n                        style={{ border: '1px solid white', height: '55px' }}\r\n                    >\r\n                        <p className=\"txt_wh txt_center\">기존 사용자 로그인</p>\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SigninPage;\r\n","import React, { useRef } from 'react';\r\nimport Slider from 'react-slick';\r\nimport { useRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport {\r\n    rendingData as MainRendingData,\r\n    rendingData,\r\n} from '../component/Rending/DataModel';\r\nimport RendingPage from '../component/Rending/RendingComponent';\r\nimport { IsSplashSkip } from '../recoil/Session';\r\nimport SigninPage from './SigninPage';\r\n\r\nconst MainPage: React.FC = () => {\r\n    const [isSplashSkip, setIsSplashSkip] = useRecoilState(IsSplashSkip);\r\n\r\n    const sliderRef = useRef<Slider>(null);\r\n\r\n    const onMoveButtonClick = (index: number, move: number) => {\r\n        if (index + move >= MainRendingData.length) {\r\n            setIsSplashSkip(true);\r\n        } else if (index + move === -1) {\r\n            return;\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            {isSplashSkip ? (\r\n                <SigninPage />\r\n            ) : (\r\n                <Slider {...commonSlickSettings} ref={sliderRef}>\r\n                    {rendingData.map((eachData, index, arr) => {\r\n                        return (\r\n                            <RendingPage\r\n                                key={eachData.title.first}\r\n                                data={eachData}\r\n                                isFirst={index === 0}\r\n                                isLast={arr.length - 1 === index}\r\n                                onMoveButtonClick={(move) =>\r\n                                    onMoveButtonClick(index, move)\r\n                                }\r\n                            />\r\n                        );\r\n                    })}\r\n                </Slider>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default MainPage;\r\n","import {\r\n    Box,\r\n    Checkbox,\r\n    FormControlLabel,\r\n    Grid,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport React, { ChangeEvent } from 'react';\r\nimport LoaderComponent from '../Common/LoaderComponent';\r\nimport { getMoneyStr2Number, getNumberString } from '../Common/util';\r\nimport { SignupAccountInterface } from './DataModel';\r\n\r\nconst useStyles = makeStyles({\r\n    labelLayout: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        height: '100%',\r\n        paddingTop: 0,\r\n        marginLeft: '5px',\r\n    },\r\n    icon: {\r\n        color: '#62C3EB',\r\n        fontSize: '1.5rem',\r\n    },\r\n});\r\n\r\nconst AccountComponent: React.FC<SignupAccountInterface> = (\r\n    props: SignupAccountInterface\r\n) => {\r\n    return (\r\n        <Box display=\"flex\" flexDirection=\"column\">\r\n            <Grid>\r\n                <Typography className=\"txt_14 txt_gray\">\r\n                    {props.PRD_NM}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid>\r\n                <Typography className=\"txt_14 txt_b\">\r\n                    계좌번호: {props.ACNO}\r\n                </Typography>\r\n            </Grid>\r\n            <Grid>\r\n                <Typography className=\"txt_14 txt_b\">\r\n                    잔액: {getNumberString(getMoneyStr2Number(props.PBOK_BAL))}\r\n                </Typography>\r\n            </Grid>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport interface SignupAccountListProps {\r\n    isLoaded: boolean;\r\n    originData: SignupAccountInterface[];\r\n    selectedData: SignupAccountInterface[];\r\n    onChange(\r\n        data: SignupAccountInterface,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ): void;\r\n}\r\n\r\nconst SignupAccountList: React.FC<SignupAccountListProps> = (\r\n    props: SignupAccountListProps\r\n) => {\r\n    const classes = useStyles();\r\n\r\n    if (!props.isLoaded) {\r\n        return <LoaderComponent color=\"#62C3EB\" />;\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {props.originData.map((eachData) => {\r\n                return (\r\n                    <div\r\n                        key={eachData.ACNO}\r\n                        className=\"box_div mg_t20 bg_wh height_80\"\r\n                    >\r\n                        <FormControlLabel\r\n                            style={{ display: 'flex' }}\r\n                            className=\"checkbox__label pd_l20\"\r\n                            control={\r\n                                <Checkbox\r\n                                    checkedIcon={\r\n                                        <CheckCircleOutlineIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    icon={\r\n                                        <RadioButtonUncheckedIcon\r\n                                            className={classes.icon}\r\n                                        />\r\n                                    }\r\n                                    color=\"primary\"\r\n                                    checked={\r\n                                        props.selectedData.findIndex(\r\n                                            (select) =>\r\n                                                select.ACNO === eachData.ACNO\r\n                                        ) >= 0\r\n                                    }\r\n                                    onChange={(event) =>\r\n                                        props.onChange(eachData, event)\r\n                                    }\r\n                                />\r\n                            }\r\n                            classes={{ root: classes.labelLayout }}\r\n                            label={<AccountComponent {...eachData} />}\r\n                        />\r\n                    </div>\r\n                );\r\n            })}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SignupAccountList;\r\n","import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useRecoilValue, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { SignUpAccInfoState, SignUpProfileState } from '../../recoil/Session';\r\nimport { getMoneyStr2Number } from '../Common/util';\r\nimport { SignupAccountInterface, SignupComponentProps } from './DataModel';\r\nimport SignupAccountList from './SignupAccountList';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\nconst SignupAccountComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const setAccount = useSetRecoilState(SignUpAccInfoState);\r\n    const signupInfo = useRecoilValue(SignUpProfileState);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n\r\n    const [wooriAccountList, setWooriAccountList] = useState<\r\n        SignupAccountInterface[]\r\n    >([]);\r\n\r\n    const [selectAccount, setSelectAccount] = useState<\r\n        SignupAccountInterface[]\r\n    >([]);\r\n\r\n    useEffect(() => {\r\n        if (props.checkCurrent) {\r\n            let regex = /(\\d{3})(\\d{3})(\\d{4})/;\r\n            if (signupInfo.cellNumber.length === 11) {\r\n                regex = /(\\d{3})(\\d{4})(\\d{4})/;\r\n            }\r\n            const cellFormat = signupInfo.cellNumber.replace(regex, '$1-$2-$3');\r\n\r\n            http.get(\r\n                `/api/wooribank/userPhoneNumber/${encodeURI(\r\n                    cellFormat\r\n                )}/accounts`\r\n            ).then((res) => {\r\n                const data: SignupAccountInterface[] = (res.data.dataBody\r\n                    .GRID as SignupAccountInterface[]).filter((eachData) => {\r\n                    return eachData.ACCT_KND.toUpperCase() === 'P';\r\n                });\r\n                setWooriAccountList(data);\r\n                setIsLoaded(true);\r\n            });\r\n        }\r\n    }, [props.checkCurrent]);\r\n\r\n    const onChange = (\r\n        data: SignupAccountInterface,\r\n        event: ChangeEvent<HTMLInputElement>\r\n    ) => {\r\n        if (event.currentTarget.checked) {\r\n            setSelectAccount([data]);\r\n            setAccount({\r\n                accountNumber: data.ACNO,\r\n                accountMoney: getMoneyStr2Number(data.PBOK_BAL),\r\n            });\r\n        } else {\r\n            setSelectAccount([]);\r\n        }\r\n    };\r\n\r\n    console.log(selectAccount);\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <SignupCommonComponent\r\n                buttonDisable={selectAccount.length === 0}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n            >\r\n                <p className=\"txt_20\">보유 중인 우리은행 계좌 1개를</p>\r\n                <p className=\"txt_20 txt_b\">선택해주세요.</p>\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    구독료가 매월\r\n                </p>\r\n                &nbsp;\r\n                <p\r\n                    className=\"txt_18 txt_b txt_line\"\r\n                    style={{ color: '#3BAAD8' }}\r\n                >\r\n                    20일\r\n                </p>\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    에\r\n                </p>\r\n                &nbsp;\r\n                <p\r\n                    className=\"txt_18 txt_b txt_line\"\r\n                    style={{ color: '#3BAAD8' }}\r\n                >\r\n                    2,900원씩\r\n                </p>\r\n                <br />\r\n                &nbsp;\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    해당 계좌에서 빠질 예정입니다.\r\n                </p>\r\n                <br />\r\n                <br />\r\n                <p\r\n                    className=\"txt_18 txt_b txt_line\"\r\n                    style={{ color: '#3BAAD8' }}\r\n                >\r\n                    첫달 무료 이용 후\r\n                </p>\r\n                &nbsp;\r\n                <p className=\"txt_14 txt_line\" style={{ color: '#3BAAD8' }}>\r\n                    언제든 해지하실 수 있어요!\r\n                </p>\r\n                <div className=\"box_div mg_t20\">\r\n                    <SignupAccountList\r\n                        isLoaded={isLoaded}\r\n                        onChange={onChange}\r\n                        originData={wooriAccountList}\r\n                        selectedData={selectAccount}\r\n                    />\r\n                </div>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupAccountComponent;\r\n","import {\r\n    Box,\r\n    Button,\r\n    Card,\r\n    CardContent,\r\n    Dialog,\r\n    Divider,\r\n    makeStyles,\r\n    Typography,\r\n} from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    dialog: {\r\n        fontSize: '0.8rem !important',\r\n        '& .MuiBackdrop-root': {\r\n            backgroundColor: '#00000000',\r\n        },\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        top: 0,\r\n        margin: '10px 0 0 0',\r\n        maxWidth: '100%',\r\n        width: '100%',\r\n        borderRadius: '1rem',\r\n    },\r\n    card: {\r\n        minHeight: '0 !important',\r\n    },\r\n    img: {\r\n        width: '1.1rem',\r\n        height: '1.1rem',\r\n    },\r\n    title: {\r\n        marginLeft: '0.3rem',\r\n        fontSize: '0.8rem',\r\n        color: '#62C3EB',\r\n    },\r\n    dec: {\r\n        fontSize: '0.8rem',\r\n    },\r\n}));\r\n\r\nexport interface MSMDialogProps {\r\n    onClose(): void;\r\n    validStr: string;\r\n    open: boolean;\r\n}\r\n\r\nconst MSMDialog: React.FC<MSMDialogProps> = (props: MSMDialogProps) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            classes={{ paper: classes.paper }}\r\n            className={classes.dialog}\r\n            onClose={props.onClose}\r\n            open={props.open}\r\n        >\r\n            <Card className={classes.card}>\r\n                <CardContent style={{ paddingBottom: 0 }}>\r\n                    <Box display=\"flex\">\r\n                        <img\r\n                            className={classes.img}\r\n                            src=\"/images/small_logo.png\"\r\n                        />\r\n                        <Typography className={classes.title}>\r\n                            우리핏베네핏\r\n                        </Typography>\r\n                    </Box>\r\n                    <Typography className={classes.dec}>\r\n                        인증번호는 {props.validStr} 입니다.\r\n                    </Typography>\r\n                    <Box my=\"5px\">\r\n                        <Divider />\r\n                    </Box>\r\n                    <Box textAlign=\"center\" my=\"5px\">\r\n                        <Button\r\n                            onClick={props.onClose}\r\n                            style={{\r\n                                padding: 0,\r\n                                color: '#3BAAD8',\r\n                                backgroundColor: 'white',\r\n                            }}\r\n                        >\r\n                            확인\r\n                        </Button>\r\n                    </Box>\r\n                </CardContent>\r\n            </Card>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default MSMDialog;\r\n","import { Box, Button, Grid, TextField } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport { SignUpProfileState } from '../../recoil/Session';\r\nimport { makeNumberId } from '../Common/util';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport MSMDialog from './MSMDialog';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\nconst SignupCellphoneComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [profile, setProfile] = useRecoilState(SignUpProfileState);\r\n\r\n    const [dialog, setDialog] = useState<boolean>(false);\r\n    const [complete, setComplete] = useState<boolean>(false);\r\n\r\n    const [inputValidStr, setInputValidStr] = useState<string>('');\r\n    const [validStr, setValidStr] = useState<string>('');\r\n\r\n    const onChangePhoneNumber = (data: string) => {\r\n        let onlyNums = data.replace(/[^0-9]/g, '');\r\n        if (onlyNums.length > 11) {\r\n            onlyNums = onlyNums.slice(0, 11);\r\n        }\r\n        setProfile({ ...profile, cellNumber: onlyNums });\r\n    };\r\n\r\n    const onCertButtonClick = () => {\r\n        setDialog(true);\r\n        const randomNum = makeNumberId(6);\r\n        setValidStr(randomNum);\r\n        setInputValidStr(randomNum);\r\n    };\r\n\r\n    const onVerifyButtonClick = () => {\r\n        if (inputValidStr === validStr) {\r\n            setComplete(true);\r\n            // props.onMoveButtonClick(1);\r\n        }\r\n    };\r\n\r\n    const certMode = validStr.length > 0;\r\n    const inValid =\r\n        profile.cellNumber.length < 10 || profile.cellNumber.length > 11;\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <MSMDialog\r\n                validStr={validStr}\r\n                open={dialog}\r\n                onClose={() => {\r\n                    setDialog(false);\r\n                }}\r\n            />\r\n            <SignupCommonComponent\r\n                buttonDisable={!complete}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n            >\r\n                <p className=\"txt_20 txt_b\">휴대폰번호를 입력하세요</p>\r\n                <Box\r\n                    className=\"bg_wh box_div mg_t20\"\r\n                    px=\"16px\"\r\n                    pt=\"20px\"\r\n                    pb=\"16px\"\r\n                >\r\n                    <Grid\r\n                        style={{ flexWrap: 'unset' }}\r\n                        container\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <TextField\r\n                            disabled={certMode || complete}\r\n                            error={inValid}\r\n                            helperText={\r\n                                inValid && '휴대전화 번호는 10~11 자리입니다'\r\n                            }\r\n                            value={profile.cellNumber}\r\n                            onChange={(event) => {\r\n                                onChangePhoneNumber(event.target.value);\r\n                            }}\r\n                            label={'휴대폰 번호'}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Box flexGrow={1} />\r\n                        <Button\r\n                            disabled={inValid || complete}\r\n                            className=\"btn_blueBorder\"\r\n                            style={{\r\n                                padding: 0,\r\n                            }}\r\n                            onClick={onCertButtonClick}\r\n                        >\r\n                            {certMode ? '재인증' : '입력'}\r\n                        </Button>\r\n                    </Grid>\r\n                </Box>\r\n\r\n                {certMode && (\r\n                    <>\r\n                        <p className=\"mg_t30 txt_14 txt_center\">\r\n                            팝업창에 떴던 인증번호를 아래에 입력해주세요\r\n                        </p>\r\n                        <Box\r\n                            className=\"box_div mg_t30 bg_wh\"\r\n                            px=\"16px\"\r\n                            pt=\"20px\"\r\n                            pb=\"16px\"\r\n                        >\r\n                            <Grid\r\n                                style={{ flexWrap: 'unset' }}\r\n                                container\r\n                                alignItems=\"center\"\r\n                            >\r\n                                <TextField\r\n                                    disabled={complete}\r\n                                    error={inputValidStr !== validStr}\r\n                                    value={inputValidStr}\r\n                                    onChange={(event) => {\r\n                                        setInputValidStr(event.target.value);\r\n                                    }}\r\n                                    label={'인증번호 확인'}\r\n                                    variant=\"outlined\"\r\n                                />\r\n                                <Box flexGrow={1} />\r\n                                <Button\r\n                                    disabled={complete}\r\n                                    className=\"btn_blueBorder\"\r\n                                    style={{\r\n                                        padding: 0,\r\n                                    }}\r\n                                    onClick={onVerifyButtonClick}\r\n                                >\r\n                                    완료\r\n                                </Button>\r\n                            </Grid>\r\n                        </Box>\r\n                    </>\r\n                )}\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupCellphoneComponent;\r\n\r\n//import { TextField } from '@material-ui/core';\r\n//import React, { useState } from 'react';\r\n//import { useRecoilState } from 'recoil';\r\n//import http from '../../http';\r\n//import { SignUpProfileState } from '../../recoil/Session';\r\n//import {\r\n//    SignupComponentProps,\r\n//    SignupProfileInfo,\r\n//    SignupProfileInterface,\r\n//} from './DataModel';\r\n//import SignupCommonComponent from './SignupCommon';\r\n//\r\n//type SignupProfileProps = SignupComponentProps & {\r\n//    data: SignupProfileInterface;\r\n//    index: number;\r\n//};\r\n//\r\n//const parseData = (data: SignupProfileInfo, index: number): string => {\r\n//    switch (index) {\r\n//        case 0:\r\n//            return data.realName;\r\n//        case 1:\r\n//            return data.nickName;\r\n//        case 2:\r\n//            return data.cellNumber;\r\n//    }\r\n//    return '';\r\n//};\r\n//\r\n//const SignupProfileComponent: React.FC<SignupProfileProps> = (\r\n//    props: SignupProfileProps\r\n//) => {\r\n//    const [profile, setProfile] = useRecoilState(SignUpProfileState);\r\n//    const value = parseData(profile, props.index);\r\n//    const buttonDisable = value === '';\r\n//    const [inValid, setInValid] = useState<boolean>(false);\r\n//    const [helperText, setHelperText] = useState<string>('');\r\n//\r\n//    const onChange = (index: number, data: string) => {\r\n//        switch (index) {\r\n//            case 0:\r\n//                setProfile({ ...profile, realName: data });\r\n//                break;\r\n//            case 1:\r\n//                if (data !== '') {\r\n//                    http.get(`/api/members/nicknameCheck/${data}`).then(\r\n//                        (res) => {\r\n//                            const alreadyExist: boolean = res.data.data;\r\n//                            if (alreadyExist !== inValid) {\r\n//                                setInValid(alreadyExist);\r\n//                                setHelperText('이미 존재하는 닉네임입니다.');\r\n//                            }\r\n//                        }\r\n//                    );\r\n//                }\r\n//                setProfile({ ...profile, nickName: data });\r\n//\r\n//                break;\r\n//            case 2:\r\n//                let onlyNums = data.replace(/[^0-9]/g, '');\r\n//                if (onlyNums.length > 11) {\r\n//                    onlyNums = onlyNums.slice(0, 11);\r\n//                }\r\n//                setProfile({ ...profile, cellNumber: onlyNums });\r\n//                if (onlyNums.length < 10 || onlyNums.length > 11) {\r\n//                    setInValid(true);\r\n//                    setHelperText('휴대전화 번호는 10~11 자리입니다');\r\n//                } else {\r\n//                    setInValid(false);\r\n//                }\r\n//                break;\r\n//        }\r\n//    };\r\n//\r\n//    return (\r\n//        <div className=\"bg_gray5\">\r\n//            <SignupCommonComponent\r\n//                buttonDisable={buttonDisable || inValid}\r\n//                onMoveButtonClick={props.onMoveButtonClick}\r\n//            >\r\n//                <p className=\"txt_20 txt_b\">{props.data.title}</p>\r\n//                <div className=\"box_div mg_t20 bg_wh\">\r\n//                    <div className=\"pd_t16 mg_l16\"></div>\r\n//                    <div className=\"pd_t4 mg_l16 pd_b16\">\r\n//                        <TextField\r\n//                            error={inValid}\r\n//                            helperText={inValid && helperText}\r\n//                            value={value}\r\n//                            onChange={(event) => {\r\n//                                onChange(props.index, event.target.value);\r\n//                            }}\r\n//                            label={props.data.description}\r\n//                            variant=\"outlined\"\r\n//                        />\r\n//                    </div>\r\n//                </div>\r\n//            </SignupCommonComponent>\r\n//        </div>\r\n//    );\r\n//};\r\n//\r\n//export default SignupProfileComponent;\r\n//\r\n","import { Box, IconButton, InputAdornment, TextField } from '@material-ui/core';\r\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilValue, useResetRecoilState, useSetRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport {\r\n    CurrentUserState,\r\n    SignUpAccInfoState,\r\n    SignUpCategoryState,\r\n    SignUpProfileState,\r\n    UserInfo,\r\n} from '../../recoil/Session';\r\nimport FingerDialog from '../Common/FingerDialog';\r\nimport { SignupComponentProps } from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\ninterface SignupUserModel {\r\n    name: string;\r\n    nickname: string;\r\n    accountNumber: string;\r\n    accountMoney: string;\r\n    phoneNumber: string;\r\n    password: string;\r\n}\r\n\r\ninterface SignupCategory {\r\n    benefitCategoryList: Array<{ userNickname: string; categoryId: number }>;\r\n}\r\n\r\nconst SignupPasswordComponent: React.FC<SignupComponentProps> = (\r\n    props: SignupComponentProps\r\n) => {\r\n    const [password, setPassword] = useState<string>('');\r\n    const [showPassword, setShowPassword] = useState(false);\r\n\r\n    const setUserState = useSetRecoilState<UserInfo>(CurrentUserState);\r\n\r\n    const signupProfile = useRecoilValue(SignUpProfileState);\r\n    const accountInfo = useRecoilValue(SignUpAccInfoState);\r\n\r\n    const handleClickShowPassword = () => setShowPassword(!showPassword);\r\n    const handleMouseDownPassword = () => setShowPassword(!showPassword);\r\n\r\n    const resetProfile = useResetRecoilState(SignUpProfileState);\r\n    const resetAccNum = useResetRecoilState(SignUpAccInfoState);\r\n    const resetCategory = useResetRecoilState(SignUpCategoryState);\r\n\r\n    const [fingerDialog, setFingerDialog] = useState<boolean>(false);\r\n\r\n    const signupFunction = async () => {\r\n        const signupData: SignupUserModel = {\r\n            name: signupProfile.realName,\r\n            nickname: signupProfile.nickName,\r\n            phoneNumber: signupProfile.cellNumber,\r\n            accountNumber: accountInfo.accountNumber,\r\n            password: password,\r\n            accountMoney: accountInfo.accountMoney + '',\r\n        };\r\n        const signupCategory: SignupCategory = {\r\n            benefitCategoryList: [\r\n                {\r\n                    categoryId: 101,\r\n                    userNickname: signupProfile.nickName,\r\n                },\r\n                {\r\n                    categoryId: 102,\r\n                    userNickname: signupProfile.nickName,\r\n                },\r\n            ],\r\n        };\r\n\r\n        const createRes = await http.post('/api/members', signupData); // user 먼저 만들어져야함\r\n        console.log(createRes);\r\n        const registRes = await http.post(\r\n            '/api/members/category',\r\n            signupCategory\r\n        ); // user 먼저 만들어져야함\r\n        console.log(registRes);\r\n        const userRes = await http.get(\r\n            `/api/members/${encodeURI(signupProfile.nickName)}`\r\n        ); // user 먼저 만들어져야함\r\n        console.log(userRes.data.data);\r\n        const currentUser: UserInfo = userRes.data.data;\r\n        setUserState({\r\n            accountMoney: currentUser.accountMoney,\r\n            point: currentUser.point,\r\n            accountNumber: currentUser.accountNumber,\r\n            name: currentUser.name,\r\n            nickname: currentUser.nickname,\r\n            phoneNumber: currentUser.phoneNumber,\r\n        });\r\n        resetProfile();\r\n        resetAccNum();\r\n        resetCategory();\r\n\r\n        setFingerDialog(false);\r\n        props.onMoveButtonClick(1);\r\n    };\r\n\r\n    const fingerClick = async () => {\r\n        await signupFunction();\r\n    };\r\n\r\n    const fingerClose = () => {\r\n        setFingerDialog(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <FingerDialog\r\n                title={'지문확인'}\r\n                fingerClick={fingerClick}\r\n                open={fingerDialog}\r\n                onClose={fingerClose}\r\n            />\r\n            <SignupCommonComponent\r\n                buttonDisable={password === ''}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n                onCustomizeNextClick={() => {\r\n                    setFingerDialog(true);\r\n                }}\r\n            >\r\n                <p className=\"txt_20 txt_b\">앱 사용을 위한</p>\r\n                <p className=\"txt_20\">비밀번호를 설정해 주세요.</p>\r\n\r\n                <Box mt=\"25px\">\r\n                    <TextField\r\n                        style={{ width: '80%', marginLeft: '10%' }}\r\n                        label=\"Password\"\r\n                        type={showPassword ? 'text' : 'password'}\r\n                        autoComplete=\"current-password\"\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                        InputProps={{\r\n                            // <-- This is where the toggle button is added.\r\n                            endAdornment: (\r\n                                <InputAdornment position=\"end\">\r\n                                    <IconButton\r\n                                        aria-label=\"toggle password visibility\"\r\n                                        onClick={handleClickShowPassword}\r\n                                        onMouseDown={handleMouseDownPassword}\r\n                                    >\r\n                                        {showPassword ? (\r\n                                            <Visibility\r\n                                                style={{ fontSize: '1.5rem' }}\r\n                                            />\r\n                                        ) : (\r\n                                            <VisibilityOff\r\n                                                style={{ fontSize: '1.5rem' }}\r\n                                            />\r\n                                        )}\r\n                                    </IconButton>\r\n                                </InputAdornment>\r\n                            ),\r\n                        }}\r\n                    />\r\n                </Box>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupPasswordComponent;\r\n","import { TextField } from '@material-ui/core';\r\nimport React, { useState } from 'react';\r\nimport { useRecoilState } from 'recoil';\r\nimport http from '../../http';\r\nimport { SignUpProfileState } from '../../recoil/Session';\r\nimport {\r\n    SignupComponentProps,\r\n    SignupProfileInfo,\r\n    SignupProfileInterface,\r\n} from './DataModel';\r\nimport SignupCommonComponent from './SignupCommon';\r\n\r\ntype SignupProfileProps = SignupComponentProps & {\r\n    data: SignupProfileInterface;\r\n    index: number;\r\n};\r\n\r\nconst parseData = (data: SignupProfileInfo, index: number): string => {\r\n    switch (index) {\r\n        case 0:\r\n            return data.realName;\r\n        case 1:\r\n            return data.nickName;\r\n    }\r\n    return '';\r\n};\r\n\r\nconst SignupProfileComponent: React.FC<SignupProfileProps> = (\r\n    props: SignupProfileProps\r\n) => {\r\n    const [profile, setProfile] = useRecoilState(SignUpProfileState);\r\n    const value = parseData(profile, props.index);\r\n    const buttonDisable = value === '';\r\n    const [inValid, setInValid] = useState<boolean>(false);\r\n    const [helperText, setHelperText] = useState<string>('');\r\n\r\n    const onChange = (index: number, data: string) => {\r\n        switch (index) {\r\n            case 0:\r\n                setProfile({ ...profile, realName: data });\r\n                break;\r\n            case 1:\r\n                if (data !== '') {\r\n                    http.get(`/api/members/nicknameCheck/${data}`).then(\r\n                        (res) => {\r\n                            const alreadyExist: boolean = res.data.data;\r\n                            if (alreadyExist !== inValid) {\r\n                                setInValid(alreadyExist);\r\n                                setHelperText('이미 존재하는 닉네임입니다.');\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n                setProfile({ ...profile, nickName: data });\r\n\r\n                break;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg_gray5\">\r\n            <SignupCommonComponent\r\n                buttonDisable={buttonDisable || inValid}\r\n                onMoveButtonClick={props.onMoveButtonClick}\r\n            >\r\n                <p className=\"txt_20 txt_b\">{props.data.title}</p>\r\n                <div className=\"box_div mg_t20 bg_wh\">\r\n                    <div className=\"pd_t16 mg_l16\"></div>\r\n                    <div className=\"pd_t4 mg_l16 pd_b16\">\r\n                        <TextField\r\n                            error={inValid}\r\n                            helperText={inValid && helperText}\r\n                            value={value}\r\n                            onChange={(event) => {\r\n                                onChange(props.index, event.target.value);\r\n                            }}\r\n                            label={props.data.description}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </SignupCommonComponent>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SignupProfileComponent;\r\n","import React, { useRef, useState } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport Slider from 'react-slick';\r\nimport { useResetRecoilState } from 'recoil';\r\nimport { commonSlickSettings } from '../component/Common';\r\nimport {\r\n    rendingData,\r\n    SignupProfileInterface,\r\n} from '../component/Signup/DataModel';\r\nimport SignupAccountComponent from '../component/Signup/SignupAccountComponent';\r\nimport SignupCellphoneComponent from '../component/Signup/SignupCellphoneComponent';\r\nimport SignupPasswordComponent from '../component/Signup/SignupPasswordComponent';\r\nimport SignupProfileComponent from '../component/Signup/SignupProfileComponent';\r\nimport {\r\n    SignUpAccInfoState,\r\n    SignUpCategoryState,\r\n    SignUpProfileState,\r\n} from '../recoil/Session';\r\n\r\nconst SignupPage: React.FC = () => {\r\n    const history = useHistory();\r\n\r\n    const resetProfile = useResetRecoilState(SignUpProfileState);\r\n    const resetAccInfo = useResetRecoilState(SignUpAccInfoState);\r\n    const resetCategory = useResetRecoilState(SignUpCategoryState);\r\n    const sliderRef = useRef<Slider>(null);\r\n    const [index, setIndex] = useState<number>(0);\r\n\r\n    const items: Array<JSX.Element> = [];\r\n    rendingData.forEach((eachData: SignupProfileInterface, index: number) => {\r\n        items.push(\r\n            <SignupProfileComponent\r\n                key={index}\r\n                index={index}\r\n                data={eachData}\r\n                onMoveButtonClick={(move: number) => onMove(index, move)}\r\n            />\r\n        );\r\n    });\r\n\r\n    const onMove = async (index: number, move: number) => {\r\n        if (index + move < 0) {\r\n            resetProfile();\r\n            resetAccInfo();\r\n            resetCategory();\r\n            history.replace('/homepage');\r\n            setIndex(0);\r\n            return;\r\n        }\r\n        setIndex(index + move);\r\n        if (index + move > 4) {\r\n            // 맨마지막 페이지\r\n            // setIsAccSeq(true); real Signup\r\n            history.replace('/category');\r\n        } else {\r\n            sliderRef.current && sliderRef.current.slickGoTo(index + move);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Slider {...commonSlickSettings} ref={sliderRef}>\r\n            {items}\r\n            <SignupCellphoneComponent\r\n                key={2}\r\n                onMoveButtonClick={(move: number) => {\r\n                    onMove(2, move);\r\n                }}\r\n            />\r\n            <SignupAccountComponent\r\n                key={3}\r\n                checkCurrent={index === 3}\r\n                onMoveButtonClick={(move: number) => {\r\n                    onMove(3, move);\r\n                }}\r\n            />\r\n            <SignupPasswordComponent\r\n                key={4}\r\n                onMoveButtonClick={(move: number) => {\r\n                    onMove(4, move);\r\n                }}\r\n            />\r\n        </Slider>\r\n    );\r\n};\r\n\r\nexport default SignupPage;\r\n","import React, { useEffect } from 'react';\r\nimport { BrowserRouter, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { useSetRecoilState } from 'recoil';\r\nimport 'slick-carousel/slick/slick-theme.css';\r\nimport 'slick-carousel/slick/slick.css';\r\nimport './basic.css';\r\nimport AuthRouteGuard from './component/AuthRouteGuard';\r\nimport GivingCompleteDialog from './component/Common/GivingCompleteDialog';\r\nimport {\r\n    DUMMY_FRIEND_SET,\r\n    FriendDataSet,\r\n} from './component/Together/DataModel';\r\nimport './overide.css';\r\nimport AddFriendPage from './page/AddFriendPage';\r\nimport BenefitCompanyPage from './page/BenefitCompanyPage';\r\nimport BlockChainPage from './page/BlockChainPage';\r\nimport BlockChainSelectPage from './page/BlockChainSelectPage';\r\nimport CategoryPage from './page/CategoryPage';\r\nimport GivingPage from './page/GivingPage';\r\nimport HomePage from './page/HomePage';\r\nimport LoginPage from './page/LoginPage';\r\nimport MainPage from './page/MainPage';\r\nimport SignupPage from './page/SignupPage';\r\nimport { FriendDataSetState } from './recoil/Together';\r\n\r\nconst App: React.FC = () => {\r\n    const setFrined = useSetRecoilState(FriendDataSetState);\r\n    useEffect(() => {\r\n        window.addEventListener(\r\n            'message',\r\n            (e) => {\r\n                console.log(e);\r\n                const res = e.data.split(';;;');\r\n                if (res[0] === 'parent') {\r\n                    const dataStr: string = res[1] as string;\r\n                    if (dataStr.length === 0) {\r\n                        setFrined(DUMMY_FRIEND_SET);\r\n                        return;\r\n                    }\r\n                    const eachPersonStr = dataStr.split(';');\r\n                    const friendList: FriendDataSet[] = [];\r\n                    eachPersonStr.forEach((eachStr: string) => {\r\n                        const privateDataList: string[] = eachStr.split(':');\r\n                        friendList.push({\r\n                            name: privateDataList[0],\r\n                            displayname: privateDataList[1],\r\n                            cellphone: privateDataList[2],\r\n                        });\r\n                    });\r\n                    console.log(eachPersonStr);\r\n                    setFrined(friendList);\r\n                } else if (res[0] === 'child') {\r\n                    console.log('called by me');\r\n                    setFrined(DUMMY_FRIEND_SET);\r\n                }\r\n            },\r\n            false\r\n        );\r\n    }, []);\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <GivingCompleteDialog />\r\n\r\n            <Switch>\r\n                <Route exact path=\"/\" component={MainPage} />\r\n                <Route exact path=\"/signup\" component={SignupPage} />\r\n                <AuthRouteGuard exact path=\"/login\" component={LoginPage} />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/category\"\r\n                    component={CategoryPage}\r\n                />\r\n                <AuthRouteGuard exact path=\"/homepage\" component={HomePage} />\r\n                <AuthRouteGuard exact path=\"/giving\" component={GivingPage} />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/benefit-company/:name\"\r\n                    component={BenefitCompanyPage}\r\n                />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/add-friend\"\r\n                    component={AddFriendPage}\r\n                />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/chain-select\"\r\n                    component={BlockChainSelectPage}\r\n                />\r\n                <AuthRouteGuard\r\n                    exact\r\n                    path=\"/blockchain/:type\"\r\n                    component={BlockChainPage}\r\n                />\r\n\r\n                <Redirect from=\"*\" to=\"/\" />\r\n            </Switch>\r\n        </BrowserRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {\r\n    StylesProvider,\r\n    ThemeProvider,\r\n    unstable_createMuiStrictModeTheme,\r\n} from '@material-ui/core/styles';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nconst theme = unstable_createMuiStrictModeTheme();\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <RecoilRoot>\r\n            <ThemeProvider theme={theme}>\r\n                <StylesProvider injectFirst>\r\n                    <App />\r\n                </StylesProvider>\r\n            </ThemeProvider>\r\n        </RecoilRoot>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}